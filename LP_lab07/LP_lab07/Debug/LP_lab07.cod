; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab07\LP_lab07\LP_lab07.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__8906660C_vcruntime_new@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__35D7DDB3_corecrt_memory@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__5467428D_corecrt_wconio@h DB 01H
__4442441F_corecrt_wio@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__186FF47F_stat@h DB 01H
__534C724A_wchar@h DB 01H
__09340588_corecrt_math@h DB 01H
__24E9E95F_stdlib@h DB 01H
__F8119FB4_cstdlib DB 01H
__F2870A2C_limits DB 01H
__85A9AA98_type_traits DB 01H
__B0C4CEA9_malloc@h DB 01H
__E75714E4_vcruntime_exception@h DB 01H
__E4152856_exception DB 01H
__4324C6B3_xutility DB 01H
__A58979FC_xmemory DB 01H
__D15AFF60_xstring DB 01H
__7242C389_ctype@h DB 01H
__3AFA803E_string DB 01H
__0A4FAB91_cmath DB 01H
__6D5B120B_stdexcept DB 01H
__160863A3_xcall_once@h DB 01H
__99B256EE_atomic DB 01H
__A9557183_system_error DB 01H
__FB364CBD_vcruntime_typeinfo@h DB 01H
__33FB35AA_typeinfo DB 01H
__4E2906A2_memory DB 01H
__626C51AD_xfacet DB 01H
__2C72D662_xlocinfo DB 01H
__0E648B51_xlocale DB 01H
__1597A171_xiosbase DB 01H
__90E3ED46_xlocnum DB 01H
__165C22CB_ios DB 01H
__88EC1446_fstream DB 01H
__1FF73647_LP_lab07@cpp DB 01H
__7EA464AF_istream DB 01H
__1D745195_ostream DB 01H
__6FFBAAB7_streambuf DB 01H
__3E6EDFAA_iosfwd DB 01H
__CF1C1A3F_utility DB 01H
__528871F3_iterator DB 01H
__38038D2D_xstddef DB 01H
__EE19A480_xatomic@h DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	_main
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_03OJJHGHEE@Rus@				; `string'
PUBLIC	??_C@_0O@GLGAMALN@?O?p?e?o?n?d?$OA?b?$OA?r?e?k?h@ ; `string'
PUBLIC	??_C@_07DFMMIAND@?C?k?$OA?d?j?h?i@		; `string'
PUBLIC	??_C@_07LNOFBJIL@?B?e?$PP?k?j?h?m@		; `string'
PUBLIC	??_C@_06CANPBBNL@?Q?l?e?k?n?b@			; `string'
PUBLIC	??_C@_09MPDLONIC@?S?p?a?$OA?m?n?b?h?w@		; `string'
PUBLIC	??_C@_05FMPCGHH@?O?$OA?v?e?i@			; `string'
PUBLIC	??_C@_07NEFKOGLJ@?D?n?l?n?p?$OA?d@		; `string'
PUBLIC	??_C@_08PKKOJKEO@?Q?r?s?d?e?m?r?$PL@		; `string'
PUBLIC	??_C@_06FBIHJBK@?H?b?$OA?m?n?b@			; `string'
PUBLIC	??_C@_06GFOJDMIM@?O?e?r?p?n?b@			; `string'
PUBLIC	??_C@_07DDEGOECN@?Q?h?d?n?p?n?b@		; `string'
PUBLIC	??_C@_08MBMPIGOC@?M?h?j?n?k?$OA?e?b@		; `string'
PUBLIC	??_R0PAD@8					; char * `RTTI Type Descriptor'
EXTRN	_strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp__setlocale:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	?Create@Dictionary@@YA?AUInstance@1@QADH@Z:PROC	; Dictionary::Create
EXTRN	?AddEntry@Dictionary@@YAXAAUInstance@1@UEntry@1@@Z:PROC ; Dictionary::AddEntry
EXTRN	?DelEntry@Dictionary@@YAXAAUInstance@1@H@Z:PROC	; Dictionary::DelEntry
EXTRN	?UpdEntry@Dictionary@@YAXAAUInstance@1@HUEntry@1@@Z:PROC ; Dictionary::UpdEntry
EXTRN	?GetEntry@Dictionary@@YA?AUEntry@1@AAUInstance@1@H@Z:PROC ; Dictionary::GetEntry
EXTRN	?Print@Dictionary@@YAXAAUInstance@1@@Z:PROC	; Dictionary::Print
EXTRN	?Delete@Dictionary@@YAXAAUInstance@1@@Z:PROC	; Dictionary::Delete
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R0PAD@8
data$r	SEGMENT
??_R0PAD@8 DD	FLAT:??_7type_info@@6B@			; char * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAD', 00H
data$r	ENDS
;	COMDAT ??_C@_08MBMPIGOC@?M?h?j?n?k?$OA?e?b@
CONST	SEGMENT
??_C@_08MBMPIGOC@?M?h?j?n?k?$OA?e?b@ DB 0cdH, 0e8H, 0eaH, 0eeH, 0ebH, 0e0H
	DB	0e5H, 0e2H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07DDEGOECN@?Q?h?d?n?p?n?b@
CONST	SEGMENT
??_C@_07DDEGOECN@?Q?h?d?n?p?n?b@ DB 0d1H, 0e8H, 0e4H, 0eeH, 0f0H, 0eeH, 0e2H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06GFOJDMIM@?O?e?r?p?n?b@
CONST	SEGMENT
??_C@_06GFOJDMIM@?O?e?r?p?n?b@ DB 0cfH, 0e5H, 0f2H, 0f0H, 0eeH, 0e2H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FBIHJBK@?H?b?$OA?m?n?b@
CONST	SEGMENT
??_C@_06FBIHJBK@?H?b?$OA?m?n?b@ DB 0c8H, 0e2H, 0e0H, 0edH, 0eeH, 0e2H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PKKOJKEO@?Q?r?s?d?e?m?r?$PL@
CONST	SEGMENT
??_C@_08PKKOJKEO@?Q?r?s?d?e?m?r?$PL@ DB 0d1H, 0f2H, 0f3H, 0e4H, 0e5H, 0edH
	DB	0f2H, 0fbH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07NEFKOGLJ@?D?n?l?n?p?$OA?d@
CONST	SEGMENT
??_C@_07NEFKOGLJ@?D?n?l?n?p?$OA?d@ DB 0c4H, 0eeH, 0ecH, 0eeH, 0f0H, 0e0H, 0e4H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_05FMPCGHH@?O?$OA?v?e?i@
CONST	SEGMENT
??_C@_05FMPCGHH@?O?$OA?v?e?i@ DB 0cfH, 0e0H, 0f6H, 0e5H, 0e9H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MPDLONIC@?S?p?a?$OA?m?n?b?h?w@
CONST	SEGMENT
??_C@_09MPDLONIC@?S?p?a?$OA?m?n?b?h?w@ DB 0d3H, 0f0H, 0e1H, 0e0H, 0edH, 0eeH
	DB	0e2H, 0e8H, 0f7H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CANPBBNL@?Q?l?e?k?n?b@
CONST	SEGMENT
??_C@_06CANPBBNL@?Q?l?e?k?n?b@ DB 0d1H, 0ecH, 0e5H, 0ebH, 0eeH, 0e2H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07LNOFBJIL@?B?e?$PP?k?j?h?m@
CONST	SEGMENT
??_C@_07LNOFBJIL@?B?e?$PP?k?j?h?m@ DB 0c2H, 0e5H, 0ffH, 0ebH, 0eaH, 0e8H, 0edH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_07DFMMIAND@?C?k?$OA?d?j?h?i@
CONST	SEGMENT
??_C@_07DFMMIAND@?C?k?$OA?d?j?h?i@ DB 0c3H, 0ebH, 0e0H, 0e4H, 0eaH, 0e8H, 0e9H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GLGAMALN@?O?p?e?o?n?d?$OA?b?$OA?r?e?k?h@
CONST	SEGMENT
??_C@_0O@GLGAMALN@?O?p?e?o?n?d?$OA?b?$OA?r?e?k?h@ DB 0cfH, 0f0H, 0e5H, 0efH
	DB	0eeH, 0e4H, 0e0H, 0e2H, 0e0H, 0f2H, 0e5H, 0ebH, 0e8H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03OJJHGHEE@Rus@
CONST	SEGMENT
??_C@_03OJJHGHEE@Rus@ DB 'Rus', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_main$2 DD 00H
	DD	FLAT:??_R0PAD@8
	DD	0fffffa98H
	DD	FLAT:__catch$_main$0
__unwindtable$_main DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_main DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_main$2
__ehfuncinfo$_main DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_main
	DD	01H
	DD	FLAT:__tryblocktable$_main
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 125  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 126  :             return _Ok;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 127  :         }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -229						; size = 1
__Zero_uncaught_exceptions$ = -29			; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 110  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00021	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 111  : #if !_HAS_EXCEPTIONS
; 112  :             const bool _Zero_uncaught_exceptions = true;
; 113  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 114  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  0004c	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	75 09		 jne	 SHORT $LN4@sentry
  00058	c6 85 1b ff ff
	ff 01		 mov	 BYTE PTR tv72[ebp], 1
  0005f	eb 07		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  00061	c6 85 1b ff ff
	ff 00		 mov	 BYTE PTR tv72[ebp], 0
$LN5@sentry:
  00068	8a 8d 1b ff ff
	ff		 mov	 cl, BYTE PTR tv72[ebp]
  0006e	88 4d e3	 mov	 BYTE PTR __Zero_uncaught_exceptions$[ebp], cl

; 115  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 116  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 117  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 118  : 
; 119  :             if (_Zero_uncaught_exceptions) {

  00071	0f b6 45 e3	 movzx	 eax, BYTE PTR __Zero_uncaught_exceptions$[ebp]
  00075	85 c0		 test	 eax, eax
  00077	74 14		 je	 SHORT $LN1@sentry

; 120  :                 this->_Myostr._Osfx();

  00079	8b f4		 mov	 esi, esp
  0007b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 121  :             }
; 122  :         }

  0008d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00095	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00098	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009f	59		 pop	 ecx
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
  000a3	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a9	3b ec		 cmp	 ebp, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
  000b4	cc		 int	 3
  000b5	cc		 int	 3
  000b6	cc		 int	 3
  000b7	cc		 int	 3
  000b8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Tied$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0004c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 93   :             if (!_Ostr.good()) {

  0005f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00067	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0006a	8b f4		 mov	 esi, esp
  0006c	8b ca		 mov	 ecx, edx
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	0f b6 c0	 movzx	 eax, al
  0007e	85 c0		 test	 eax, eax
  00080	75 09		 jne	 SHORT $LN2@sentry

; 94   :                 _Ok = false;

  00082	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00085	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 95   :                 return;

  00089	eb 6a		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 96   :             }
; 97   : 
; 98   :             const auto _Tied = _Ostr.tie();

  0008b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0008e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00090	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00093	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00096	8b f4		 mov	 esi, esp
  00098	8b ca		 mov	 ecx, edx
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	89 45 e0	 mov	 DWORD PTR __Tied$[ebp], eax

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  000aa	83 7d e0 00	 cmp	 DWORD PTR __Tied$[ebp], 0
  000ae	74 08		 je	 SHORT $LN4@sentry
  000b0	8b 45 e0	 mov	 eax, DWORD PTR __Tied$[ebp]
  000b3	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b6	75 09		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

  000b8	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 101  :                 return;

  000bf	eb 34		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 102  :             }
; 103  : 
; 104  : 
; 105  :             _Tied->flush();

  000c1	8b f4		 mov	 esi, esp
  000c3	8b 4d e0	 mov	 ecx, DWORD PTR __Tied$[ebp]
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000cc	3b f4		 cmp	 esi, esp
  000ce	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 106  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000d3	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d8	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000db	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000de	8b f4		 mov	 esi, esp
  000e0	8b ca		 mov	 ecx, edx
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000e8	3b f4		 cmp	 esi, esp
  000ea	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ef	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f2	88 41 04	 mov	 BYTE PTR [ecx+4], al
$LN1@sentry:

; 107  :         }

  000f5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000fc	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00102	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00109	59		 pop	 ecx
  0010a	5f		 pop	 edi
  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx
  0010d	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00113	3b ec		 cmp	 ebp, esp
  00115	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -232						; size = 4
__Rdbuf$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00021	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  0004c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00057	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00065	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00068	8b f4		 mov	 esi, esp
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00070	3b f4		 cmp	 esi, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	89 45 e0	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 80   :             if (_Rdbuf) {

  0007a	83 7d e0 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  0007e	74 16		 je	 SHORT $LN3@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

  00080	8b 45 e0	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00083	8b 10		 mov	 edx, DWORD PTR [eax]
  00085	8b f4		 mov	 esi, esp
  00087	8b 4d e0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  0008a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008d	ff d0		 call	 eax
  0008f	3b f4		 cmp	 esi, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 82   :             }
; 83   :         }

  00096	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00099	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a0	59		 pop	 ecx
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000aa	3b ec		 cmp	 ebp, esp
  000ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
  000b5	cc		 int	 3
  000b6	cc		 int	 3
  000b7	cc		 int	 3
  000b8	cc		 int	 3
  000b9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Rdbuf$ = -20						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00040	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00046	8b 02		 mov	 eax, DWORD PTR [edx]
  00048	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0004e	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00051	8b f4		 mov	 esi, esp
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	89 45 ec	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 73   :             if (_Rdbuf) {

  00063	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00067	74 16		 je	 SHORT $LN1@Sentry_bas

; 74   :                 _Rdbuf->_Lock();

  00069	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  0006c	8b 10		 mov	 edx, DWORD PTR [eax]
  0006e	8b f4		 mov	 esi, esp
  00070	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00073	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00076	ff d0		 call	 eax
  00078	3b f4		 cmp	 esi, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 75   :             }
; 76   :         }

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 981  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 982  :     _Ostr.put(_Ostr.widen('\n'));

  00028	8b f4		 mov	 esi, esp
  0002a	6a 0a		 push	 10			; 0000000aH
  0002c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00034	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00037	8b ca		 mov	 ecx, edx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b f4		 mov	 esi, esp
  00048	0f b6 c0	 movzx	 eax, al
  0004b	50		 push	 eax
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 983  :     _Ostr.flush();

  0005c	8b f4		 mov	 esi, esp
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 984  :     return _Ostr;

  0006e	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 985  : }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv343 = -348						; size = 8
tv291 = -344						; size = 4
tv288 = -344						; size = 8
tv286 = -344						; size = 4
tv329 = -340						; size = 8
tv290 = -340						; size = 4
tv285 = -340						; size = 4
tv287 = -336						; size = 4
tv137 = -336						; size = 4
tv289 = -333						; size = 1
tv284 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 735  :     const char* _Val) { // insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 9c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-356]
  00021	b9 55 00 00 00	 mov	 ecx, 85			; 00000055H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 736  :     using _Elem = char;
; 737  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 738  : 
; 739  :     ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 740  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00055	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  0005e	83 c4 04	 add	 esp, 4
  00061	33 c9		 xor	 ecx, ecx
  00063	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00066	89 4d d8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 741  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00069	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00071	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00074	8b f4		 mov	 esi, esp
  00076	8b ca		 mov	 ecx, edx
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv329[ebp], eax
  0008b	89 95 b0 fe ff
	ff		 mov	 DWORD PTR tv329[ebp+4], edx
  00091	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp+4], 0
  00098	7c 79		 jl	 SHORT $LN17@operator
  0009a	7f 09		 jg	 SHORT $LN24@operator
  0009c	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp], 0
  000a3	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  000a5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000aa	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ad	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000b0	8b f4		 mov	 esi, esp
  000b2	8b ca		 mov	 ecx, edx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv343[ebp], eax
  000c7	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv343[ebp+4], edx
  000cd	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv343[ebp+4]
  000d3	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000d6	7c 3b		 jl	 SHORT $LN17@operator
  000d8	7f 0b		 jg	 SHORT $LN25@operator
  000da	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv343[ebp]
  000e0	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000e3	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000e5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000e8	8b 02		 mov	 eax, DWORD PTR [edx]
  000ea	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000ed	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000f0	8b f4		 mov	 esi, esp
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ff	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  00102	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  00105	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  0010b	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  00111	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00113	0f 57 c0	 xorps	 xmm0, xmm0
  00116	66 0f 13 85 9c
	fe ff ff	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  0011e	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  00124	89 4d c4	 mov	 DWORD PTR __Pad$[ebp], ecx
  00127	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  0012d	89 55 c8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 742  :     const typename _Myos::sentry _Ok(_Ostr);

  00130	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00133	50		 push	 eax
  00134	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00137	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0013c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 743  : 
; 744  :     if (!_Ok) {

  00143	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00146	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0014b	0f b6 c0	 movzx	 eax, al
  0014e	85 c0		 test	 eax, eax
  00150	75 0e		 jne	 SHORT $LN8@operator

; 745  :         _State |= ios_base::badbit;

  00152	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00155	83 c8 04	 or	 eax, 4
  00158	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 746  :     } else { // state okay, insert

  0015b	e9 ba 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 747  :         _TRY_IO_BEGIN

  00160	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 748  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00164	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00167	8b 08		 mov	 ecx, DWORD PTR [eax]
  00169	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0016c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0016f	8b f4		 mov	 esi, esp
  00171	8b ca		 mov	 ecx, edx
  00173	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00179	3b f4		 cmp	 esi, esp
  0017b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00180	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  00186	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  0018c	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00191	83 f8 40	 cmp	 eax, 64			; 00000040H
  00194	0f 84 d5 00 00
	00		 je	 $LN11@operator

; 749  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0019a	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0019c	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  0019f	83 e8 01	 sub	 eax, 1
  001a2	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  001a5	83 d9 00	 sbb	 ecx, 0
  001a8	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  001ab	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  001ae	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001b2	0f 8c b7 00 00
	00		 jl	 $LN11@operator
  001b8	7f 0a		 jg	 SHORT $LN26@operator
  001ba	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001be	0f 86 ab 00 00
	00		 jbe	 $LN11@operator
$LN26@operator:

; 750  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  001c4	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001cc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001cf	8b f4		 mov	 esi, esp
  001d1	8b ca		 mov	 ecx, edx
  001d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001d9	3b f4		 cmp	 esi, esp
  001db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e0	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv284[ebp], al
  001e6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001eb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001ee	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001f1	8b f4		 mov	 esi, esp
  001f3	8b ca		 mov	 ecx, edx
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001fb	3b f4		 cmp	 esi, esp
  001fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00202	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00208	8b f4		 mov	 esi, esp
  0020a	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv284[ebp]
  00211	50		 push	 eax
  00212	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  00218	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0021e	3b f4		 cmp	 esi, esp
  00220	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00225	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  0022b	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  00231	89 8d e8 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  00237	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0023c	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00242	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00248	52		 push	 edx
  00249	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0024f	50		 push	 eax
  00250	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00255	83 c4 08	 add	 esp, 8
  00258	0f b6 c8	 movzx	 ecx, al
  0025b	85 c9		 test	 ecx, ecx
  0025d	74 0b		 je	 SHORT $LN12@operator

; 751  :                     _State |= ios_base::badbit; // insertion failed, quit

  0025f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00262	83 c8 04	 or	 eax, 4
  00265	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 752  :                     break;

  00268	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 753  :                 }
; 754  :             }

  0026a	e9 2d ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 755  :         }
; 756  : 
; 757  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0026f	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00273	75 6e		 jne	 SHORT $LN13@operator
  00275	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00278	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0027d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00280	8b f4		 mov	 esi, esp
  00282	8b ca		 mov	 ecx, edx
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0028a	3b f4		 cmp	 esi, esp
  0028c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00291	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  00297	8b f4		 mov	 esi, esp
  00299	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0029c	50		 push	 eax
  0029d	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  002a0	51		 push	 ecx
  002a1	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  002a4	52		 push	 edx
  002a5	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp]
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  002b1	3b f4		 cmp	 esi, esp
  002b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b8	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv288[ebp], eax
  002be	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv288[ebp+4], edx
  002c4	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv288[ebp]
  002ca	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  002cd	75 0b		 jne	 SHORT $LN27@operator
  002cf	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv288[ebp+4]
  002d5	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  002d8	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 758  :             _State |= ios_base::badbit;

  002da	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  002dd	83 c8 04	 or	 eax, 4
  002e0	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 759  :         }
; 760  : 
; 761  :         if (_State == ios_base::goodbit) {

  002e3	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002e7	0f 85 d5 00 00
	00		 jne	 $LN14@operator

; 762  :             for (; 0 < _Pad; --_Pad) { // pad on right

  002ed	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002ef	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  002f2	83 e8 01	 sub	 eax, 1
  002f5	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002f8	83 d9 00	 sbb	 ecx, 0
  002fb	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  002fe	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  00301	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  00305	0f 8c b7 00 00
	00		 jl	 $LN14@operator
  0030b	7f 0a		 jg	 SHORT $LN28@operator
  0030d	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00311	0f 86 ab 00 00
	00		 jbe	 $LN14@operator
$LN28@operator:

; 763  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00317	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0031a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0031f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00322	8b f4		 mov	 esi, esp
  00324	8b ca		 mov	 ecx, edx
  00326	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  0032c	3b f4		 cmp	 esi, esp
  0032e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00333	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv289[ebp], al
  00339	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0033c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00341	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00344	8b f4		 mov	 esi, esp
  00346	8b ca		 mov	 ecx, edx
  00348	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0034e	3b f4		 cmp	 esi, esp
  00350	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00355	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  0035b	8b f4		 mov	 esi, esp
  0035d	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv289[ebp]
  00364	50		 push	 eax
  00365	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  0036b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00371	3b f4		 cmp	 esi, esp
  00373	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00378	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv291[ebp], eax
  0037e	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv291[ebp]
  00384	89 8d d0 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  0038a	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0038f	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00395	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0039b	52		 push	 edx
  0039c	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  003a2	50		 push	 eax
  003a3	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  003a8	83 c4 08	 add	 esp, 8
  003ab	0f b6 c8	 movzx	 ecx, al
  003ae	85 c9		 test	 ecx, ecx
  003b0	74 0b		 je	 SHORT $LN15@operator

; 764  :                     _State |= ios_base::badbit; // insertion failed, quit

  003b2	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003b5	83 c8 04	 or	 eax, 4
  003b8	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 765  :                     break;

  003bb	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 766  :                 }
; 767  :             }

  003bd	e9 2d ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 768  :         }
; 769  : 
; 770  :         _Ostr.width(0);

  003c2	8b f4		 mov	 esi, esp
  003c4	6a 00		 push	 0
  003c6	6a 00		 push	 0
  003c8	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  003cd	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003d0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003d3	8b ca		 mov	 ecx, edx
  003d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003db	3b f4		 cmp	 esi, esp
  003dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003e2	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 771  :         _CATCH_IO_(ios_base, _Ostr)

  003e4	8b f4		 mov	 esi, esp
  003e6	6a 01		 push	 1
  003e8	6a 04		 push	 4
  003ea	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ef	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003f2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003f5	8b ca		 mov	 ecx, edx
  003f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003fd	3b f4		 cmp	 esi, esp
  003ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00404	b8 00 00 00 00	 mov	 eax, $LN23@operator
  00409	c3		 ret	 0
$LN19@operator:
  0040a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00411	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00413	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 772  :     }
; 773  : 
; 774  :     _Ostr.setstate(_State);

  0041a	8b f4		 mov	 esi, esp
  0041c	6a 00		 push	 0
  0041e	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00421	50		 push	 eax
  00422	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00425	8b 11		 mov	 edx, DWORD PTR [ecx]
  00427	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0042a	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0042d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00433	3b f4		 cmp	 esi, esp
  00435	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 775  :     return _Ostr;

  0043a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0043d	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00443	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0044a	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0044d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00452	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 776  : }

  00458	52		 push	 edx
  00459	8b cd		 mov	 ecx, ebp
  0045b	50		 push	 eax
  0045c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  00462	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00467	58		 pop	 eax
  00468	5a		 pop	 edx
  00469	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0046c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00473	59		 pop	 ecx
  00474	5f		 pop	 edi
  00475	5e		 pop	 esi
  00476	5b		 pop	 ebx
  00477	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0047a	33 cd		 xor	 ecx, ebp
  0047c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00481	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  00487	3b ec		 cmp	 ebp, esp
  00489	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0048e	8b e5		 mov	 esp, ebp
  00490	5d		 pop	 ebp
  00491	c3		 ret	 0
  00492	66 90		 npad	 2
$LN32@operator:
  00494	01 00 00 00	 DD	 1
  00498	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  0049c	b4 ff ff ff	 DD	 -76			; ffffffb4H
  004a0	08 00 00 00	 DD	 8
  004a4	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  004a8	5f		 DB	 95			; 0000005fH
  004a9	4f		 DB	 79			; 0000004fH
  004aa	6b		 DB	 107			; 0000006bH
  004ab	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab07\LP_lab07\LP_lab07.cpp
;	COMDAT _main
_TEXT	SEGMENT
tv262 = -4568						; size = 4
tv261 = -4568						; size = 4
tv260 = -4568						; size = 4
$T2 = -4560						; size = 428
$T3 = -4124						; size = 428
$T4 = -3688						; size = 36
$T5 = -3644						; size = 36
$T6 = -3600						; size = 428
$T7 = -3164						; size = 428
_e$8 = -1384						; size = 4
_newentry3$9 = -1372					; size = 36
_s3$10 = -1328						; size = 36
_s2$11 = -1284						; size = 36
_s1$12 = -1240						; size = 36
_d2$13 = -1196						; size = 428
_newentry1$14 = -760					; size = 36
_getE$15 = -716						; size = 36
_e5$16 = -672						; size = 36
_e4$17 = -628						; size = 36
_e3$18 = -584						; size = 36
_e2$19 = -540						; size = 36
_e1$20 = -496						; size = 36
_d1$21 = -452						; size = 428
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_main	PROC						; COMDAT

; 8    : int main() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_main
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	b8 c8 11 00 00	 mov	 eax, 4552		; 000011c8H
  00017	e8 00 00 00 00	 call	 __chkstk
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d bd 28 ee ff
	ff		 lea	 edi, DWORD PTR [ebp-4568]
  00025	b9 72 04 00 00	 mov	 ecx, 1138		; 00000472H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003b	50		 push	 eax
  0003c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00045	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00048	b9 00 00 00 00	 mov	 ecx, OFFSET __1FF73647_LP_lab07@cpp
  0004d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 9    : 	setlocale(LC_ALL, "Rus");

  00052	8b f4		 mov	 esi, esp
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_03OJJHGHEE@Rus@
  00059	6a 00		 push	 0
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setlocale
  00061	83 c4 08	 add	 esp, 8
  00064	3b f4		 cmp	 esi, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 10   : #if(defined(TEST_CREATE_01)+ defined(TEST_CREATE_02)+ defined(TEST_ADDENTRY_03)+ defined(TEST_ADDENTRY_04)+ defined(TEST_GETENTRY_05)+ defined(TEST_DELENTRY_06)+ defined(TEST_UPDENTRY_07)+ defined(TEST_UPDENTRY_08)+ defined(TEST_DICTIONARY) > 1)
; 11   : #error –≤—Л –Љ–Њ–ґ–µ—В–µ –≤—Л–±—А–∞—В—М —В–Њ–ї—М–Ї–Њ –Њ–і–љ—Г –Њ—И–Є–±–Ї—Г
; 12   : #endif
; 13   : 	try {

  0006b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 14   : #ifdef TEST_CREATE_01
; 15   : 		Instance k1 = Create((char*)"—В–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ—Б—В", 1);//–њ–µ—А–µ–њ–Њ–ї–љ–µ–љ–Є–µ –њ–Њ –љ–∞–Ј–≤–∞–љ–Є—О
; 16   : #endif
; 17   : #ifdef TEST_CREATE_02
; 18   : 		Instance k2 = Create((char*)"—В–µ—Б—В", 10000000000);//–њ–µ—А–µ–њ–Њ–ї–љ–µ–љ–Є–µ —Н–ї–µ–Љ–µ–љ—В–∞–Љ–Є
; 19   : #endif
; 20   : #ifdef  TEST_ADDENTRY_03
; 21   : 		Instance k3 = Create((char*)"—В–µ—Б—В", 0);//–Ј–∞–і–∞–µ–Љ –±–Є–±–ї–Є–Њ—В–µ–Ї—Г –љ–∞ 0 —Н–ї–µ–Љ–µ–љ—В–Њ–≤
; 22   : 		Entry k = { 1,"–љ–∞–Ј–≤–∞–љ–Є–µ" };
; 23   : 		AddEntry(k3, k);//–њ—Л—В–∞–µ–Љ—Б—П –і–Њ–±–∞–≤–Є—В—М –њ–µ—А–≤—Л–є —Н–ї–µ–Љ–µ–љ—В
; 24   : #endif
; 25   : #ifdef  TEST_ADDENTRY_04
; 26   : 		Instance k4 = Create((char*)"—В–µ—Б—В", 7);
; 27   : 		Entry k = { 1,"–љ–∞–Ј–≤–∞–љ–Є–µ" };
; 28   : 		AddEntry(k4, k);//–њ—Л—В–∞–µ–Љ—Б—П –і—Г–±–ї–Є—А–Њ–≤–∞—В—М –Є–і–µ–љ—В–Є—Д–Є–Ї–∞—В–Њ—А
; 29   : 		AddEntry(k4, k);
; 30   : #endif
; 31   : #ifdef  TEST_GETENTRY_05
; 32   : 		Instance k5 = Create((char*)"—В–µ—Б—В", 7);
; 33   : 		Entry k = { 1,"–љ–∞–Ј–≤–∞–љ–Є–µ" };
; 34   : 		AddEntry(k5, k);
; 35   : 		GetEntry(k5, 2);//–≤—Л–Ј—Л–≤–∞–µ–Љ –њ–Њ –і—А—Г–≥–Њ–Љ—Г –Є–љ–і–µ–љ—В–Є—Д–Є–Ї–∞—В–Њ—А—Г
; 36   : #endif
; 37   : #ifdef  TEST_DELENTRY_06
; 38   : 		Instance k6 = Create((char*)"—В–µ—Б—В", 7);
; 39   : 		Entry k = { 1,"–њ—А–Њ–≤–µ—А–Ї–∞" };
; 40   : 		AddEntry(k6, k);
; 41   : 		DelEntry(k6, 2);//—В–∞–Ї –ґ–µ 
; 42   : #endif
; 43   : #ifdef  TEST_UPDENTRY_07
; 44   : 		Instance k7 = Create((char*)"—В–µ—Б—В", 7);
; 45   : 		Entry k = { 1,"–љ–∞–Ј–≤–∞–љ–Є–µ" }, o = { 2,"–љ–∞–Ј–≤–∞–љ–Є–µ2" };
; 46   : 		AddEntry(k7, k);
; 47   : 		UpdEntry(k7, 3, o);//–њ—Л—В–∞–µ–Љ—Б—П –≤—Л–Ј–≤–∞—В—М –њ–Њ –і—А—Г–≥–Њ–Љ—Г –Є–љ–і–µ–љ—В–Є—Д–Є–Ї–∞—В–Њ—А—Г
; 48   : #endif
; 49   : #ifdef  TEST_UPDENTRY_08
; 50   : 		Instance k8 = Create((char*)"—В–µ—Б—В", 7);
; 51   : 		Entry k = { 1,"–љ–∞–Ј–≤–∞–љ–Є–µ" }, o = { 2,"–љ–∞–Ј–≤–∞–љ–Є–µ2" };
; 52   : 		AddEntry(k8, o);
; 53   : 		UpdEntry(k8, 2, o);//—В.–Ї —Г –Њ –і—А—Г–≥–Њ–є –Є–љ–і–µ–љ—В–Є—Д–Є–Ї–∞—В–Њ—А, —Н—В–Њ –±—Г–і–µ—В –≤—Л–і–∞–≤–∞—В—М –Њ—И–Є–±–Ї—Г
; 54   : #endif
; 55   : #ifdef TEST_DICTIONARY
; 56   : 		Instance d1 = Create((char*)"–Я—А–µ–њ–Њ–і–∞–≤–∞—В–µ–ї–Є", 5);

  00072	6a 05		 push	 5
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GLGAMALN@?O?p?e?o?n?d?$OA?b?$OA?r?e?k?h@
  00079	8d 85 f0 f1 ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?Create@Dictionary@@YA?AUInstance@1@QADH@Z ; Dictionary::Create
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH
  00088	89 85 28 ee ff
	ff		 mov	 DWORD PTR tv260[ebp], eax
  0008e	b9 6b 00 00 00	 mov	 ecx, 107		; 0000006bH
  00093	8b b5 28 ee ff
	ff		 mov	 esi, DWORD PTR tv260[ebp]
  00099	8d bd a4 f3 ff
	ff		 lea	 edi, DWORD PTR $T7[ebp]
  0009f	f3 a5		 rep movsd
  000a1	b9 6b 00 00 00	 mov	 ecx, 107		; 0000006bH
  000a6	8d b5 a4 f3 ff
	ff		 lea	 esi, DWORD PTR $T7[ebp]
  000ac	8d bd 3c fe ff
	ff		 lea	 edi, DWORD PTR _d1$21[ebp]
  000b2	f3 a5		 rep movsd

; 57   : 		Entry e1 = { 1,"–У–ї–∞–і–Ї–Є–є" }, e2 = { 2,"–Т–µ—П–ї–Ї–Є–љ" }, e3 = { 3,"–°–Љ–µ–ї–Њ–≤" }, e4 = { 4, "–£—А–±–∞–љ–Њ–≤–Є—З" }, e5 = { 5, "–Я–∞—Ж–µ–є" };

  000b4	c7 85 10 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _e1$20[ebp], 1
  000be	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_07DFMMIAND@?C?k?$OA?d?j?h?i@
  000c3	89 85 14 fe ff
	ff		 mov	 DWORD PTR _e1$20[ebp+4], eax
  000c9	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_07DFMMIAND@?C?k?$OA?d?j?h?i@+4
  000cf	89 8d 18 fe ff
	ff		 mov	 DWORD PTR _e1$20[ebp+8], ecx
  000d5	33 c0		 xor	 eax, eax
  000d7	89 85 1c fe ff
	ff		 mov	 DWORD PTR _e1$20[ebp+12], eax
  000dd	89 85 20 fe ff
	ff		 mov	 DWORD PTR _e1$20[ebp+16], eax
  000e3	89 85 24 fe ff
	ff		 mov	 DWORD PTR _e1$20[ebp+20], eax
  000e9	89 85 28 fe ff
	ff		 mov	 DWORD PTR _e1$20[ebp+24], eax
  000ef	89 85 2c fe ff
	ff		 mov	 DWORD PTR _e1$20[ebp+28], eax
  000f5	66 89 85 30 fe
	ff ff		 mov	 WORD PTR _e1$20[ebp+32], ax
  000fc	c7 85 e4 fd ff
	ff 02 00 00 00	 mov	 DWORD PTR _e2$19[ebp], 2
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_07LNOFBJIL@?B?e?$PP?k?j?h?m@
  0010b	89 85 e8 fd ff
	ff		 mov	 DWORD PTR _e2$19[ebp+4], eax
  00111	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_07LNOFBJIL@?B?e?$PP?k?j?h?m@+4
  00117	89 8d ec fd ff
	ff		 mov	 DWORD PTR _e2$19[ebp+8], ecx
  0011d	33 c0		 xor	 eax, eax
  0011f	89 85 f0 fd ff
	ff		 mov	 DWORD PTR _e2$19[ebp+12], eax
  00125	89 85 f4 fd ff
	ff		 mov	 DWORD PTR _e2$19[ebp+16], eax
  0012b	89 85 f8 fd ff
	ff		 mov	 DWORD PTR _e2$19[ebp+20], eax
  00131	89 85 fc fd ff
	ff		 mov	 DWORD PTR _e2$19[ebp+24], eax
  00137	89 85 00 fe ff
	ff		 mov	 DWORD PTR _e2$19[ebp+28], eax
  0013d	66 89 85 04 fe
	ff ff		 mov	 WORD PTR _e2$19[ebp+32], ax
  00144	c7 85 b8 fd ff
	ff 03 00 00 00	 mov	 DWORD PTR _e3$18[ebp], 3
  0014e	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06CANPBBNL@?Q?l?e?k?n?b@
  00153	89 85 bc fd ff
	ff		 mov	 DWORD PTR _e3$18[ebp+4], eax
  00159	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_06CANPBBNL@?Q?l?e?k?n?b@+4
  00160	66 89 8d c0 fd
	ff ff		 mov	 WORD PTR _e3$18[ebp+8], cx
  00167	8a 15 06 00 00
	00		 mov	 dl, BYTE PTR ??_C@_06CANPBBNL@?Q?l?e?k?n?b@+6
  0016d	88 95 c2 fd ff
	ff		 mov	 BYTE PTR _e3$18[ebp+10], dl
  00173	33 c0		 xor	 eax, eax
  00175	89 85 c3 fd ff
	ff		 mov	 DWORD PTR _e3$18[ebp+11], eax
  0017b	89 85 c7 fd ff
	ff		 mov	 DWORD PTR _e3$18[ebp+15], eax
  00181	89 85 cb fd ff
	ff		 mov	 DWORD PTR _e3$18[ebp+19], eax
  00187	89 85 cf fd ff
	ff		 mov	 DWORD PTR _e3$18[ebp+23], eax
  0018d	89 85 d3 fd ff
	ff		 mov	 DWORD PTR _e3$18[ebp+27], eax
  00193	66 89 85 d7 fd
	ff ff		 mov	 WORD PTR _e3$18[ebp+31], ax
  0019a	88 85 d9 fd ff
	ff		 mov	 BYTE PTR _e3$18[ebp+33], al
  001a0	c7 85 8c fd ff
	ff 04 00 00 00	 mov	 DWORD PTR _e4$17[ebp], 4
  001aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09MPDLONIC@?S?p?a?$OA?m?n?b?h?w@
  001af	89 85 90 fd ff
	ff		 mov	 DWORD PTR _e4$17[ebp+4], eax
  001b5	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_09MPDLONIC@?S?p?a?$OA?m?n?b?h?w@+4
  001bb	89 8d 94 fd ff
	ff		 mov	 DWORD PTR _e4$17[ebp+8], ecx
  001c1	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR ??_C@_09MPDLONIC@?S?p?a?$OA?m?n?b?h?w@+8
  001c8	66 89 95 98 fd
	ff ff		 mov	 WORD PTR _e4$17[ebp+12], dx
  001cf	33 c0		 xor	 eax, eax
  001d1	89 85 9a fd ff
	ff		 mov	 DWORD PTR _e4$17[ebp+14], eax
  001d7	89 85 9e fd ff
	ff		 mov	 DWORD PTR _e4$17[ebp+18], eax
  001dd	89 85 a2 fd ff
	ff		 mov	 DWORD PTR _e4$17[ebp+22], eax
  001e3	89 85 a6 fd ff
	ff		 mov	 DWORD PTR _e4$17[ebp+26], eax
  001e9	89 85 aa fd ff
	ff		 mov	 DWORD PTR _e4$17[ebp+30], eax
  001ef	c7 85 60 fd ff
	ff 05 00 00 00	 mov	 DWORD PTR _e5$16[ebp], 5
  001f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05FMPCGHH@?O?$OA?v?e?i@
  001fe	89 85 64 fd ff
	ff		 mov	 DWORD PTR _e5$16[ebp+4], eax
  00204	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05FMPCGHH@?O?$OA?v?e?i@+4
  0020b	66 89 8d 68 fd
	ff ff		 mov	 WORD PTR _e5$16[ebp+8], cx
  00212	33 c0		 xor	 eax, eax
  00214	89 85 6a fd ff
	ff		 mov	 DWORD PTR _e5$16[ebp+10], eax
  0021a	89 85 6e fd ff
	ff		 mov	 DWORD PTR _e5$16[ebp+14], eax
  00220	89 85 72 fd ff
	ff		 mov	 DWORD PTR _e5$16[ebp+18], eax
  00226	89 85 76 fd ff
	ff		 mov	 DWORD PTR _e5$16[ebp+22], eax
  0022c	89 85 7a fd ff
	ff		 mov	 DWORD PTR _e5$16[ebp+26], eax
  00232	89 85 7e fd ff
	ff		 mov	 DWORD PTR _e5$16[ebp+30], eax

; 58   : 		AddEntry(d1, e1);

  00238	83 ec 24	 sub	 esp, 36			; 00000024H
  0023b	b9 09 00 00 00	 mov	 ecx, 9
  00240	8d b5 10 fe ff
	ff		 lea	 esi, DWORD PTR _e1$20[ebp]
  00246	8b fc		 mov	 edi, esp
  00248	f3 a5		 rep movsd
  0024a	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR _d1$21[ebp]
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 ?AddEntry@Dictionary@@YAXAAUInstance@1@UEntry@1@@Z ; Dictionary::AddEntry
  00256	83 c4 28	 add	 esp, 40			; 00000028H

; 59   : 		AddEntry(d1, e2);

  00259	83 ec 24	 sub	 esp, 36			; 00000024H
  0025c	b9 09 00 00 00	 mov	 ecx, 9
  00261	8d b5 e4 fd ff
	ff		 lea	 esi, DWORD PTR _e2$19[ebp]
  00267	8b fc		 mov	 edi, esp
  00269	f3 a5		 rep movsd
  0026b	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR _d1$21[ebp]
  00271	50		 push	 eax
  00272	e8 00 00 00 00	 call	 ?AddEntry@Dictionary@@YAXAAUInstance@1@UEntry@1@@Z ; Dictionary::AddEntry
  00277	83 c4 28	 add	 esp, 40			; 00000028H

; 60   : 		AddEntry(d1, e3);

  0027a	83 ec 24	 sub	 esp, 36			; 00000024H
  0027d	b9 09 00 00 00	 mov	 ecx, 9
  00282	8d b5 b8 fd ff
	ff		 lea	 esi, DWORD PTR _e3$18[ebp]
  00288	8b fc		 mov	 edi, esp
  0028a	f3 a5		 rep movsd
  0028c	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR _d1$21[ebp]
  00292	50		 push	 eax
  00293	e8 00 00 00 00	 call	 ?AddEntry@Dictionary@@YAXAAUInstance@1@UEntry@1@@Z ; Dictionary::AddEntry
  00298	83 c4 28	 add	 esp, 40			; 00000028H

; 61   : 		AddEntry(d1, e4);

  0029b	83 ec 24	 sub	 esp, 36			; 00000024H
  0029e	b9 09 00 00 00	 mov	 ecx, 9
  002a3	8d b5 8c fd ff
	ff		 lea	 esi, DWORD PTR _e4$17[ebp]
  002a9	8b fc		 mov	 edi, esp
  002ab	f3 a5		 rep movsd
  002ad	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR _d1$21[ebp]
  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 ?AddEntry@Dictionary@@YAXAAUInstance@1@UEntry@1@@Z ; Dictionary::AddEntry
  002b9	83 c4 28	 add	 esp, 40			; 00000028H

; 62   : 		AddEntry(d1, e5);

  002bc	83 ec 24	 sub	 esp, 36			; 00000024H
  002bf	b9 09 00 00 00	 mov	 ecx, 9
  002c4	8d b5 60 fd ff
	ff		 lea	 esi, DWORD PTR _e5$16[ebp]
  002ca	8b fc		 mov	 edi, esp
  002cc	f3 a5		 rep movsd
  002ce	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR _d1$21[ebp]
  002d4	50		 push	 eax
  002d5	e8 00 00 00 00	 call	 ?AddEntry@Dictionary@@YAXAAUInstance@1@UEntry@1@@Z ; Dictionary::AddEntry
  002da	83 c4 28	 add	 esp, 40			; 00000028H

; 63   : 		Entry getE = GetEntry(d1, 5);

  002dd	6a 05		 push	 5
  002df	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR _d1$21[ebp]
  002e5	50		 push	 eax
  002e6	8d 8d 98 f1 ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  002ec	51		 push	 ecx
  002ed	e8 00 00 00 00	 call	 ?GetEntry@Dictionary@@YA?AUEntry@1@AAUInstance@1@H@Z ; Dictionary::GetEntry
  002f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  002f5	89 85 28 ee ff
	ff		 mov	 DWORD PTR tv261[ebp], eax
  002fb	b9 09 00 00 00	 mov	 ecx, 9
  00300	8b b5 28 ee ff
	ff		 mov	 esi, DWORD PTR tv261[ebp]
  00306	8d bd c4 f1 ff
	ff		 lea	 edi, DWORD PTR $T5[ebp]
  0030c	f3 a5		 rep movsd
  0030e	b9 09 00 00 00	 mov	 ecx, 9
  00313	8d b5 c4 f1 ff
	ff		 lea	 esi, DWORD PTR $T5[ebp]
  00319	8d bd 34 fd ff
	ff		 lea	 edi, DWORD PTR _getE$15[ebp]
  0031f	f3 a5		 rep movsd

; 64   : 		DelEntry(d1, 2);

  00321	6a 02		 push	 2
  00323	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR _d1$21[ebp]
  00329	50		 push	 eax
  0032a	e8 00 00 00 00	 call	 ?DelEntry@Dictionary@@YAXAAUInstance@1@H@Z ; Dictionary::DelEntry
  0032f	83 c4 08	 add	 esp, 8

; 65   : 		Entry newentry1 = { 6, "–Ф–Њ–Љ–Њ—А–∞–і" };

  00332	c7 85 08 fd ff
	ff 06 00 00 00	 mov	 DWORD PTR _newentry1$14[ebp], 6
  0033c	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_07NEFKOGLJ@?D?n?l?n?p?$OA?d@
  00341	89 85 0c fd ff
	ff		 mov	 DWORD PTR _newentry1$14[ebp+4], eax
  00347	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_07NEFKOGLJ@?D?n?l?n?p?$OA?d@+4
  0034d	89 8d 10 fd ff
	ff		 mov	 DWORD PTR _newentry1$14[ebp+8], ecx
  00353	33 c0		 xor	 eax, eax
  00355	89 85 14 fd ff
	ff		 mov	 DWORD PTR _newentry1$14[ebp+12], eax
  0035b	89 85 18 fd ff
	ff		 mov	 DWORD PTR _newentry1$14[ebp+16], eax
  00361	89 85 1c fd ff
	ff		 mov	 DWORD PTR _newentry1$14[ebp+20], eax
  00367	89 85 20 fd ff
	ff		 mov	 DWORD PTR _newentry1$14[ebp+24], eax
  0036d	89 85 24 fd ff
	ff		 mov	 DWORD PTR _newentry1$14[ebp+28], eax
  00373	66 89 85 28 fd
	ff ff		 mov	 WORD PTR _newentry1$14[ebp+32], ax

; 66   : 		UpdEntry(d1, 3, newentry1);

  0037a	83 ec 24	 sub	 esp, 36			; 00000024H
  0037d	b9 09 00 00 00	 mov	 ecx, 9
  00382	8d b5 08 fd ff
	ff		 lea	 esi, DWORD PTR _newentry1$14[ebp]
  00388	8b fc		 mov	 edi, esp
  0038a	f3 a5		 rep movsd
  0038c	6a 03		 push	 3
  0038e	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR _d1$21[ebp]
  00394	50		 push	 eax
  00395	e8 00 00 00 00	 call	 ?UpdEntry@Dictionary@@YAXAAUInstance@1@HUEntry@1@@Z ; Dictionary::UpdEntry
  0039a	83 c4 2c	 add	 esp, 44			; 0000002cH

; 67   : 		Print(d1);

  0039d	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR _d1$21[ebp]
  003a3	50		 push	 eax
  003a4	e8 00 00 00 00	 call	 ?Print@Dictionary@@YAXAAUInstance@1@@Z ; Dictionary::Print
  003a9	83 c4 04	 add	 esp, 4

; 68   : 
; 69   : 		Instance d2 = Create((char*)"–°—В—Г–і–µ–љ—В—Л", 5);

  003ac	6a 05		 push	 5
  003ae	68 00 00 00 00	 push	 OFFSET ??_C@_08PKKOJKEO@?Q?r?s?d?e?m?r?$PL@
  003b3	8d 85 30 ee ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  003b9	50		 push	 eax
  003ba	e8 00 00 00 00	 call	 ?Create@Dictionary@@YA?AUInstance@1@QADH@Z ; Dictionary::Create
  003bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  003c2	89 85 28 ee ff
	ff		 mov	 DWORD PTR tv262[ebp], eax
  003c8	b9 6b 00 00 00	 mov	 ecx, 107		; 0000006bH
  003cd	8b b5 28 ee ff
	ff		 mov	 esi, DWORD PTR tv262[ebp]
  003d3	8d bd e4 ef ff
	ff		 lea	 edi, DWORD PTR $T3[ebp]
  003d9	f3 a5		 rep movsd
  003db	b9 6b 00 00 00	 mov	 ecx, 107		; 0000006bH
  003e0	8d b5 e4 ef ff
	ff		 lea	 esi, DWORD PTR $T3[ebp]
  003e6	8d bd 54 fb ff
	ff		 lea	 edi, DWORD PTR _d2$13[ebp]
  003ec	f3 a5		 rep movsd

; 70   : 		Entry s1 = { 1,"–Ш–≤–∞–љ–Њ–≤" }, s2 = { 2,"–Я–µ—В—А–Њ–≤" }, s3 = { 3,"–°–Є–і–Њ—А–Њ–≤" };

  003ee	c7 85 28 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR _s1$12[ebp], 1
  003f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06FBIHJBK@?H?b?$OA?m?n?b@
  003fd	89 85 2c fb ff
	ff		 mov	 DWORD PTR _s1$12[ebp+4], eax
  00403	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_06FBIHJBK@?H?b?$OA?m?n?b@+4
  0040a	66 89 8d 30 fb
	ff ff		 mov	 WORD PTR _s1$12[ebp+8], cx
  00411	8a 15 06 00 00
	00		 mov	 dl, BYTE PTR ??_C@_06FBIHJBK@?H?b?$OA?m?n?b@+6
  00417	88 95 32 fb ff
	ff		 mov	 BYTE PTR _s1$12[ebp+10], dl
  0041d	33 c0		 xor	 eax, eax
  0041f	89 85 33 fb ff
	ff		 mov	 DWORD PTR _s1$12[ebp+11], eax
  00425	89 85 37 fb ff
	ff		 mov	 DWORD PTR _s1$12[ebp+15], eax
  0042b	89 85 3b fb ff
	ff		 mov	 DWORD PTR _s1$12[ebp+19], eax
  00431	89 85 3f fb ff
	ff		 mov	 DWORD PTR _s1$12[ebp+23], eax
  00437	89 85 43 fb ff
	ff		 mov	 DWORD PTR _s1$12[ebp+27], eax
  0043d	66 89 85 47 fb
	ff ff		 mov	 WORD PTR _s1$12[ebp+31], ax
  00444	88 85 49 fb ff
	ff		 mov	 BYTE PTR _s1$12[ebp+33], al
  0044a	c7 85 fc fa ff
	ff 02 00 00 00	 mov	 DWORD PTR _s2$11[ebp], 2
  00454	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06GFOJDMIM@?O?e?r?p?n?b@
  00459	89 85 00 fb ff
	ff		 mov	 DWORD PTR _s2$11[ebp+4], eax
  0045f	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_06GFOJDMIM@?O?e?r?p?n?b@+4
  00466	66 89 8d 04 fb
	ff ff		 mov	 WORD PTR _s2$11[ebp+8], cx
  0046d	8a 15 06 00 00
	00		 mov	 dl, BYTE PTR ??_C@_06GFOJDMIM@?O?e?r?p?n?b@+6
  00473	88 95 06 fb ff
	ff		 mov	 BYTE PTR _s2$11[ebp+10], dl
  00479	33 c0		 xor	 eax, eax
  0047b	89 85 07 fb ff
	ff		 mov	 DWORD PTR _s2$11[ebp+11], eax
  00481	89 85 0b fb ff
	ff		 mov	 DWORD PTR _s2$11[ebp+15], eax
  00487	89 85 0f fb ff
	ff		 mov	 DWORD PTR _s2$11[ebp+19], eax
  0048d	89 85 13 fb ff
	ff		 mov	 DWORD PTR _s2$11[ebp+23], eax
  00493	89 85 17 fb ff
	ff		 mov	 DWORD PTR _s2$11[ebp+27], eax
  00499	66 89 85 1b fb
	ff ff		 mov	 WORD PTR _s2$11[ebp+31], ax
  004a0	88 85 1d fb ff
	ff		 mov	 BYTE PTR _s2$11[ebp+33], al
  004a6	c7 85 d0 fa ff
	ff 03 00 00 00	 mov	 DWORD PTR _s3$10[ebp], 3
  004b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_07DDEGOECN@?Q?h?d?n?p?n?b@
  004b5	89 85 d4 fa ff
	ff		 mov	 DWORD PTR _s3$10[ebp+4], eax
  004bb	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_07DDEGOECN@?Q?h?d?n?p?n?b@+4
  004c1	89 8d d8 fa ff
	ff		 mov	 DWORD PTR _s3$10[ebp+8], ecx
  004c7	33 c0		 xor	 eax, eax
  004c9	89 85 dc fa ff
	ff		 mov	 DWORD PTR _s3$10[ebp+12], eax
  004cf	89 85 e0 fa ff
	ff		 mov	 DWORD PTR _s3$10[ebp+16], eax
  004d5	89 85 e4 fa ff
	ff		 mov	 DWORD PTR _s3$10[ebp+20], eax
  004db	89 85 e8 fa ff
	ff		 mov	 DWORD PTR _s3$10[ebp+24], eax
  004e1	89 85 ec fa ff
	ff		 mov	 DWORD PTR _s3$10[ebp+28], eax
  004e7	66 89 85 f0 fa
	ff ff		 mov	 WORD PTR _s3$10[ebp+32], ax

; 71   : 		AddEntry(d2, s1);

  004ee	83 ec 24	 sub	 esp, 36			; 00000024H
  004f1	b9 09 00 00 00	 mov	 ecx, 9
  004f6	8d b5 28 fb ff
	ff		 lea	 esi, DWORD PTR _s1$12[ebp]
  004fc	8b fc		 mov	 edi, esp
  004fe	f3 a5		 rep movsd
  00500	8d 85 54 fb ff
	ff		 lea	 eax, DWORD PTR _d2$13[ebp]
  00506	50		 push	 eax
  00507	e8 00 00 00 00	 call	 ?AddEntry@Dictionary@@YAXAAUInstance@1@UEntry@1@@Z ; Dictionary::AddEntry
  0050c	83 c4 28	 add	 esp, 40			; 00000028H

; 72   : 		AddEntry(d2, s2);

  0050f	83 ec 24	 sub	 esp, 36			; 00000024H
  00512	b9 09 00 00 00	 mov	 ecx, 9
  00517	8d b5 fc fa ff
	ff		 lea	 esi, DWORD PTR _s2$11[ebp]
  0051d	8b fc		 mov	 edi, esp
  0051f	f3 a5		 rep movsd
  00521	8d 85 54 fb ff
	ff		 lea	 eax, DWORD PTR _d2$13[ebp]
  00527	50		 push	 eax
  00528	e8 00 00 00 00	 call	 ?AddEntry@Dictionary@@YAXAAUInstance@1@UEntry@1@@Z ; Dictionary::AddEntry
  0052d	83 c4 28	 add	 esp, 40			; 00000028H

; 73   : 		AddEntry(d2, s3);

  00530	83 ec 24	 sub	 esp, 36			; 00000024H
  00533	b9 09 00 00 00	 mov	 ecx, 9
  00538	8d b5 d0 fa ff
	ff		 lea	 esi, DWORD PTR _s3$10[ebp]
  0053e	8b fc		 mov	 edi, esp
  00540	f3 a5		 rep movsd
  00542	8d 85 54 fb ff
	ff		 lea	 eax, DWORD PTR _d2$13[ebp]
  00548	50		 push	 eax
  00549	e8 00 00 00 00	 call	 ?AddEntry@Dictionary@@YAXAAUInstance@1@UEntry@1@@Z ; Dictionary::AddEntry
  0054e	83 c4 28	 add	 esp, 40			; 00000028H

; 74   : 		Entry newentry3 = { 4, "–Э–Є–Ї–Њ–ї–∞–µ–≤" };

  00551	c7 85 a4 fa ff
	ff 04 00 00 00	 mov	 DWORD PTR _newentry3$9[ebp], 4
  0055b	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_08MBMPIGOC@?M?h?j?n?k?$OA?e?b@
  00560	89 85 a8 fa ff
	ff		 mov	 DWORD PTR _newentry3$9[ebp+4], eax
  00566	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_08MBMPIGOC@?M?h?j?n?k?$OA?e?b@+4
  0056c	89 8d ac fa ff
	ff		 mov	 DWORD PTR _newentry3$9[ebp+8], ecx
  00572	8a 15 08 00 00
	00		 mov	 dl, BYTE PTR ??_C@_08MBMPIGOC@?M?h?j?n?k?$OA?e?b@+8
  00578	88 95 b0 fa ff
	ff		 mov	 BYTE PTR _newentry3$9[ebp+12], dl
  0057e	33 c0		 xor	 eax, eax
  00580	89 85 b1 fa ff
	ff		 mov	 DWORD PTR _newentry3$9[ebp+13], eax
  00586	89 85 b5 fa ff
	ff		 mov	 DWORD PTR _newentry3$9[ebp+17], eax
  0058c	89 85 b9 fa ff
	ff		 mov	 DWORD PTR _newentry3$9[ebp+21], eax
  00592	89 85 bd fa ff
	ff		 mov	 DWORD PTR _newentry3$9[ebp+25], eax
  00598	89 85 c1 fa ff
	ff		 mov	 DWORD PTR _newentry3$9[ebp+29], eax
  0059e	88 85 c5 fa ff
	ff		 mov	 BYTE PTR _newentry3$9[ebp+33], al

; 75   : 		UpdEntry(d2, 3, newentry3);

  005a4	83 ec 24	 sub	 esp, 36			; 00000024H
  005a7	b9 09 00 00 00	 mov	 ecx, 9
  005ac	8d b5 a4 fa ff
	ff		 lea	 esi, DWORD PTR _newentry3$9[ebp]
  005b2	8b fc		 mov	 edi, esp
  005b4	f3 a5		 rep movsd
  005b6	6a 03		 push	 3
  005b8	8d 85 54 fb ff
	ff		 lea	 eax, DWORD PTR _d2$13[ebp]
  005be	50		 push	 eax
  005bf	e8 00 00 00 00	 call	 ?UpdEntry@Dictionary@@YAXAAUInstance@1@HUEntry@1@@Z ; Dictionary::UpdEntry
  005c4	83 c4 2c	 add	 esp, 44			; 0000002cH

; 76   : 		Print(d2);

  005c7	8d 85 54 fb ff
	ff		 lea	 eax, DWORD PTR _d2$13[ebp]
  005cd	50		 push	 eax
  005ce	e8 00 00 00 00	 call	 ?Print@Dictionary@@YAXAAUInstance@1@@Z ; Dictionary::Print
  005d3	83 c4 04	 add	 esp, 4

; 77   : 		Delete(d1);

  005d6	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR _d1$21[ebp]
  005dc	50		 push	 eax
  005dd	e8 00 00 00 00	 call	 ?Delete@Dictionary@@YAXAAUInstance@1@@Z ; Dictionary::Delete
  005e2	83 c4 04	 add	 esp, 4

; 78   : 		Delete(d2);

  005e5	8d 85 54 fb ff
	ff		 lea	 eax, DWORD PTR _d2$13[ebp]
  005eb	50		 push	 eax
  005ec	e8 00 00 00 00	 call	 ?Delete@Dictionary@@YAXAAUInstance@1@@Z ; Dictionary::Delete
  005f1	83 c4 04	 add	 esp, 4

; 79   : #endif
; 80   : 	}

  005f4	eb 32		 jmp	 SHORT $LN4@main
__catch$_main$0:

; 81   : 	catch (char* e) {
; 82   : 		cout << e << endl;

  005f6	8b f4		 mov	 esi, esp
  005f8	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  005fd	8b 85 98 fa ff
	ff		 mov	 eax, DWORD PTR _e$8[ebp]
  00603	50		 push	 eax
  00604	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0060a	51		 push	 ecx
  0060b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00610	83 c4 08	 add	 esp, 8
  00613	8b c8		 mov	 ecx, eax
  00615	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0061b	3b f4		 cmp	 esi, esp
  0061d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 83   : 	}

  00622	b8 00 00 00 00	 mov	 eax, $LN7@main
  00627	c3		 ret	 0
$LN4@main:
  00628	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0062f	eb 07		 jmp	 SHORT __tryend$_main$1
$LN7@main:
  00631	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$_main$1:

; 84   : 	return 0;

  00638	33 c0		 xor	 eax, eax

; 85   : }

  0063a	52		 push	 edx
  0063b	8b cd		 mov	 ecx, ebp
  0063d	50		 push	 eax
  0063e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN24@main
  00644	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00649	58		 pop	 eax
  0064a	5a		 pop	 edx
  0064b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0064e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00655	59		 pop	 ecx
  00656	5f		 pop	 edi
  00657	5e		 pop	 esi
  00658	5b		 pop	 ebx
  00659	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0065c	33 cd		 xor	 ecx, ebp
  0065e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00663	81 c4 d8 11 00
	00		 add	 esp, 4568		; 000011d8H
  00669	3b ec		 cmp	 ebp, esp
  0066b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00670	8b e5		 mov	 esp, ebp
  00672	5d		 pop	 ebp
  00673	c3		 ret	 0
$LN24@main:
  00674	0e 00 00 00	 DD	 14			; 0000000eH
  00678	00 00 00 00	 DD	 $LN23@main
$LN23@main:
  0067c	3c fe ff ff	 DD	 -452			; fffffe3cH
  00680	ac 01 00 00	 DD	 428			; 000001acH
  00684	00 00 00 00	 DD	 $LN8@main
  00688	10 fe ff ff	 DD	 -496			; fffffe10H
  0068c	24 00 00 00	 DD	 36			; 00000024H
  00690	00 00 00 00	 DD	 $LN9@main
  00694	e4 fd ff ff	 DD	 -540			; fffffde4H
  00698	24 00 00 00	 DD	 36			; 00000024H
  0069c	00 00 00 00	 DD	 $LN10@main
  006a0	b8 fd ff ff	 DD	 -584			; fffffdb8H
  006a4	24 00 00 00	 DD	 36			; 00000024H
  006a8	00 00 00 00	 DD	 $LN11@main
  006ac	8c fd ff ff	 DD	 -628			; fffffd8cH
  006b0	24 00 00 00	 DD	 36			; 00000024H
  006b4	00 00 00 00	 DD	 $LN12@main
  006b8	60 fd ff ff	 DD	 -672			; fffffd60H
  006bc	24 00 00 00	 DD	 36			; 00000024H
  006c0	00 00 00 00	 DD	 $LN13@main
  006c4	34 fd ff ff	 DD	 -716			; fffffd34H
  006c8	24 00 00 00	 DD	 36			; 00000024H
  006cc	00 00 00 00	 DD	 $LN14@main
  006d0	08 fd ff ff	 DD	 -760			; fffffd08H
  006d4	24 00 00 00	 DD	 36			; 00000024H
  006d8	00 00 00 00	 DD	 $LN15@main
  006dc	54 fb ff ff	 DD	 -1196			; fffffb54H
  006e0	ac 01 00 00	 DD	 428			; 000001acH
  006e4	00 00 00 00	 DD	 $LN16@main
  006e8	28 fb ff ff	 DD	 -1240			; fffffb28H
  006ec	24 00 00 00	 DD	 36			; 00000024H
  006f0	00 00 00 00	 DD	 $LN17@main
  006f4	fc fa ff ff	 DD	 -1284			; fffffafcH
  006f8	24 00 00 00	 DD	 36			; 00000024H
  006fc	00 00 00 00	 DD	 $LN18@main
  00700	d0 fa ff ff	 DD	 -1328			; fffffad0H
  00704	24 00 00 00	 DD	 36			; 00000024H
  00708	00 00 00 00	 DD	 $LN19@main
  0070c	a4 fa ff ff	 DD	 -1372			; fffffaa4H
  00710	24 00 00 00	 DD	 36			; 00000024H
  00714	00 00 00 00	 DD	 $LN20@main
  00718	98 fa ff ff	 DD	 -1384			; fffffa98H
  0071c	04 00 00 00	 DD	 4
  00720	00 00 00 00	 DD	 $LN21@main
$LN21@main:
  00724	65		 DB	 101			; 00000065H
  00725	00		 DB	 0
$LN20@main:
  00726	6e		 DB	 110			; 0000006eH
  00727	65		 DB	 101			; 00000065H
  00728	77		 DB	 119			; 00000077H
  00729	65		 DB	 101			; 00000065H
  0072a	6e		 DB	 110			; 0000006eH
  0072b	74		 DB	 116			; 00000074H
  0072c	72		 DB	 114			; 00000072H
  0072d	79		 DB	 121			; 00000079H
  0072e	33		 DB	 51			; 00000033H
  0072f	00		 DB	 0
$LN19@main:
  00730	73		 DB	 115			; 00000073H
  00731	33		 DB	 51			; 00000033H
  00732	00		 DB	 0
$LN18@main:
  00733	73		 DB	 115			; 00000073H
  00734	32		 DB	 50			; 00000032H
  00735	00		 DB	 0
$LN17@main:
  00736	73		 DB	 115			; 00000073H
  00737	31		 DB	 49			; 00000031H
  00738	00		 DB	 0
$LN16@main:
  00739	64		 DB	 100			; 00000064H
  0073a	32		 DB	 50			; 00000032H
  0073b	00		 DB	 0
$LN15@main:
  0073c	6e		 DB	 110			; 0000006eH
  0073d	65		 DB	 101			; 00000065H
  0073e	77		 DB	 119			; 00000077H
  0073f	65		 DB	 101			; 00000065H
  00740	6e		 DB	 110			; 0000006eH
  00741	74		 DB	 116			; 00000074H
  00742	72		 DB	 114			; 00000072H
  00743	79		 DB	 121			; 00000079H
  00744	31		 DB	 49			; 00000031H
  00745	00		 DB	 0
$LN14@main:
  00746	67		 DB	 103			; 00000067H
  00747	65		 DB	 101			; 00000065H
  00748	74		 DB	 116			; 00000074H
  00749	45		 DB	 69			; 00000045H
  0074a	00		 DB	 0
$LN13@main:
  0074b	65		 DB	 101			; 00000065H
  0074c	35		 DB	 53			; 00000035H
  0074d	00		 DB	 0
$LN12@main:
  0074e	65		 DB	 101			; 00000065H
  0074f	34		 DB	 52			; 00000034H
  00750	00		 DB	 0
$LN11@main:
  00751	65		 DB	 101			; 00000065H
  00752	33		 DB	 51			; 00000033H
  00753	00		 DB	 0
$LN10@main:
  00754	65		 DB	 101			; 00000065H
  00755	32		 DB	 50			; 00000032H
  00756	00		 DB	 0
$LN9@main:
  00757	65		 DB	 101			; 00000065H
  00758	31		 DB	 49			; 00000031H
  00759	00		 DB	 0
$LN8@main:
  0075a	64		 DB	 100			; 00000064H
  0075b	31		 DB	 49			; 00000031H
  0075c	00		 DB	 0
  0075d	cc		 int	 3
  0075e	cc		 int	 3
  0075f	cc		 int	 3
  00760	cc		 int	 3
  00761	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_main:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 24 ee ff
	ff		 mov	 ecx, DWORD PTR [edx-4572]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_main
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_main	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 400  :     _NODISCARD static constexpr int_type eof() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00020	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __D15AFF60_xstring
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 401  :         return static_cast<int_type>(EOF);

  00047	83 c8 ff	 or	 eax, -1

; 402  :     }

  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
  00069	cc		 int	 3
  0006a	cc		 int	 3
  0006b	cc		 int	 3
  0006c	cc		 int	 3
  0006d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 392  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00020	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __D15AFF60_xstring
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 393  :         return _Left == _Right;

  00047	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004d	8b 10		 mov	 edx, DWORD PTR [eax]
  0004f	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00051	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00053	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  0005d	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0005f	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00069	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 394  :     }

  0006f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00072	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00079	59		 pop	 ecx
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
  0008e	cc		 int	 3
  0008f	cc		 int	 3
  00090	cc		 int	 3
  00091	cc		 int	 3
  00092	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 2c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-212]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 305  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00020	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __D15AFF60_xstring
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 306  :         // find length of null-terminated string
; 307  : #if _HAS_CXX17
; 308  : #ifdef __cpp_char8_t
; 309  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 310  : #if _HAS_U8_INTRINSICS
; 311  :             return __builtin_u8strlen(_First);
; 312  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 313  :             return _Char_traits<_Elem, _Int_type>::length(_First);
; 314  : #endif // _HAS_U8_INTRINSICS
; 315  :         } else
; 316  : #endif // __cpp_char8_t
; 317  :         {
; 318  :             return __builtin_strlen(_First);
; 319  :         }
; 320  : #else // _HAS_CXX17
; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00047	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _strlen
  00050	83 c4 04	 add	 esp, 4

; 322  : #endif // _HAS_CXX17
; 323  :     }

  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00067	3b ec		 cmp	 ebp, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
  00072	cc		 int	 3
  00073	cc		 int	 3
  00074	cc		 int	 3
  00075	cc		 int	 3
  00076	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab07\LP_lab07\LP_lab07.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1FF73647_LP_lab07@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab07\LP_lab07\LP_lab07.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1FF73647_LP_lab07@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
