; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab07\LP_lab07\Dicrtionary.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__8906660C_vcruntime_new@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__35D7DDB3_corecrt_memory@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__5467428D_corecrt_wconio@h DB 01H
__4442441F_corecrt_wio@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__186FF47F_stat@h DB 01H
__534C724A_wchar@h DB 01H
__09340588_corecrt_math@h DB 01H
__24E9E95F_stdlib@h DB 01H
__F8119FB4_cstdlib DB 01H
__F2870A2C_limits DB 01H
__85A9AA98_type_traits DB 01H
__B0C4CEA9_malloc@h DB 01H
__E75714E4_vcruntime_exception@h DB 01H
__E4152856_exception DB 01H
__4324C6B3_xutility DB 01H
__A58979FC_xmemory DB 01H
__D15AFF60_xstring DB 01H
__7242C389_ctype@h DB 01H
__3AFA803E_string DB 01H
__0A4FAB91_cmath DB 01H
__6D5B120B_stdexcept DB 01H
__160863A3_xcall_once@h DB 01H
__99B256EE_atomic DB 01H
__A9557183_system_error DB 01H
__FB364CBD_vcruntime_typeinfo@h DB 01H
__33FB35AA_typeinfo DB 01H
__4E2906A2_memory DB 01H
__626C51AD_xfacet DB 01H
__2C72D662_xlocinfo DB 01H
__0E648B51_xlocale DB 01H
__1597A171_xiosbase DB 01H
__90E3ED46_xlocnum DB 01H
__165C22CB_ios DB 01H
__C490361C_Dicrtionary@cpp DB 01H
__7EA464AF_istream DB 01H
__1D745195_ostream DB 01H
__6FFBAAB7_streambuf DB 01H
__528871F3_iterator DB 01H
__3E6EDFAA_iosfwd DB 01H
__CF1C1A3F_utility DB 01H
__38038D2D_xstddef DB 01H
__EE19A480_xatomic@h DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?Create@Dictionary@@YA?AUInstance@1@QADH@Z	; Dictionary::Create
PUBLIC	?AddEntry@Dictionary@@YAXAAUInstance@1@UEntry@1@@Z ; Dictionary::AddEntry
PUBLIC	?DelEntry@Dictionary@@YAXAAUInstance@1@H@Z	; Dictionary::DelEntry
PUBLIC	?UpdEntry@Dictionary@@YAXAAUInstance@1@HUEntry@1@@Z ; Dictionary::UpdEntry
PUBLIC	?GetEntry@Dictionary@@YA?AUEntry@1@AAUInstance@1@H@Z ; Dictionary::GetEntry
PUBLIC	?Print@Dictionary@@YAXAAUInstance@1@@Z		; Dictionary::Print
PUBLIC	?Delete@Dictionary@@YAXAAUInstance@1@@Z		; Dictionary::Delete
PUBLIC	??$strcpy_s@$0BE@@@YAHAAY0BE@DPBD@Z		; strcpy_s<20>
PUBLIC	??$strcpy_s@$0BO@@@YAHAAY0BO@DPBD@Z		; strcpy_s<30>
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
PUBLIC	__TI2PAD
PUBLIC	__CTA2PAD
PUBLIC	??_R0PAD@8					; char * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAD@84
PUBLIC	??_R0PAX@8					; void * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAX@84
PUBLIC	??_C@_0CH@DHPCOMCI@Create?3?5?o?p?e?b?$PL?x?e?m?5?p?$OA?g?l?e?p?5?h?l?e?m?h?5?q@ ; `string'
PUBLIC	??_C@_0DG@HJCMAFJH@Create?3?5?o?p?e?b?$PL?x?e?m?5?p?$OA?g?l?e?p?5?l?$OA?j?q?h?l?$OA@ ; `string'
PUBLIC	??_C@_0BP@PCKPAEPH@AddEntry?3?5?o?e?p?e?o?n?k?m?e?m?h?e?5?q?k?n?b?$OA?p?$PP@ ; `string'
PUBLIC	??_C@_0CG@ENLMPENF@AddEntry?3?5?d?s?a?k?h?p?n?b?$OA?m?h?e?5?h?d?e?m?r?h?t?h@ ; `string'
PUBLIC	??_C@_0BN@OBDCHDLN@DelEntry?3?5?m?e?5?m?$OA?i?d?e?m?5?$PN?k?e?l?e?m?r?5@ ; `string'
PUBLIC	??_C@_0CH@FPJBDHNI@UpdEntry?3?5?d?s?a?k?h?p?n?b?$OA?m?h?e?5?h?d?e?m?r?h?t?h@ ; `string'
PUBLIC	??_C@_0BN@NKECCJKP@UpdEntry?3?5?m?e?5?m?$OA?i?d?e?m?5?$PN?k?e?l?e?m?r?5@ ; `string'
PUBLIC	??_C@_0BN@NIMMGFAO@GetEntry?3?5?m?e?5?m?$OA?i?d?e?m?5?$PN?k?e?l?e?m?r?5@ ; `string'
PUBLIC	??_C@_0BC@LPKGMLDJ@?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO@ ; `string'
PUBLIC	??_C@_0BB@MBBHHDAI@?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO@ ; `string'
PUBLIC	??_C@_01CLKCMJKC@?5@				; `string'
PUBLIC	??_C@_0DC@CNELCGBG@?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO@ ; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp__strcpy_s:PROC
EXTRN	_strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0DC@CNELCGBG@?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO@
CONST	SEGMENT
??_C@_0DC@CNELCGBG@?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO@ DB '~'
	DB	'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MBBHHDAI@?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO@
CONST	SEGMENT
??_C@_0BB@MBBHHDAI@?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO@ DB '~'
	DB	'~~~~~~~~~~~~~~~', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LPKGMLDJ@?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO@
CONST	SEGMENT
??_C@_0BC@LPKGMLDJ@?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO@ DB '~'
	DB	'~~~~~~~~~~~~~~~~', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NIMMGFAO@GetEntry?3?5?m?e?5?m?$OA?i?d?e?m?5?$PN?k?e?l?e?m?r?5@
CONST	SEGMENT
??_C@_0BN@NIMMGFAO@GetEntry?3?5?m?e?5?m?$OA?i?d?e?m?5?$PN?k?e?l?e?m?r?5@ DB 'G'
	DB	'etEntry: ', 0edH, 0e5H, ' ', 0edH, 0e0H, 0e9H, 0e4H, 0e5H, 0edH
	DB	' ', 0fdH, 0ebH, 0e5H, 0ecH, 0e5H, 0edH, 0f2H, ' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NKECCJKP@UpdEntry?3?5?m?e?5?m?$OA?i?d?e?m?5?$PN?k?e?l?e?m?r?5@
CONST	SEGMENT
??_C@_0BN@NKECCJKP@UpdEntry?3?5?m?e?5?m?$OA?i?d?e?m?5?$PN?k?e?l?e?m?r?5@ DB 'U'
	DB	'pdEntry: ', 0edH, 0e5H, ' ', 0edH, 0e0H, 0e9H, 0e4H, 0e5H, 0edH
	DB	' ', 0fdH, 0ebH, 0e5H, 0ecH, 0e5H, 0edH, 0f2H, ' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FPJBDHNI@UpdEntry?3?5?d?s?a?k?h?p?n?b?$OA?m?h?e?5?h?d?e?m?r?h?t?h@
CONST	SEGMENT
??_C@_0CH@FPJBDHNI@UpdEntry?3?5?d?s?a?k?h?p?n?b?$OA?m?h?e?5?h?d?e?m?r?h?t?h@ DB 'U'
	DB	'pdEntry: ', 0e4H, 0f3H, 0e1H, 0ebH, 0e8H, 0f0H, 0eeH, 0e2H, 0e0H
	DB	0edH, 0e8H, 0e5H, ' ', 0e8H, 0e4H, 0e5H, 0edH, 0f2H, 0e8H, 0f4H
	DB	0e8H, 0eaH, 0e0H, 0f2H, 0eeH, 0f0H, 0e0H, ' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OBDCHDLN@DelEntry?3?5?m?e?5?m?$OA?i?d?e?m?5?$PN?k?e?l?e?m?r?5@
CONST	SEGMENT
??_C@_0BN@OBDCHDLN@DelEntry?3?5?m?e?5?m?$OA?i?d?e?m?5?$PN?k?e?l?e?m?r?5@ DB 'D'
	DB	'elEntry: ', 0edH, 0e5H, ' ', 0edH, 0e0H, 0e9H, 0e4H, 0e5H, 0edH
	DB	' ', 0fdH, 0ebH, 0e5H, 0ecH, 0e5H, 0edH, 0f2H, ' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@ENLMPENF@AddEntry?3?5?d?s?a?k?h?p?n?b?$OA?m?h?e?5?h?d?e?m?r?h?t?h@
CONST	SEGMENT
??_C@_0CG@ENLMPENF@AddEntry?3?5?d?s?a?k?h?p?n?b?$OA?m?h?e?5?h?d?e?m?r?h?t?h@ DB 'A'
	DB	'ddEntry: ', 0e4H, 0f3H, 0e1H, 0ebH, 0e8H, 0f0H, 0eeH, 0e2H, 0e0H
	DB	0edH, 0e8H, 0e5H, ' ', 0e8H, 0e4H, 0e5H, 0edH, 0f2H, 0e8H, 0f4H
	DB	0e8H, 0eaH, 0e0H, 0f2H, 0eeH, 0f0H, 0e0H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PCKPAEPH@AddEntry?3?5?o?e?p?e?o?n?k?m?e?m?h?e?5?q?k?n?b?$OA?p?$PP@
CONST	SEGMENT
??_C@_0BP@PCKPAEPH@AddEntry?3?5?o?e?p?e?o?n?k?m?e?m?h?e?5?q?k?n?b?$OA?p?$PP@ DB 'A'
	DB	'ddEntry: ', 0efH, 0e5H, 0f0H, 0e5H, 0efH, 0eeH, 0ebH, 0edH, 0e5H
	DB	0edH, 0e8H, 0e5H, ' ', 0f1H, 0ebH, 0eeH, 0e2H, 0e0H, 0f0H, 0ffH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@HJCMAFJH@Create?3?5?o?p?e?b?$PL?x?e?m?5?p?$OA?g?l?e?p?5?l?$OA?j?q?h?l?$OA@
CONST	SEGMENT
??_C@_0DG@HJCMAFJH@Create?3?5?o?p?e?b?$PL?x?e?m?5?p?$OA?g?l?e?p?5?l?$OA?j?q?h?l?$OA@ DB 'C'
	DB	'reate: ', 0efH, 0f0H, 0e5H, 0e2H, 0fbH, 0f8H, 0e5H, 0edH, ' ', 0f0H
	DB	0e0H, 0e7H, 0ecH, 0e5H, 0f0H, ' ', 0ecH, 0e0H, 0eaH, 0f1H, 0e8H
	DB	0ecH, 0e0H, 0ebH, 0fcH, 0edH, 0eeH, 0e9H, ' ', 0e5H, 0ecH, 0eaH
	DB	0eeH, 0f1H, 0f2H, 0e8H, ' ', 0f1H, 0ebH, 0eeH, 0e2H, 0e0H, 0f0H
	DB	0ffH, ' ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DHPCOMCI@Create?3?5?o?p?e?b?$PL?x?e?m?5?p?$OA?g?l?e?p?5?h?l?e?m?h?5?q@
CONST	SEGMENT
??_C@_0CH@DHPCOMCI@Create?3?5?o?p?e?b?$PL?x?e?m?5?p?$OA?g?l?e?p?5?h?l?e?m?h?5?q@ DB 'C'
	DB	'reate: ', 0efH, 0f0H, 0e5H, 0e2H, 0fbH, 0f8H, 0e5H, 0edH, ' ', 0f0H
	DB	0e0H, 0e7H, 0ecH, 0e5H, 0f0H, ' ', 0e8H, 0ecH, 0e5H, 0edH, 0e8H
	DB	' ', 0f1H, 0ebH, 0eeH, 0e2H, 0e0H, 0f0H, 0ffH, ' ', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0PAX@84
xdata$x	SEGMENT
__CT??_R0PAX@84 DD 01H
	DD	FLAT:??_R0PAX@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAX@8
data$r	SEGMENT
??_R0PAX@8 DD	FLAT:??_7type_info@@6B@			; void * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAX', 00H
data$r	ENDS
;	COMDAT __CT??_R0PAD@84
xdata$x	SEGMENT
__CT??_R0PAD@84 DD 01H
	DD	FLAT:??_R0PAD@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAD@8
data$r	SEGMENT
??_R0PAD@8 DD	FLAT:??_7type_info@@6B@			; char * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAD', 00H
data$r	ENDS
;	COMDAT __CTA2PAD
xdata$x	SEGMENT
__CTA2PAD DD	02H
	DD	FLAT:__CT??_R0PAD@84
	DD	FLAT:__CT??_R0PAX@84
xdata$x	ENDS
;	COMDAT __TI2PAD
xdata$x	SEGMENT
__TI2PAD DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2PAD
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 125  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 126  :             return _Ok;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 127  :         }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -229						; size = 1
__Zero_uncaught_exceptions$ = -29			; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 110  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00021	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 111  : #if !_HAS_EXCEPTIONS
; 112  :             const bool _Zero_uncaught_exceptions = true;
; 113  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 114  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  0004c	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	75 09		 jne	 SHORT $LN4@sentry
  00058	c6 85 1b ff ff
	ff 01		 mov	 BYTE PTR tv72[ebp], 1
  0005f	eb 07		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  00061	c6 85 1b ff ff
	ff 00		 mov	 BYTE PTR tv72[ebp], 0
$LN5@sentry:
  00068	8a 8d 1b ff ff
	ff		 mov	 cl, BYTE PTR tv72[ebp]
  0006e	88 4d e3	 mov	 BYTE PTR __Zero_uncaught_exceptions$[ebp], cl

; 115  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 116  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 117  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 118  : 
; 119  :             if (_Zero_uncaught_exceptions) {

  00071	0f b6 45 e3	 movzx	 eax, BYTE PTR __Zero_uncaught_exceptions$[ebp]
  00075	85 c0		 test	 eax, eax
  00077	74 14		 je	 SHORT $LN1@sentry

; 120  :                 this->_Myostr._Osfx();

  00079	8b f4		 mov	 esi, esp
  0007b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 121  :             }
; 122  :         }

  0008d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00095	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00098	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009f	59		 pop	 ecx
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
  000a3	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a9	3b ec		 cmp	 ebp, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
  000b4	cc		 int	 3
  000b5	cc		 int	 3
  000b6	cc		 int	 3
  000b7	cc		 int	 3
  000b8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Tied$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0004c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 93   :             if (!_Ostr.good()) {

  0005f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00067	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0006a	8b f4		 mov	 esi, esp
  0006c	8b ca		 mov	 ecx, edx
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	0f b6 c0	 movzx	 eax, al
  0007e	85 c0		 test	 eax, eax
  00080	75 09		 jne	 SHORT $LN2@sentry

; 94   :                 _Ok = false;

  00082	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00085	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 95   :                 return;

  00089	eb 6a		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 96   :             }
; 97   : 
; 98   :             const auto _Tied = _Ostr.tie();

  0008b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0008e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00090	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00093	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00096	8b f4		 mov	 esi, esp
  00098	8b ca		 mov	 ecx, edx
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	89 45 e0	 mov	 DWORD PTR __Tied$[ebp], eax

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  000aa	83 7d e0 00	 cmp	 DWORD PTR __Tied$[ebp], 0
  000ae	74 08		 je	 SHORT $LN4@sentry
  000b0	8b 45 e0	 mov	 eax, DWORD PTR __Tied$[ebp]
  000b3	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b6	75 09		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

  000b8	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 101  :                 return;

  000bf	eb 34		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 102  :             }
; 103  : 
; 104  : 
; 105  :             _Tied->flush();

  000c1	8b f4		 mov	 esi, esp
  000c3	8b 4d e0	 mov	 ecx, DWORD PTR __Tied$[ebp]
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000cc	3b f4		 cmp	 esi, esp
  000ce	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 106  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000d3	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d8	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000db	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000de	8b f4		 mov	 esi, esp
  000e0	8b ca		 mov	 ecx, edx
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000e8	3b f4		 cmp	 esi, esp
  000ea	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ef	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f2	88 41 04	 mov	 BYTE PTR [ecx+4], al
$LN1@sentry:

; 107  :         }

  000f5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000fc	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00102	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00109	59		 pop	 ecx
  0010a	5f		 pop	 edi
  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx
  0010d	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00113	3b ec		 cmp	 ebp, esp
  00115	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -232						; size = 4
__Rdbuf$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00021	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  0004c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00057	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00065	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00068	8b f4		 mov	 esi, esp
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00070	3b f4		 cmp	 esi, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	89 45 e0	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 80   :             if (_Rdbuf) {

  0007a	83 7d e0 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  0007e	74 16		 je	 SHORT $LN3@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

  00080	8b 45 e0	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00083	8b 10		 mov	 edx, DWORD PTR [eax]
  00085	8b f4		 mov	 esi, esp
  00087	8b 4d e0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  0008a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008d	ff d0		 call	 eax
  0008f	3b f4		 cmp	 esi, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 82   :             }
; 83   :         }

  00096	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00099	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a0	59		 pop	 ecx
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000aa	3b ec		 cmp	 ebp, esp
  000ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
  000b5	cc		 int	 3
  000b6	cc		 int	 3
  000b7	cc		 int	 3
  000b8	cc		 int	 3
  000b9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Rdbuf$ = -20						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00040	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00046	8b 02		 mov	 eax, DWORD PTR [edx]
  00048	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0004e	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00051	8b f4		 mov	 esi, esp
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	89 45 ec	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 73   :             if (_Rdbuf) {

  00063	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00067	74 16		 je	 SHORT $LN1@Sentry_bas

; 74   :                 _Rdbuf->_Lock();

  00069	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  0006c	8b 10		 mov	 edx, DWORD PTR [eax]
  0006e	8b f4		 mov	 esi, esp
  00070	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00073	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00076	ff d0		 call	 eax
  00078	3b f4		 cmp	 esi, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 75   :             }
; 76   :         }

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 981  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 982  :     _Ostr.put(_Ostr.widen('\n'));

  00028	8b f4		 mov	 esi, esp
  0002a	6a 0a		 push	 10			; 0000000aH
  0002c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00034	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00037	8b ca		 mov	 ecx, edx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b f4		 mov	 esi, esp
  00048	0f b6 c0	 movzx	 eax, al
  0004b	50		 push	 eax
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 983  :     _Ostr.flush();

  0005c	8b f4		 mov	 esi, esp
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 984  :     return _Ostr;

  0006e	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 985  : }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv343 = -348						; size = 8
tv291 = -344						; size = 4
tv288 = -344						; size = 8
tv286 = -344						; size = 4
tv329 = -340						; size = 8
tv290 = -340						; size = 4
tv285 = -340						; size = 4
tv287 = -336						; size = 4
tv137 = -336						; size = 4
tv289 = -333						; size = 1
tv284 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 735  :     const char* _Val) { // insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 9c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-356]
  00021	b9 55 00 00 00	 mov	 ecx, 85			; 00000055H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 736  :     using _Elem = char;
; 737  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 738  : 
; 739  :     ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 740  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00055	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  0005e	83 c4 04	 add	 esp, 4
  00061	33 c9		 xor	 ecx, ecx
  00063	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00066	89 4d d8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 741  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00069	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00071	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00074	8b f4		 mov	 esi, esp
  00076	8b ca		 mov	 ecx, edx
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv329[ebp], eax
  0008b	89 95 b0 fe ff
	ff		 mov	 DWORD PTR tv329[ebp+4], edx
  00091	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp+4], 0
  00098	7c 79		 jl	 SHORT $LN17@operator
  0009a	7f 09		 jg	 SHORT $LN24@operator
  0009c	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp], 0
  000a3	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  000a5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000aa	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ad	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000b0	8b f4		 mov	 esi, esp
  000b2	8b ca		 mov	 ecx, edx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv343[ebp], eax
  000c7	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv343[ebp+4], edx
  000cd	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv343[ebp+4]
  000d3	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000d6	7c 3b		 jl	 SHORT $LN17@operator
  000d8	7f 0b		 jg	 SHORT $LN25@operator
  000da	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv343[ebp]
  000e0	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000e3	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000e5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000e8	8b 02		 mov	 eax, DWORD PTR [edx]
  000ea	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000ed	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000f0	8b f4		 mov	 esi, esp
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ff	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  00102	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  00105	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  0010b	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  00111	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00113	0f 57 c0	 xorps	 xmm0, xmm0
  00116	66 0f 13 85 9c
	fe ff ff	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  0011e	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  00124	89 4d c4	 mov	 DWORD PTR __Pad$[ebp], ecx
  00127	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  0012d	89 55 c8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 742  :     const typename _Myos::sentry _Ok(_Ostr);

  00130	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00133	50		 push	 eax
  00134	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00137	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0013c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 743  : 
; 744  :     if (!_Ok) {

  00143	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00146	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0014b	0f b6 c0	 movzx	 eax, al
  0014e	85 c0		 test	 eax, eax
  00150	75 0e		 jne	 SHORT $LN8@operator

; 745  :         _State |= ios_base::badbit;

  00152	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00155	83 c8 04	 or	 eax, 4
  00158	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 746  :     } else { // state okay, insert

  0015b	e9 ba 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 747  :         _TRY_IO_BEGIN

  00160	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 748  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00164	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00167	8b 08		 mov	 ecx, DWORD PTR [eax]
  00169	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0016c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0016f	8b f4		 mov	 esi, esp
  00171	8b ca		 mov	 ecx, edx
  00173	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00179	3b f4		 cmp	 esi, esp
  0017b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00180	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  00186	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  0018c	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00191	83 f8 40	 cmp	 eax, 64			; 00000040H
  00194	0f 84 d5 00 00
	00		 je	 $LN11@operator

; 749  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0019a	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0019c	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  0019f	83 e8 01	 sub	 eax, 1
  001a2	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  001a5	83 d9 00	 sbb	 ecx, 0
  001a8	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  001ab	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  001ae	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001b2	0f 8c b7 00 00
	00		 jl	 $LN11@operator
  001b8	7f 0a		 jg	 SHORT $LN26@operator
  001ba	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001be	0f 86 ab 00 00
	00		 jbe	 $LN11@operator
$LN26@operator:

; 750  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  001c4	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001cc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001cf	8b f4		 mov	 esi, esp
  001d1	8b ca		 mov	 ecx, edx
  001d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001d9	3b f4		 cmp	 esi, esp
  001db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e0	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv284[ebp], al
  001e6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001eb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001ee	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001f1	8b f4		 mov	 esi, esp
  001f3	8b ca		 mov	 ecx, edx
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001fb	3b f4		 cmp	 esi, esp
  001fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00202	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00208	8b f4		 mov	 esi, esp
  0020a	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv284[ebp]
  00211	50		 push	 eax
  00212	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  00218	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0021e	3b f4		 cmp	 esi, esp
  00220	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00225	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  0022b	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  00231	89 8d e8 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  00237	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0023c	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00242	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00248	52		 push	 edx
  00249	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0024f	50		 push	 eax
  00250	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00255	83 c4 08	 add	 esp, 8
  00258	0f b6 c8	 movzx	 ecx, al
  0025b	85 c9		 test	 ecx, ecx
  0025d	74 0b		 je	 SHORT $LN12@operator

; 751  :                     _State |= ios_base::badbit; // insertion failed, quit

  0025f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00262	83 c8 04	 or	 eax, 4
  00265	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 752  :                     break;

  00268	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 753  :                 }
; 754  :             }

  0026a	e9 2d ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 755  :         }
; 756  : 
; 757  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0026f	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00273	75 6e		 jne	 SHORT $LN13@operator
  00275	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00278	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0027d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00280	8b f4		 mov	 esi, esp
  00282	8b ca		 mov	 ecx, edx
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0028a	3b f4		 cmp	 esi, esp
  0028c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00291	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  00297	8b f4		 mov	 esi, esp
  00299	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0029c	50		 push	 eax
  0029d	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  002a0	51		 push	 ecx
  002a1	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  002a4	52		 push	 edx
  002a5	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp]
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  002b1	3b f4		 cmp	 esi, esp
  002b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b8	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv288[ebp], eax
  002be	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv288[ebp+4], edx
  002c4	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv288[ebp]
  002ca	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  002cd	75 0b		 jne	 SHORT $LN27@operator
  002cf	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv288[ebp+4]
  002d5	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  002d8	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 758  :             _State |= ios_base::badbit;

  002da	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  002dd	83 c8 04	 or	 eax, 4
  002e0	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 759  :         }
; 760  : 
; 761  :         if (_State == ios_base::goodbit) {

  002e3	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002e7	0f 85 d5 00 00
	00		 jne	 $LN14@operator

; 762  :             for (; 0 < _Pad; --_Pad) { // pad on right

  002ed	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002ef	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  002f2	83 e8 01	 sub	 eax, 1
  002f5	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002f8	83 d9 00	 sbb	 ecx, 0
  002fb	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  002fe	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  00301	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  00305	0f 8c b7 00 00
	00		 jl	 $LN14@operator
  0030b	7f 0a		 jg	 SHORT $LN28@operator
  0030d	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00311	0f 86 ab 00 00
	00		 jbe	 $LN14@operator
$LN28@operator:

; 763  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00317	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0031a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0031f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00322	8b f4		 mov	 esi, esp
  00324	8b ca		 mov	 ecx, edx
  00326	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  0032c	3b f4		 cmp	 esi, esp
  0032e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00333	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv289[ebp], al
  00339	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0033c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00341	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00344	8b f4		 mov	 esi, esp
  00346	8b ca		 mov	 ecx, edx
  00348	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0034e	3b f4		 cmp	 esi, esp
  00350	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00355	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  0035b	8b f4		 mov	 esi, esp
  0035d	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv289[ebp]
  00364	50		 push	 eax
  00365	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  0036b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00371	3b f4		 cmp	 esi, esp
  00373	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00378	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv291[ebp], eax
  0037e	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv291[ebp]
  00384	89 8d d0 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  0038a	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0038f	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00395	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0039b	52		 push	 edx
  0039c	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  003a2	50		 push	 eax
  003a3	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  003a8	83 c4 08	 add	 esp, 8
  003ab	0f b6 c8	 movzx	 ecx, al
  003ae	85 c9		 test	 ecx, ecx
  003b0	74 0b		 je	 SHORT $LN15@operator

; 764  :                     _State |= ios_base::badbit; // insertion failed, quit

  003b2	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003b5	83 c8 04	 or	 eax, 4
  003b8	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 765  :                     break;

  003bb	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 766  :                 }
; 767  :             }

  003bd	e9 2d ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 768  :         }
; 769  : 
; 770  :         _Ostr.width(0);

  003c2	8b f4		 mov	 esi, esp
  003c4	6a 00		 push	 0
  003c6	6a 00		 push	 0
  003c8	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  003cd	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003d0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003d3	8b ca		 mov	 ecx, edx
  003d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003db	3b f4		 cmp	 esi, esp
  003dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003e2	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 771  :         _CATCH_IO_(ios_base, _Ostr)

  003e4	8b f4		 mov	 esi, esp
  003e6	6a 01		 push	 1
  003e8	6a 04		 push	 4
  003ea	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ef	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003f2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003f5	8b ca		 mov	 ecx, edx
  003f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003fd	3b f4		 cmp	 esi, esp
  003ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00404	b8 00 00 00 00	 mov	 eax, $LN23@operator
  00409	c3		 ret	 0
$LN19@operator:
  0040a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00411	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00413	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 772  :     }
; 773  : 
; 774  :     _Ostr.setstate(_State);

  0041a	8b f4		 mov	 esi, esp
  0041c	6a 00		 push	 0
  0041e	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00421	50		 push	 eax
  00422	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00425	8b 11		 mov	 edx, DWORD PTR [ecx]
  00427	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0042a	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0042d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00433	3b f4		 cmp	 esi, esp
  00435	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 775  :     return _Ostr;

  0043a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0043d	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00443	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0044a	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0044d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00452	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 776  : }

  00458	52		 push	 edx
  00459	8b cd		 mov	 ecx, ebp
  0045b	50		 push	 eax
  0045c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  00462	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00467	58		 pop	 eax
  00468	5a		 pop	 edx
  00469	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0046c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00473	59		 pop	 ecx
  00474	5f		 pop	 edi
  00475	5e		 pop	 esi
  00476	5b		 pop	 ebx
  00477	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0047a	33 cd		 xor	 ecx, ebp
  0047c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00481	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  00487	3b ec		 cmp	 ebp, esp
  00489	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0048e	8b e5		 mov	 esp, ebp
  00490	5d		 pop	 ebp
  00491	c3		 ret	 0
  00492	66 90		 npad	 2
$LN32@operator:
  00494	01 00 00 00	 DD	 1
  00498	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  0049c	b4 ff ff ff	 DD	 -76			; ffffffb4H
  004a0	08 00 00 00	 DD	 8
  004a4	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  004a8	5f		 DB	 95			; 0000005fH
  004a9	4f		 DB	 79			; 0000004fH
  004aa	6b		 DB	 107			; 0000006bH
  004ab	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
;	COMDAT ??$strcpy_s@$0BO@@@YAHAAY0BO@DPBD@Z
_TEXT	SEGMENT
__Destination$ = 8					; size = 4
__Source$ = 12						; size = 4
??$strcpy_s@$0BO@@@YAHAAY0BO@DPBD@Z PROC		; strcpy_s<30>, COMDAT

; 124  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1(

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A29A7DFB_string@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 0c	 mov	 eax, DWORD PTR __Source$[ebp]
  0002d	50		 push	 eax
  0002e	6a 1e		 push	 30			; 0000001eH
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Destination$[ebp]
  00033	51		 push	 ecx
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strcpy_s
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	3b f4		 cmp	 esi, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
??$strcpy_s@$0BO@@@YAHAAY0BO@DPBD@Z ENDP		; strcpy_s<30>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
;	COMDAT ??$strcpy_s@$0BE@@@YAHAAY0BE@DPBD@Z
_TEXT	SEGMENT
__Destination$ = 8					; size = 4
__Source$ = 12						; size = 4
??$strcpy_s@$0BE@@@YAHAAY0BE@DPBD@Z PROC		; strcpy_s<20>, COMDAT

; 124  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1(

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A29A7DFB_string@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 0c	 mov	 eax, DWORD PTR __Source$[ebp]
  0002d	50		 push	 eax
  0002e	6a 14		 push	 20			; 00000014H
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Destination$[ebp]
  00033	51		 push	 ecx
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strcpy_s
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	3b f4		 cmp	 esi, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
??$strcpy_s@$0BE@@@YAHAAY0BE@DPBD@Z ENDP		; strcpy_s<20>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab07\LP_lab07\Dicrtionary.cpp
;	COMDAT ?Delete@Dictionary@@YAXAAUInstance@1@@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_i$2 = -8						; size = 4
_d$ = 8							; size = 4
?Delete@Dictionary@@YAXAAUInstance@1@@Z PROC		; Dictionary::Delete, COMDAT

; 85   : 	void Delete(Instance& d) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C490361C_Dicrtionary@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 86   : 		for (int i = 0; i < d.size; i++) {

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@Delete
$LN2@Delete:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@Delete:
  0003a	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _i$2[ebp]
  00040	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00043	7d 23		 jge	 SHORT $LN3@Delete

; 87   : 			delete d.dictionary[i];

  00045	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  0004b	8b 54 81 1c	 mov	 edx, DWORD PTR [ecx+eax*4+28]
  0004f	89 95 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  00055	6a 24		 push	 36			; 00000024H
  00057	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	83 c4 08	 add	 esp, 8

; 88   : 		}

  00066	eb c9		 jmp	 SHORT $LN2@Delete
$LN3@Delete:

; 89   : 		d.maxsize = NULL;

  00068	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  0006b	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 90   : 		d.size = NULL;

  00072	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00075	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 91   : 		*d.name = NULL;

  0007c	b8 01 00 00 00	 mov	 eax, 1
  00081	6b c8 00	 imul	 ecx, eax, 0
  00084	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00087	c6 04 0a 00	 mov	 BYTE PTR [edx+ecx], 0

; 92   : 	}

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00094	3b ec		 cmp	 ebp, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
?Delete@Dictionary@@YAXAAUInstance@1@@Z ENDP		; Dictionary::Delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab07\LP_lab07\Dicrtionary.cpp
;	COMDAT ?Print@Dictionary@@YAXAAUInstance@1@@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_d$ = 8							; size = 4
?Print@Dictionary@@YAXAAUInstance@1@@Z PROC		; Dictionary::Print, COMDAT

; 95   : 	void Print(Instance& d) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C490361C_Dicrtionary@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 96   : 		cout << "~~~~~~~~~~~~~~~~" << d.name << "~~~~~~~~~~~~~~~~~" << endl;

  00028	8b f4		 mov	 esi, esp
  0002a	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LPKGMLDJ@?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO@
  00034	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MBBHHDAI@?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO@
  0003d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00049	83 c4 08	 add	 esp, 8
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00052	83 c4 08	 add	 esp, 8
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0005b	83 c4 08	 add	 esp, 8
  0005e	8b c8		 mov	 ecx, eax
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 97   : 		for (int i = 0; i < d.size; i++) {

  0006d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00074	eb 09		 jmp	 SHORT $LN4@Print
$LN2@Print:
  00076	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00079	83 c0 01	 add	 eax, 1
  0007c	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@Print:
  0007f	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00082	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  00085	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00088	7d 5f		 jge	 SHORT $LN3@Print

; 98   : 			cout << d.dictionary[i]->id << " " << d.dictionary[i]->name << endl;

  0008a	8b f4		 mov	 esi, esp
  0008c	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00091	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00094	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00097	8b 54 81 1c	 mov	 edx, DWORD PTR [ecx+eax*4+28]
  0009b	83 c2 04	 add	 edx, 4
  0009e	52		 push	 edx
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5@
  000a4	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  000a7	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  000aa	8b 54 81 1c	 mov	 edx, DWORD PTR [ecx+eax*4+28]
  000ae	8b fc		 mov	 edi, esp
  000b0	8b 02		 mov	 eax, DWORD PTR [edx]
  000b2	50		 push	 eax
  000b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  000bf	3b fc		 cmp	 edi, esp
  000c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000cc	83 c4 08	 add	 esp, 8
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000d5	83 c4 08	 add	 esp, 8
  000d8	8b c8		 mov	 ecx, eax
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000e0	3b f4		 cmp	 esi, esp
  000e2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 99   : 		}

  000e7	eb 8d		 jmp	 SHORT $LN2@Print
$LN3@Print:

; 100  : 		cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

  000e9	8b f4		 mov	 esi, esp
  000eb	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@CNELCGBG@?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO?$HO@
  000f5	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00100	83 c4 08	 add	 esp, 8
  00103	8b c8		 mov	 ecx, eax
  00105	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0010b	3b f4		 cmp	 esi, esp
  0010d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 101  : 
; 102  : 	}

  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0011b	3b ec		 cmp	 ebp, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
?Print@Dictionary@@YAXAAUInstance@1@@Z ENDP		; Dictionary::Print
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab07\LP_lab07\Dicrtionary.cpp
;	COMDAT ?GetEntry@Dictionary@@YA?AUEntry@1@AAUInstance@1@H@Z
_TEXT	SEGMENT
$T1 = -268						; size = 4
_j$2 = -64						; size = 4
_i$3 = -52						; size = 4
_getElement$ = -40					; size = 36
$T4 = 8							; size = 4
_inst$ = 12						; size = 4
_id$ = 16						; size = 4
?GetEntry@Dictionary@@YA?AUEntry@1@AAUInstance@1@H@Z PROC ; Dictionary::GetEntry, COMDAT

; 70   : 	Entry GetEntry(Instance& inst, int id) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-272]
  00012	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C490361C_Dicrtionary@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 71   : 		Entry getElement;
; 72   : 		for (int i = 0; i < inst.size; i++) {

  00028	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@GetEntry
$LN2@GetEntry:
  00031	8b 45 cc	 mov	 eax, DWORD PTR _i$3[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 cc	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@GetEntry:
  0003a	8b 45 0c	 mov	 eax, DWORD PTR _inst$[ebp]
  0003d	8b 4d cc	 mov	 ecx, DWORD PTR _i$3[ebp]
  00040	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00043	0f 8d a6 00 00
	00		 jge	 $LN11@GetEntry

; 73   : 			if (id == inst.dictionary[i]->id) {

  00049	8b 45 cc	 mov	 eax, DWORD PTR _i$3[ebp]
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR _inst$[ebp]
  0004f	8b 54 81 1c	 mov	 edx, DWORD PTR [ecx+eax*4+28]
  00053	8b 45 10	 mov	 eax, DWORD PTR _id$[ebp]
  00056	3b 02		 cmp	 eax, DWORD PTR [edx]
  00058	75 6a		 jne	 SHORT $LN8@GetEntry

; 74   : 				getElement.id = inst.dictionary[i]->id;

  0005a	8b 45 cc	 mov	 eax, DWORD PTR _i$3[ebp]
  0005d	8b 4d 0c	 mov	 ecx, DWORD PTR _inst$[ebp]
  00060	8b 54 81 1c	 mov	 edx, DWORD PTR [ecx+eax*4+28]
  00064	8b 02		 mov	 eax, DWORD PTR [edx]
  00066	89 45 d8	 mov	 DWORD PTR _getElement$[ebp], eax

; 75   : 				for (int j = 0; j < strlen(inst.dictionary[i]->name); j++)

  00069	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _j$2[ebp], 0
  00070	eb 09		 jmp	 SHORT $LN7@GetEntry
$LN5@GetEntry:
  00072	8b 45 c0	 mov	 eax, DWORD PTR _j$2[ebp]
  00075	83 c0 01	 add	 eax, 1
  00078	89 45 c0	 mov	 DWORD PTR _j$2[ebp], eax
$LN7@GetEntry:
  0007b	8b 45 cc	 mov	 eax, DWORD PTR _i$3[ebp]
  0007e	8b 4d 0c	 mov	 ecx, DWORD PTR _inst$[ebp]
  00081	8b 54 81 1c	 mov	 edx, DWORD PTR [ecx+eax*4+28]
  00085	83 c2 04	 add	 edx, 4
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 _strlen
  0008e	83 c4 04	 add	 esp, 4
  00091	39 45 c0	 cmp	 DWORD PTR _j$2[ebp], eax
  00094	73 1a		 jae	 SHORT $LN6@GetEntry

; 76   : 					getElement.name[j] = inst.dictionary[i]->name[j];

  00096	8b 45 cc	 mov	 eax, DWORD PTR _i$3[ebp]
  00099	8b 4d 0c	 mov	 ecx, DWORD PTR _inst$[ebp]
  0009c	8b 54 81 1c	 mov	 edx, DWORD PTR [ecx+eax*4+28]
  000a0	8b 45 c0	 mov	 eax, DWORD PTR _j$2[ebp]
  000a3	8b 4d c0	 mov	 ecx, DWORD PTR _j$2[ebp]
  000a6	8a 54 0a 04	 mov	 dl, BYTE PTR [edx+ecx+4]
  000aa	88 54 05 dc	 mov	 BYTE PTR _getElement$[ebp+eax+4], dl
  000ae	eb c2		 jmp	 SHORT $LN5@GetEntry
$LN6@GetEntry:

; 77   : 				return getElement;

  000b0	b9 09 00 00 00	 mov	 ecx, 9
  000b5	8d 75 d8	 lea	 esi, DWORD PTR _getElement$[ebp]
  000b8	8b 7d 08	 mov	 edi, DWORD PTR $T4[ebp]
  000bb	f3 a5		 rep movsd
  000bd	8b 45 08	 mov	 eax, DWORD PTR $T4[ebp]
  000c0	eb 2d		 jmp	 SHORT $LN11@GetEntry

; 78   : 			}

  000c2	eb 26		 jmp	 SHORT $LN9@GetEntry
$LN8@GetEntry:

; 79   : 			else if (id > inst.size) {

  000c4	8b 45 0c	 mov	 eax, DWORD PTR _inst$[ebp]
  000c7	8b 4d 10	 mov	 ecx, DWORD PTR _id$[ebp]
  000ca	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  000cd	7e 1b		 jle	 SHORT $LN9@GetEntry

; 80   : 				throw(char*)THROW05;

  000cf	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], OFFSET ??_C@_0BN@NIMMGFAO@GetEntry?3?5?m?e?5?m?$OA?i?d?e?m?5?$PN?k?e?l?e?m?r?5@
  000d9	68 00 00 00 00	 push	 OFFSET __TI2PAD
  000de	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN9@GetEntry:

; 81   : 			}
; 82   : 		}

  000ea	e9 42 ff ff ff	 jmp	 $LN2@GetEntry
$LN11@GetEntry:

; 83   : 	}

  000ef	52		 push	 edx
  000f0	8b cd		 mov	 ecx, ebp
  000f2	50		 push	 eax
  000f3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@GetEntry
  000f9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000fe	58		 pop	 eax
  000ff	5a		 pop	 edx
  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	5b		 pop	 ebx
  00103	81 c4 10 01 00
	00		 add	 esp, 272		; 00000110H
  00109	3b ec		 cmp	 ebp, esp
  0010b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c3		 ret	 0
$LN14@GetEntry:
  00114	01 00 00 00	 DD	 1
  00118	00 00 00 00	 DD	 $LN13@GetEntry
$LN13@GetEntry:
  0011c	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00120	24 00 00 00	 DD	 36			; 00000024H
  00124	00 00 00 00	 DD	 $LN12@GetEntry
$LN12@GetEntry:
  00128	67		 DB	 103			; 00000067H
  00129	65		 DB	 101			; 00000065H
  0012a	74		 DB	 116			; 00000074H
  0012b	45		 DB	 69			; 00000045H
  0012c	6c		 DB	 108			; 0000006cH
  0012d	65		 DB	 101			; 00000065H
  0012e	6d		 DB	 109			; 0000006dH
  0012f	65		 DB	 101			; 00000065H
  00130	6e		 DB	 110			; 0000006eH
  00131	74		 DB	 116			; 00000074H
  00132	00		 DB	 0
?GetEntry@Dictionary@@YA?AUEntry@1@AAUInstance@1@H@Z ENDP ; Dictionary::GetEntry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab07\LP_lab07\Dicrtionary.cpp
;	COMDAT ?UpdEntry@Dictionary@@YAXAAUInstance@1@HUEntry@1@@Z
_TEXT	SEGMENT
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_j$3 = -32						; size = 4
_clearName$4 = -20					; size = 2
_i$5 = -8						; size = 4
_inst$ = 8						; size = 4
_id$ = 12						; size = 4
_new_ed$ = 16						; size = 36
?UpdEntry@Dictionary@@YAXAAUInstance@1@HUEntry@1@@Z PROC ; Dictionary::UpdEntry, COMDAT

; 48   : 	void UpdEntry(Instance& inst, int id, Entry new_ed) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C490361C_Dicrtionary@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 49   : 		for (int i = 0; i < inst.size; i++) {

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$5[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@UpdEntry
$LN2@UpdEntry:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _i$5[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _i$5[ebp], eax
$LN4@UpdEntry:
  0003a	8b 45 08	 mov	 eax, DWORD PTR _inst$[ebp]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _i$5[ebp]
  00040	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00043	0f 8d 26 01 00
	00		 jge	 $LN14@UpdEntry

; 50   : 			if (inst.dictionary[i]->id == id) {

  00049	8b 45 f8	 mov	 eax, DWORD PTR _i$5[ebp]
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _inst$[ebp]
  0004f	8b 54 81 1c	 mov	 edx, DWORD PTR [ecx+eax*4+28]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	3b 45 0c	 cmp	 eax, DWORD PTR _id$[ebp]
  00058	0f 85 e6 00 00
	00		 jne	 $LN10@UpdEntry

; 51   : 				if (inst.dictionary[i]->id == new_ed.id) throw(char*)THROW08;

  0005e	8b 45 f8	 mov	 eax, DWORD PTR _i$5[ebp]
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _inst$[ebp]
  00064	8b 54 81 1c	 mov	 edx, DWORD PTR [ecx+eax*4+28]
  00068	8b 02		 mov	 eax, DWORD PTR [edx]
  0006a	3b 45 10	 cmp	 eax, DWORD PTR _new_ed$[ebp]
  0006d	75 1b		 jne	 SHORT $LN12@UpdEntry
  0006f	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], OFFSET ??_C@_0CH@FPJBDHNI@UpdEntry?3?5?d?s?a?k?h?p?n?b?$OA?m?h?e?5?h?d?e?m?r?h?t?h@
  00079	68 00 00 00 00	 push	 OFFSET __TI2PAD
  0007e	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN12@UpdEntry:

; 52   : 				inst.dictionary[i]->id = new_ed.id;

  0008a	8b 45 f8	 mov	 eax, DWORD PTR _i$5[ebp]
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _inst$[ebp]
  00090	8b 54 81 1c	 mov	 edx, DWORD PTR [ecx+eax*4+28]
  00094	8b 45 10	 mov	 eax, DWORD PTR _new_ed$[ebp]
  00097	89 02		 mov	 DWORD PTR [edx], eax

; 53   : 				short clearName = 0;

  00099	33 c0		 xor	 eax, eax
  0009b	66 89 45 ec	 mov	 WORD PTR _clearName$4[ebp], ax
$LN5@UpdEntry:

; 54   : 				while (inst.dictionary[i]->name[clearName] != '\0') {

  0009f	8b 45 f8	 mov	 eax, DWORD PTR _i$5[ebp]
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _inst$[ebp]
  000a5	8b 54 81 1c	 mov	 edx, DWORD PTR [ecx+eax*4+28]
  000a9	0f bf 45 ec	 movsx	 eax, WORD PTR _clearName$4[ebp]
  000ad	0f be 4c 02 04	 movsx	 ecx, BYTE PTR [edx+eax+4]
  000b2	85 c9		 test	 ecx, ecx
  000b4	74 21		 je	 SHORT $LN6@UpdEntry

; 55   : 					inst.dictionary[i]->name[clearName] = NULL;

  000b6	8b 45 f8	 mov	 eax, DWORD PTR _i$5[ebp]
  000b9	8b 4d 08	 mov	 ecx, DWORD PTR _inst$[ebp]
  000bc	8b 54 81 1c	 mov	 edx, DWORD PTR [ecx+eax*4+28]
  000c0	0f bf 45 ec	 movsx	 eax, WORD PTR _clearName$4[ebp]
  000c4	c6 44 02 04 00	 mov	 BYTE PTR [edx+eax+4], 0

; 56   : 					clearName++;

  000c9	66 8b 45 ec	 mov	 ax, WORD PTR _clearName$4[ebp]
  000cd	66 83 c0 01	 add	 ax, 1
  000d1	66 89 45 ec	 mov	 WORD PTR _clearName$4[ebp], ax

; 57   : 				}

  000d5	eb c8		 jmp	 SHORT $LN5@UpdEntry
$LN6@UpdEntry:

; 58   : 				inst.dictionary[i]->name[clearName] = NULL;

  000d7	8b 45 f8	 mov	 eax, DWORD PTR _i$5[ebp]
  000da	8b 4d 08	 mov	 ecx, DWORD PTR _inst$[ebp]
  000dd	8b 54 81 1c	 mov	 edx, DWORD PTR [ecx+eax*4+28]
  000e1	0f bf 45 ec	 movsx	 eax, WORD PTR _clearName$4[ebp]
  000e5	c6 44 02 04 00	 mov	 BYTE PTR [edx+eax+4], 0

; 59   : 				for (int j = 0; j < strlen(new_ed.name); j++) {

  000ea	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _j$3[ebp], 0
  000f1	eb 09		 jmp	 SHORT $LN9@UpdEntry
$LN7@UpdEntry:
  000f3	8b 45 e0	 mov	 eax, DWORD PTR _j$3[ebp]
  000f6	83 c0 01	 add	 eax, 1
  000f9	89 45 e0	 mov	 DWORD PTR _j$3[ebp], eax
$LN9@UpdEntry:
  000fc	8d 45 14	 lea	 eax, DWORD PTR _new_ed$[ebp+4]
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _strlen
  00105	83 c4 04	 add	 esp, 4
  00108	39 45 e0	 cmp	 DWORD PTR _j$3[ebp], eax
  0010b	73 1a		 jae	 SHORT $LN8@UpdEntry

; 60   : 					inst.dictionary[i]->name[j] = new_ed.name[j];

  0010d	8b 45 f8	 mov	 eax, DWORD PTR _i$5[ebp]
  00110	8b 4d 08	 mov	 ecx, DWORD PTR _inst$[ebp]
  00113	8b 54 81 1c	 mov	 edx, DWORD PTR [ecx+eax*4+28]
  00117	8b 45 e0	 mov	 eax, DWORD PTR _j$3[ebp]
  0011a	8b 4d e0	 mov	 ecx, DWORD PTR _j$3[ebp]
  0011d	8a 4c 0d 14	 mov	 cl, BYTE PTR _new_ed$[ebp+ecx+4]
  00121	88 4c 02 04	 mov	 BYTE PTR [edx+eax+4], cl

; 61   : 				}

  00125	eb cc		 jmp	 SHORT $LN7@UpdEntry
$LN8@UpdEntry:

; 62   : 				inst.dictionary[i]->name[strlen(new_ed.name)] = '\0';

  00127	8b 45 f8	 mov	 eax, DWORD PTR _i$5[ebp]
  0012a	8b 4d 08	 mov	 ecx, DWORD PTR _inst$[ebp]
  0012d	8b 74 81 1c	 mov	 esi, DWORD PTR [ecx+eax*4+28]
  00131	8d 55 14	 lea	 edx, DWORD PTR _new_ed$[ebp+4]
  00134	52		 push	 edx
  00135	e8 00 00 00 00	 call	 _strlen
  0013a	83 c4 04	 add	 esp, 4
  0013d	c6 44 06 04 00	 mov	 BYTE PTR [esi+eax+4], 0

; 63   : 			}

  00142	eb 26		 jmp	 SHORT $LN11@UpdEntry
$LN10@UpdEntry:

; 64   : 			else if (id > inst.size) {

  00144	8b 45 08	 mov	 eax, DWORD PTR _inst$[ebp]
  00147	8b 4d 0c	 mov	 ecx, DWORD PTR _id$[ebp]
  0014a	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  0014d	7e 1b		 jle	 SHORT $LN11@UpdEntry

; 65   : 				throw(char*)THROW07;

  0014f	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], OFFSET ??_C@_0BN@NKECCJKP@UpdEntry?3?5?m?e?5?m?$OA?i?d?e?m?5?$PN?k?e?l?e?m?r?5@
  00159	68 00 00 00 00	 push	 OFFSET __TI2PAD
  0015e	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00164	50		 push	 eax
  00165	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN11@UpdEntry:

; 66   : 			}
; 67   : 		}

  0016a	e9 c2 fe ff ff	 jmp	 $LN2@UpdEntry
$LN14@UpdEntry:

; 68   : 	}

  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	5b		 pop	 ebx
  00172	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  00178	3b ec		 cmp	 ebp, esp
  0017a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c3		 ret	 0
?UpdEntry@Dictionary@@YAXAAUInstance@1@HUEntry@1@@Z ENDP ; Dictionary::UpdEntry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab07\LP_lab07\Dicrtionary.cpp
;	COMDAT ?DelEntry@Dictionary@@YAXAAUInstance@1@H@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_j$2 = -20						; size = 4
_i$3 = -8						; size = 4
_inst$ = 8						; size = 4
_id$ = 12						; size = 4
?DelEntry@Dictionary@@YAXAAUInstance@1@H@Z PROC		; Dictionary::DelEntry, COMDAT

; 29   : 	void DelEntry(Instance& inst, int id) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C490361C_Dicrtionary@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 30   : 		for (int i = 0; i < inst.size; i++) {

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@DelEntry
$LN2@DelEntry:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@DelEntry:
  0003a	8b 45 08	 mov	 eax, DWORD PTR _inst$[ebp]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _i$3[ebp]
  00040	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00043	0f 8d b3 00 00
	00		 jge	 $LN13@DelEntry

; 31   : 			if (inst.dictionary[i]->id == id) {

  00049	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _inst$[ebp]
  0004f	8b 54 81 1c	 mov	 edx, DWORD PTR [ecx+eax*4+28]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	3b 45 0c	 cmp	 eax, DWORD PTR _id$[ebp]
  00058	75 77		 jne	 SHORT $LN8@DelEntry

; 32   : 				if (i == inst.size - 1) inst.dictionary[i] = NULL;

  0005a	8b 45 08	 mov	 eax, DWORD PTR _inst$[ebp]
  0005d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00060	83 e9 01	 sub	 ecx, 1
  00063	39 4d f8	 cmp	 DWORD PTR _i$3[ebp], ecx
  00066	75 10		 jne	 SHORT $LN10@DelEntry
  00068	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _inst$[ebp]
  0006e	c7 44 81 1c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*4+28], 0
  00076	eb 46		 jmp	 SHORT $LN11@DelEntry
$LN10@DelEntry:

; 33   : 				else {
; 34   : 					for (int j = i; j < inst.size - 1; j++) {

  00078	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  0007b	89 45 ec	 mov	 DWORD PTR _j$2[ebp], eax
  0007e	eb 09		 jmp	 SHORT $LN7@DelEntry
$LN5@DelEntry:
  00080	8b 45 ec	 mov	 eax, DWORD PTR _j$2[ebp]
  00083	83 c0 01	 add	 eax, 1
  00086	89 45 ec	 mov	 DWORD PTR _j$2[ebp], eax
$LN7@DelEntry:
  00089	8b 45 08	 mov	 eax, DWORD PTR _inst$[ebp]
  0008c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0008f	83 e9 01	 sub	 ecx, 1
  00092	39 4d ec	 cmp	 DWORD PTR _j$2[ebp], ecx
  00095	7d 16		 jge	 SHORT $LN6@DelEntry

; 35   : 						inst.dictionary[j] = inst.dictionary[j + 1];

  00097	8b 45 ec	 mov	 eax, DWORD PTR _j$2[ebp]
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _inst$[ebp]
  0009d	8b 55 ec	 mov	 edx, DWORD PTR _j$2[ebp]
  000a0	8b 75 08	 mov	 esi, DWORD PTR _inst$[ebp]
  000a3	8b 54 96 20	 mov	 edx, DWORD PTR [esi+edx*4+32]
  000a7	89 54 81 1c	 mov	 DWORD PTR [ecx+eax*4+28], edx

; 36   : 					}

  000ab	eb d3		 jmp	 SHORT $LN5@DelEntry
$LN6@DelEntry:

; 37   : 					inst.dictionary[inst.size - 1] = NULL;

  000ad	8b 45 08	 mov	 eax, DWORD PTR _inst$[ebp]
  000b0	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000b3	8b 55 08	 mov	 edx, DWORD PTR _inst$[ebp]
  000b6	c7 44 8a 18 00
	00 00 00	 mov	 DWORD PTR [edx+ecx*4+24], 0
$LN11@DelEntry:

; 38   : 				}
; 39   : 				inst.size--;

  000be	8b 45 08	 mov	 eax, DWORD PTR _inst$[ebp]
  000c1	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000c4	83 e9 01	 sub	 ecx, 1
  000c7	8b 55 08	 mov	 edx, DWORD PTR _inst$[ebp]
  000ca	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 40   : 				return;

  000cd	eb 2d		 jmp	 SHORT $LN13@DelEntry

; 41   : 			}

  000cf	eb 26		 jmp	 SHORT $LN9@DelEntry
$LN8@DelEntry:

; 42   : 			else if (id > inst.size) {

  000d1	8b 45 08	 mov	 eax, DWORD PTR _inst$[ebp]
  000d4	8b 4d 0c	 mov	 ecx, DWORD PTR _id$[ebp]
  000d7	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  000da	7e 1b		 jle	 SHORT $LN9@DelEntry

; 43   : 				throw(char*)THROW06;

  000dc	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], OFFSET ??_C@_0BN@OBDCHDLN@DelEntry?3?5?m?e?5?m?$OA?i?d?e?m?5?$PN?k?e?l?e?m?r?5@
  000e6	68 00 00 00 00	 push	 OFFSET __TI2PAD
  000eb	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN9@DelEntry:

; 44   : 			}
; 45   : 		}

  000f7	e9 35 ff ff ff	 jmp	 $LN2@DelEntry
$LN13@DelEntry:

; 46   : 	}

  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	5b		 pop	 ebx
  000ff	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00105	3b ec		 cmp	 ebp, esp
  00107	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c3		 ret	 0
?DelEntry@Dictionary@@YAXAAUInstance@1@H@Z ENDP		; Dictionary::DelEntry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab07\LP_lab07\Dicrtionary.cpp
;	COMDAT ?AddEntry@Dictionary@@YAXAAUInstance@1@UEntry@1@@Z
_TEXT	SEGMENT
tv89 = -244						; size = 4
$T1 = -236						; size = 4
$T2 = -224						; size = 4
$T3 = -212						; size = 4
_i$4 = -8						; size = 4
_inst$ = 8						; size = 4
_ed$ = 12						; size = 36
?AddEntry@Dictionary@@YAXAAUInstance@1@UEntry@1@@Z PROC	; Dictionary::AddEntry, COMDAT

; 18   : 	void AddEntry(Instance& inst, Entry ed) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00012	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C490361C_Dicrtionary@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 19   : 		if (inst.size == inst.maxsize) throw(char*)THROW03;

  00028	8b 45 08	 mov	 eax, DWORD PTR _inst$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _inst$[ebp]
  0002e	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00031	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  00034	75 1b		 jne	 SHORT $LN5@AddEntry
  00036	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp], OFFSET ??_C@_0BP@PCKPAEPH@AddEntry?3?5?o?e?p?e?o?n?k?m?e?m?h?e?5?q?k?n?b?$OA?p?$PP@
  00040	68 00 00 00 00	 push	 OFFSET __TI2PAD
  00045	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@AddEntry:

; 20   : 		for (int i = 0; i < inst.size; i++) {

  00051	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  00058	eb 09		 jmp	 SHORT $LN4@AddEntry
$LN2@AddEntry:
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _i$4[ebp]
  0005d	83 c0 01	 add	 eax, 1
  00060	89 45 f8	 mov	 DWORD PTR _i$4[ebp], eax
$LN4@AddEntry:
  00063	8b 45 08	 mov	 eax, DWORD PTR _inst$[ebp]
  00066	8b 4d f8	 mov	 ecx, DWORD PTR _i$4[ebp]
  00069	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  0006c	7d 2e		 jge	 SHORT $LN3@AddEntry

; 21   : 			if (ed.id == inst.dictionary[i]->id) throw(char*)THROW04;

  0006e	8b 45 f8	 mov	 eax, DWORD PTR _i$4[ebp]
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _inst$[ebp]
  00074	8b 54 81 1c	 mov	 edx, DWORD PTR [ecx+eax*4+28]
  00078	8b 45 0c	 mov	 eax, DWORD PTR _ed$[ebp]
  0007b	3b 02		 cmp	 eax, DWORD PTR [edx]
  0007d	75 1b		 jne	 SHORT $LN6@AddEntry
  0007f	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], OFFSET ??_C@_0CG@ENLMPENF@AddEntry?3?5?d?s?a?k?h?p?n?b?$OA?m?h?e?5?h?d?e?m?r?h?t?h@
  00089	68 00 00 00 00	 push	 OFFSET __TI2PAD
  0008e	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN6@AddEntry:

; 22   : 		}

  0009a	eb be		 jmp	 SHORT $LN2@AddEntry
$LN3@AddEntry:

; 23   : 		inst.dictionary[inst.size] = new Entry();

  0009c	6a 24		 push	 36			; 00000024H
  0009e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a3	83 c4 04	 add	 esp, 4
  000a6	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  000ac	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR $T1[ebp], 0
  000b3	74 30		 je	 SHORT $LN8@AddEntry
  000b5	33 c0		 xor	 eax, eax
  000b7	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  000bd	89 01		 mov	 DWORD PTR [ecx], eax
  000bf	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000c2	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  000c5	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  000c8	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  000cb	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  000ce	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  000d1	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  000d4	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  000d7	8b 95 14 ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  000dd	89 95 0c ff ff
	ff		 mov	 DWORD PTR tv89[ebp], edx
  000e3	eb 0a		 jmp	 SHORT $LN9@AddEntry
$LN8@AddEntry:
  000e5	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv89[ebp], 0
$LN9@AddEntry:
  000ef	8b 45 08	 mov	 eax, DWORD PTR _inst$[ebp]
  000f2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000f5	8b 55 08	 mov	 edx, DWORD PTR _inst$[ebp]
  000f8	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR tv89[ebp]
  000fe	89 44 8a 1c	 mov	 DWORD PTR [edx+ecx*4+28], eax

; 24   : 		inst.dictionary[inst.size]->id = ed.id;

  00102	8b 45 08	 mov	 eax, DWORD PTR _inst$[ebp]
  00105	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00108	8b 55 08	 mov	 edx, DWORD PTR _inst$[ebp]
  0010b	8b 44 8a 1c	 mov	 eax, DWORD PTR [edx+ecx*4+28]
  0010f	8b 4d 0c	 mov	 ecx, DWORD PTR _ed$[ebp]
  00112	89 08		 mov	 DWORD PTR [eax], ecx

; 25   : 		strcpy_s(inst.dictionary[inst.size]->name, ed.name);

  00114	8d 45 10	 lea	 eax, DWORD PTR _ed$[ebp+4]
  00117	50		 push	 eax
  00118	8b 4d 08	 mov	 ecx, DWORD PTR _inst$[ebp]
  0011b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0011e	8b 45 08	 mov	 eax, DWORD PTR _inst$[ebp]
  00121	8b 4c 90 1c	 mov	 ecx, DWORD PTR [eax+edx*4+28]
  00125	83 c1 04	 add	 ecx, 4
  00128	51		 push	 ecx
  00129	e8 00 00 00 00	 call	 ??$strcpy_s@$0BO@@@YAHAAY0BO@DPBD@Z ; strcpy_s<30>
  0012e	83 c4 08	 add	 esp, 8

; 26   : 		inst.size++;

  00131	8b 45 08	 mov	 eax, DWORD PTR _inst$[ebp]
  00134	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00137	83 c1 01	 add	 ecx, 1
  0013a	8b 55 08	 mov	 edx, DWORD PTR _inst$[ebp]
  0013d	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN7@AddEntry:

; 27   : 	}

  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  00149	3b ec		 cmp	 ebp, esp
  0014b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00150	8b e5		 mov	 esp, ebp
  00152	5d		 pop	 ebp
  00153	c3		 ret	 0
?AddEntry@Dictionary@@YAXAAUInstance@1@UEntry@1@@Z ENDP	; Dictionary::AddEntry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab07\LP_lab07\Dicrtionary.cpp
;	COMDAT ?Create@Dictionary@@YA?AUInstance@1@QADH@Z
_TEXT	SEGMENT
$T1 = -652						; size = 4
$T2 = -640						; size = 4
_newDict$ = -436					; size = 428
__$ArrayPad$ = -4					; size = 4
$T3 = 8							; size = 4
_name$ = 12						; size = 4
_size$ = 16						; size = 4
?Create@Dictionary@@YA?AUInstance@1@QADH@Z PROC		; Dictionary::Create, COMDAT

; 8    : 	Instance Create(char name[DICTNAMEMAXSIZE], int size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 02 00
	00		 sub	 esp, 656		; 00000290H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 70 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-656]
  00012	b9 a4 00 00 00	 mov	 ecx, 164		; 000000a4H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __C490361C_Dicrtionary@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 9    : 		if (strlen(name) > DICTNAMEMAXSIZE) throw (char*)THROW01;

  00032	8b 45 0c	 mov	 eax, DWORD PTR _name$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _strlen
  0003b	83 c4 04	 add	 esp, 4
  0003e	83 f8 14	 cmp	 eax, 20			; 00000014H
  00041	76 1b		 jbe	 SHORT $LN2@Create
  00043	c7 85 80 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], OFFSET ??_C@_0CH@DHPCOMCI@Create?3?5?o?p?e?b?$PL?x?e?m?5?p?$OA?g?l?e?p?5?h?l?e?m?h?5?q@
  0004d	68 00 00 00 00	 push	 OFFSET __TI2PAD
  00052	8d 85 80 fd ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Create:

; 10   : 		if (size > DICTMAXSIZE) throw(char*)THROW02;

  0005e	83 7d 10 64	 cmp	 DWORD PTR _size$[ebp], 100 ; 00000064H
  00062	7e 1b		 jle	 SHORT $LN3@Create
  00064	c7 85 74 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], OFFSET ??_C@_0DG@HJCMAFJH@Create?3?5?o?p?e?b?$PL?x?e?m?5?p?$OA?g?l?e?p?5?l?$OA?j?q?h?l?$OA@
  0006e	68 00 00 00 00	 push	 OFFSET __TI2PAD
  00073	8d 85 74 fd ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Create:

; 11   : 		Instance newDict;
; 12   : 		strcpy_s(newDict.name, name);

  0007f	8b 45 0c	 mov	 eax, DWORD PTR _name$[ebp]
  00082	50		 push	 eax
  00083	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR _newDict$[ebp]
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 ??$strcpy_s@$0BE@@@YAHAAY0BE@DPBD@Z ; strcpy_s<20>
  0008f	83 c4 08	 add	 esp, 8

; 13   : 		newDict.maxsize = size;

  00092	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  00095	89 85 60 fe ff
	ff		 mov	 DWORD PTR _newDict$[ebp+20], eax

; 14   : 		newDict.size = 0;

  0009b	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _newDict$[ebp+24], 0

; 15   : 		return newDict;

  000a5	b9 6b 00 00 00	 mov	 ecx, 107		; 0000006bH
  000aa	8d b5 4c fe ff
	ff		 lea	 esi, DWORD PTR _newDict$[ebp]
  000b0	8b 7d 08	 mov	 edi, DWORD PTR $T3[ebp]
  000b3	f3 a5		 rep movsd
  000b5	8b 45 08	 mov	 eax, DWORD PTR $T3[ebp]
$LN4@Create:

; 16   : 	}

  000b8	52		 push	 edx
  000b9	8b cd		 mov	 ecx, ebp
  000bb	50		 push	 eax
  000bc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@Create
  000c2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c7	58		 pop	 eax
  000c8	5a		 pop	 edx
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cf	33 cd		 xor	 ecx, ebp
  000d1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d6	81 c4 90 02 00
	00		 add	 esp, 656		; 00000290H
  000dc	3b ec		 cmp	 ebp, esp
  000de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c3		 ret	 0
  000e7	90		 npad	 1
$LN7@Create:
  000e8	01 00 00 00	 DD	 1
  000ec	00 00 00 00	 DD	 $LN6@Create
$LN6@Create:
  000f0	4c fe ff ff	 DD	 -436			; fffffe4cH
  000f4	ac 01 00 00	 DD	 428			; 000001acH
  000f8	00 00 00 00	 DD	 $LN5@Create
$LN5@Create:
  000fc	6e		 DB	 110			; 0000006eH
  000fd	65		 DB	 101			; 00000065H
  000fe	77		 DB	 119			; 00000077H
  000ff	44		 DB	 68			; 00000044H
  00100	69		 DB	 105			; 00000069H
  00101	63		 DB	 99			; 00000063H
  00102	74		 DB	 116			; 00000074H
  00103	00		 DB	 0
?Create@Dictionary@@YA?AUInstance@1@QADH@Z ENDP		; Dictionary::Create
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 400  :     _NODISCARD static constexpr int_type eof() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00020	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __D15AFF60_xstring
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 401  :         return static_cast<int_type>(EOF);

  00047	83 c8 ff	 or	 eax, -1

; 402  :     }

  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
  00069	cc		 int	 3
  0006a	cc		 int	 3
  0006b	cc		 int	 3
  0006c	cc		 int	 3
  0006d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 392  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00020	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __D15AFF60_xstring
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 393  :         return _Left == _Right;

  00047	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004d	8b 10		 mov	 edx, DWORD PTR [eax]
  0004f	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00051	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00053	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  0005d	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0005f	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00069	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 394  :     }

  0006f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00072	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00079	59		 pop	 ecx
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
  0008e	cc		 int	 3
  0008f	cc		 int	 3
  00090	cc		 int	 3
  00091	cc		 int	 3
  00092	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 2c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-212]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 305  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00020	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __D15AFF60_xstring
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 306  :         // find length of null-terminated string
; 307  : #if _HAS_CXX17
; 308  : #ifdef __cpp_char8_t
; 309  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 310  : #if _HAS_U8_INTRINSICS
; 311  :             return __builtin_u8strlen(_First);
; 312  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 313  :             return _Char_traits<_Elem, _Int_type>::length(_First);
; 314  : #endif // _HAS_U8_INTRINSICS
; 315  :         } else
; 316  : #endif // __cpp_char8_t
; 317  :         {
; 318  :             return __builtin_strlen(_First);
; 319  :         }
; 320  : #else // _HAS_CXX17
; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00047	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _strlen
  00050	83 c4 04	 add	 esp, 4

; 322  : #endif // _HAS_CXX17
; 323  :     }

  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00067	3b ec		 cmp	 ebp, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
  00072	cc		 int	 3
  00073	cc		 int	 3
  00074	cc		 int	 3
  00075	cc		 int	 3
  00076	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab07\LP_lab07\Dicrtionary.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C490361C_Dicrtionary@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab07\LP_lab07\Dicrtionary.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C490361C_Dicrtionary@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
