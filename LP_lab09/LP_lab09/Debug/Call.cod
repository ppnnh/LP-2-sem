; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab09\LP_lab09\Call.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__8906660C_vcruntime_new@h DB 01H
__09340588_corecrt_math@h DB 01H
__24E9E95F_stdlib@h DB 01H
__F8119FB4_cstdlib DB 01H
__0A4FAB91_cmath DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__35D7DDB3_corecrt_memory@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__5467428D_corecrt_wconio@h DB 01H
__4442441F_corecrt_wio@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__186FF47F_stat@h DB 01H
__534C724A_wchar@h DB 01H
__85A9AA98_type_traits DB 01H
__4324C6B3_xutility DB 01H
__B0C4CEA9_malloc@h DB 01H
__E75714E4_vcruntime_exception@h DB 01H
__E4152856_exception DB 01H
__F2870A2C_limits DB 01H
__A58979FC_xmemory DB 01H
__D15AFF60_xstring DB 01H
__6D5B120B_stdexcept DB 01H
__160863A3_xcall_once@h DB 01H
__99B256EE_atomic DB 01H
__A9557183_system_error DB 01H
__FB364CBD_vcruntime_typeinfo@h DB 01H
__33FB35AA_typeinfo DB 01H
__4E2906A2_memory DB 01H
__626C51AD_xfacet DB 01H
__7242C389_ctype@h DB 01H
__2C72D662_xlocinfo DB 01H
__0E648B51_xlocale DB 01H
__1597A171_xiosbase DB 01H
__90E3ED46_xlocnum DB 01H
__165C22CB_ios DB 01H
__22687C2D_xlocmes DB 01H
__BB81F87E_xlocmon DB 01H
__8AA3BE86_time@h DB 01H
__886F7F70_xloctime DB 01H
__C685E5E2_Call@cpp DB 01H
__E5C4F40F_locale DB 01H
__7EA464AF_istream DB 01H
__1D745195_ostream DB 01H
__6FFBAAB7_streambuf DB 01H
__528871F3_iterator DB 01H
__3E6EDFAA_iosfwd DB 01H
__CF1C1A3F_utility DB 01H
__38038D2D_xstddef DB 01H
__EE19A480_xatomic@h DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	_wmemcpy
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPA_WPB_W@Z			; std::_Maklocwcs
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	?cdevl@Call@@YAHAAH00@Z				; Call::cdevl
PUBLIC	?cstd@Call@@YGHAAHHH@Z				; Call::cstd
PUBLIC	?cfst@Call@@YIHHHH@Z				; Call::cfst
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0GI@DEICPIDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA ; `std::_Maklocwcs'::`1'::__LINE__Var
PUBLIC	??_C@_0GI@LHMPPKJI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
EXTRN	__imp___calloc_dbg:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	_strlen:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	__Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@LHMPPKJI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@LHMPPKJI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.27.29110\include\xlocnum', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA DD 05aH ; `std::_Maklocwcs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GI@DEICPIDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@DEICPIDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.27.29110\include\xlocale', 00H	; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab09\LP_lab09\Call.cpp
;	COMDAT ?cfst@Call@@YIHHHH@Z
_TEXT	SEGMENT
_b$ = -20						; size = 4
_a$ = -8						; size = 4
_c$ = 8							; size = 4
?cfst@Call@@YIHHHH@Z PROC				; Call::cfst, COMDAT
; _a$ = ecx
; _b$ = edx

; 13   : 	int _fastcall cfst(int a, int b, int c) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 55 ec	 mov	 DWORD PTR _b$[ebp], edx
  00023	89 4d f8	 mov	 DWORD PTR _a$[ebp], ecx
  00026	b9 00 00 00 00	 mov	 ecx, OFFSET __C685E5E2_Call@cpp
  0002b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 14   : 		return a * b * c;

  00030	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  00033	0f af 45 ec	 imul	 eax, DWORD PTR _b$[ebp]
  00037	0f af 45 08	 imul	 eax, DWORD PTR _c$[ebp]

; 15   : 	}

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
?cfst@Call@@YIHHHH@Z ENDP				; Call::cfst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab09\LP_lab09\Call.cpp
;	COMDAT ?cstd@Call@@YGHAAHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
?cstd@Call@@YGHAAHHH@Z PROC				; Call::cstd, COMDAT

; 9    : 	int _stdcall cstd(int& a, int b, int c) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C685E5E2_Call@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 10   : 		return a * b * c;

  00028	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0002b	8b 00		 mov	 eax, DWORD PTR [eax]
  0002d	0f af 45 0c	 imul	 eax, DWORD PTR _b$[ebp]
  00031	0f af 45 10	 imul	 eax, DWORD PTR _c$[ebp]

; 11   : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 0c 00	 ret	 12			; 0000000cH
?cstd@Call@@YGHAAHHH@Z ENDP				; Call::cstd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab09\LP_lab09\Call.cpp
;	COMDAT ?cdevl@Call@@YAHAAH00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
?cdevl@Call@@YAHAAH00@Z PROC				; Call::cdevl, COMDAT

; 5    : 	int _cdecl cdevl(int& a, int& b, int& c) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C685E5E2_Call@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 6    : 		return a * b * c;

  00028	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002e	8b 00		 mov	 eax, DWORD PTR [eax]
  00030	0f af 01	 imul	 eax, DWORD PTR [ecx]
  00033	8b 55 10	 mov	 edx, DWORD PTR _c$[ebp]
  00036	0f af 02	 imul	 eax, DWORD PTR [edx]

; 7    : 	}

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?cdevl@Call@@YAHAAH00@Z ENDP				; Call::cdevl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -252						; size = 44
_this$ = -8						; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 176  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00013	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __886F7F70_xloctime
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 177  :         _Cvt = _Lobj._Getcvt();

  0002d	8b f4		 mov	 esi, esp
  0002f	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00035	50		 push	 eax
  00036	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00049	83 c7 18	 add	 edi, 24			; 00000018H
  0004c	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00051	8b f0		 mov	 esi, eax
  00053	f3 a5		 rep movsd

; 178  : 
; 179  :         if (is_same_v<_Elem2, wchar_t>) {

  00055	b8 01 00 00 00	 mov	 eax, 1
  0005a	85 c0		 test	 eax, eax
  0005c	74 57		 je	 SHORT $LN2@Getvals

; 180  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  0005e	8b f4		 mov	 esi, esp
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00076	83 c4 04	 add	 esp, 4
  00079	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 181  :             _Months =

  0007f	8b f4		 mov	 esi, esp
  00081	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0008a	3b f4		 cmp	 esi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00097	83 c4 04	 add	 esp, 4
  0009a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 182  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 183  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  000a5	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  000aa	83 c4 04	 add	 esp, 4
  000ad	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 184  :         } else {

  000b3	eb 70		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 185  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000b5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	83 c0 18	 add	 eax, 24			; 00000018H
  000bb	50		 push	 eax
  000bc	6a 00		 push	 0
  000be	8b f4		 mov	 esi, esp
  000c0	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  000c9	3b f4		 cmp	 esi, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 186  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000df	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e2	83 c0 18	 add	 eax, 24			; 00000018H
  000e5	50		 push	 eax
  000e6	6a 00		 push	 0
  000e8	8b f4		 mov	 esi, esp
  000ea	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000f3	3b f4		 cmp	 esi, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
  00103	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00106	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 187  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  00109	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	83 c0 18	 add	 eax, 24			; 00000018H
  0010f	50		 push	 eax
  00110	6a 00		 push	 0
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  00117	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  0011c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00122	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 188  :         }
; 189  :     }

  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	5b		 pop	 ebx
  00128	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  0012e	3b ec		 cmp	 ebp, esp
  00130	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -252						; size = 44
_this$ = -8						; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 176  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00013	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __886F7F70_xloctime
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 177  :         _Cvt = _Lobj._Getcvt();

  0002d	8b f4		 mov	 esi, esp
  0002f	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00035	50		 push	 eax
  00036	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00049	83 c7 18	 add	 edi, 24			; 00000018H
  0004c	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00051	8b f0		 mov	 esi, eax
  00053	f3 a5		 rep movsd

; 178  : 
; 179  :         if (is_same_v<_Elem2, wchar_t>) {

  00055	b8 01 00 00 00	 mov	 eax, 1
  0005a	85 c0		 test	 eax, eax
  0005c	74 57		 je	 SHORT $LN2@Getvals

; 180  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  0005e	8b f4		 mov	 esi, esp
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00076	83 c4 04	 add	 esp, 4
  00079	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 181  :             _Months =

  0007f	8b f4		 mov	 esi, esp
  00081	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0008a	3b f4		 cmp	 esi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00097	83 c4 04	 add	 esp, 4
  0009a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 182  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 183  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  000a5	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  000aa	83 c4 04	 add	 esp, 4
  000ad	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 184  :         } else {

  000b3	eb 70		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 185  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000b5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	83 c0 18	 add	 eax, 24			; 00000018H
  000bb	50		 push	 eax
  000bc	6a 00		 push	 0
  000be	8b f4		 mov	 esi, esp
  000c0	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  000c9	3b f4		 cmp	 esi, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 186  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000df	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e2	83 c0 18	 add	 eax, 24			; 00000018H
  000e5	50		 push	 eax
  000e6	6a 00		 push	 0
  000e8	8b f4		 mov	 esi, esp
  000ea	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000f3	3b f4		 cmp	 esi, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
  00103	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00106	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 187  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  00109	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	83 c0 18	 add	 eax, 24			; 00000018H
  0010f	50		 push	 eax
  00110	6a 00		 push	 0
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  00117	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  0011c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00122	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 188  :         }
; 189  :     }

  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	5b		 pop	 ebx
  00128	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  0012e	3b ec		 cmp	 ebp, esp
  00130	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptrnext$1 = -32					; size = 4
__Ptrdest$ = -20					; size = 4
__Count$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 563  : _Elem* __CRTDECL _Maklocstr(const char* _Ptr, _Elem*, const _Locinfo::_Cvtvec&) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0E648B51_xlocale
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 564  :     // convert C string to _Elem sequence using _Cvtvec
; 565  :     size_t _Count = _CSTD strlen(_Ptr) + 1;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _strlen
  00031	83 c4 04	 add	 esp, 4
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR __Count$[ebp], eax

; 566  : 
; 567  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  0003a	8b f4		 mov	 esi, esp
  0003c	68 37 02 00 00	 push	 567			; 00000237H
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@DEICPIDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00046	6a 02		 push	 2
  00048	6a 01		 push	 1
  0004a	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0004d	50		 push	 eax
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00054	83 c4 14	 add	 esp, 20			; 00000014H
  00057	3b f4		 cmp	 esi, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	89 45 ec	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 568  : 
; 569  :     if (!_Ptrdest) {

  00061	83 7d ec 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  00065	75 05		 jne	 SHORT $LN5@Maklocstr

; 570  :         _Xbad_alloc();

  00067	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 571  :     }
; 572  : 
; 573  :     for (_Elem* _Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr) {

  0006c	8b 45 ec	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  0006f	89 45 e0	 mov	 DWORD PTR __Ptrnext$1[ebp], eax
  00072	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  00074	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  00077	83 e8 01	 sub	 eax, 1
  0007a	89 45 f8	 mov	 DWORD PTR __Count$[ebp], eax
  0007d	8b 4d e0	 mov	 ecx, DWORD PTR __Ptrnext$1[ebp]
  00080	83 c1 01	 add	 ecx, 1
  00083	89 4d e0	 mov	 DWORD PTR __Ptrnext$1[ebp], ecx
  00086	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00089	83 c2 01	 add	 edx, 1
  0008c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
$LN4@Maklocstr:
  0008f	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00093	76 0c		 jbe	 SHORT $LN3@Maklocstr

; 574  :         *_Ptrnext = static_cast<_Elem>(static_cast<unsigned char>(*_Ptr));

  00095	8b 45 e0	 mov	 eax, DWORD PTR __Ptrnext$1[ebp]
  00098	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0009b	8a 11		 mov	 dl, BYTE PTR [ecx]
  0009d	88 10		 mov	 BYTE PTR [eax], dl

; 575  :     }

  0009f	eb d3		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 576  : 
; 577  :     return _Ptrdest;

  000a1	8b 45 ec	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN6@Maklocstr:

; 578  : }

  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000ad	3b ec		 cmp	 ebp, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
__Ptrdest$ = -20					; size = 4
__Count$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?_Maklocwcs@std@@YAPA_WPB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 90   : inline wchar_t* _Maklocwcs(const wchar_t* _Ptr) { // copy NTWCS to allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __90E3ED46_xlocnum
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :     const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002d	50		 push	 eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  00034	83 c4 04	 add	 esp, 4
  00037	3b f4		 cmp	 esi, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 f8	 mov	 DWORD PTR __Count$[ebp], eax

; 92   : 
; 93   :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Count, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
  00049	83 c0 03	 add	 eax, 3
  0004c	8b f4		 mov	 esi, esp
  0004e	50		 push	 eax
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LHMPPKJI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00054	6a 02		 push	 2
  00056	6a 02		 push	 2
  00058	8b 4d f8	 mov	 ecx, DWORD PTR __Count$[ebp]
  0005b	51		 push	 ecx
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00062	83 c4 14	 add	 esp, 20			; 00000014H
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	89 45 ec	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 94   : 
; 95   :     if (!_Ptrdest) {

  0006f	83 7d ec 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  00073	75 05		 jne	 SHORT $LN2@Maklocwcs

; 96   :         _Xbad_alloc();

  00075	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Maklocwcs:

; 97   :     }
; 98   : 
; 99   :     _CSTD wmemcpy(_Ptrdest, _Ptr, _Count);

  0007a	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00081	51		 push	 ecx
  00082	8b 55 ec	 mov	 edx, DWORD PTR __Ptrdest$[ebp]
  00085	52		 push	 edx
  00086	e8 00 00 00 00	 call	 _wmemcpy
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 100  :     return _Ptrdest;

  0008e	8b 45 ec	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN3@Maklocwcs:

; 101  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0009a	3b ec		 cmp	 ebp, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
?_Maklocwcs@std@@YAPA_WPB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -128						; size = 8
__Ptrnext$ = -112					; size = 4
__Ptrdest$ = -100					; size = 4
__Mbst1$ = -88						; size = 8
__Wc$ = -72						; size = 2
__Bytes$ = -60						; size = 4
__Ptr1$ = -48						; size = 4
__Wchars$ = -36						; size = 4
__Count1$ = -24						; size = 4
__Count$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 581  : inline wchar_t* __CRTDECL _Maklocstr(const char* _Ptr, wchar_t*, const _Locinfo::_Cvtvec& _Cvt) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd bc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-324]
  00012	b9 51 00 00 00	 mov	 ecx, 81			; 00000051H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __0E648B51_xlocale
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 582  :     // convert C string to wchar_t sequence using _Cvtvec
; 583  :     size_t _Count;
; 584  :     size_t _Count1;
; 585  :     size_t _Wchars;
; 586  :     const char* _Ptr1;
; 587  :     int _Bytes;
; 588  :     wchar_t _Wc;
; 589  :     mbstate_t _Mbst1 = {};

  00032	33 c0		 xor	 eax, eax
  00034	89 45 a8	 mov	 DWORD PTR __Mbst1$[ebp], eax
  00037	89 45 ac	 mov	 DWORD PTR __Mbst1$[ebp+4], eax

; 590  : 
; 591  :     _Count1 = _CSTD strlen(_Ptr) + 1;

  0003a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _strlen
  00043	83 c4 04	 add	 esp, 4
  00046	83 c0 01	 add	 eax, 1
  00049	89 45 e8	 mov	 DWORD PTR __Count1$[ebp], eax

; 592  :     for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count; _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars) {

  0004c	8b 45 e8	 mov	 eax, DWORD PTR __Count1$[ebp]
  0004f	89 45 f4	 mov	 DWORD PTR __Count$[ebp], eax
  00052	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR __Wchars$[ebp], 0
  00059	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0005c	89 4d d0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  0005f	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  00061	8b 45 f4	 mov	 eax, DWORD PTR __Count$[ebp]
  00064	2b 45 c4	 sub	 eax, DWORD PTR __Bytes$[ebp]
  00067	89 45 f4	 mov	 DWORD PTR __Count$[ebp], eax
  0006a	8b 4d d0	 mov	 ecx, DWORD PTR __Ptr1$[ebp]
  0006d	03 4d c4	 add	 ecx, DWORD PTR __Bytes$[ebp]
  00070	89 4d d0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  00073	8b 55 dc	 mov	 edx, DWORD PTR __Wchars$[ebp]
  00076	83 c2 01	 add	 edx, 1
  00079	89 55 dc	 mov	 DWORD PTR __Wchars$[ebp], edx
$LN4@Maklocstr:
  0007c	83 7d f4 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00080	76 29		 jbe	 SHORT $LN3@Maklocstr

; 593  :         if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) {

  00082	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  00085	50		 push	 eax
  00086	8d 4d a8	 lea	 ecx, DWORD PTR __Mbst1$[ebp]
  00089	51		 push	 ecx
  0008a	8b 55 f4	 mov	 edx, DWORD PTR __Count$[ebp]
  0008d	52		 push	 edx
  0008e	8b 45 d0	 mov	 eax, DWORD PTR __Ptr1$[ebp]
  00091	50		 push	 eax
  00092	8d 4d b8	 lea	 ecx, DWORD PTR __Wc$[ebp]
  00095	51		 push	 ecx
  00096	e8 00 00 00 00	 call	 __Mbrtowc
  0009b	83 c4 14	 add	 esp, 20			; 00000014H
  0009e	89 45 c4	 mov	 DWORD PTR __Bytes$[ebp], eax
  000a1	83 7d c4 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  000a5	7f 02		 jg	 SHORT $LN8@Maklocstr

; 594  :             break;

  000a7	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 595  :         }
; 596  :     }

  000a9	eb b6		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 597  : 
; 598  :     ++_Wchars; // count terminating nul

  000ab	8b 45 dc	 mov	 eax, DWORD PTR __Wchars$[ebp]
  000ae	83 c0 01	 add	 eax, 1
  000b1	89 45 dc	 mov	 DWORD PTR __Wchars$[ebp], eax

; 599  : 
; 600  :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Wchars, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  000b4	8b f4		 mov	 esi, esp
  000b6	68 58 02 00 00	 push	 600			; 00000258H
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@DEICPIDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000c0	6a 02		 push	 2
  000c2	6a 02		 push	 2
  000c4	8b 45 dc	 mov	 eax, DWORD PTR __Wchars$[ebp]
  000c7	50		 push	 eax
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  000ce	83 c4 14	 add	 esp, 20			; 00000014H
  000d1	3b f4		 cmp	 esi, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	89 45 9c	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 601  : 
; 602  :     if (!_Ptrdest) {

  000db	83 7d 9c 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  000df	75 05		 jne	 SHORT $LN9@Maklocstr

; 603  :         _Xbad_alloc();

  000e1	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN9@Maklocstr:

; 604  :     }
; 605  : 
; 606  :     wchar_t* _Ptrnext = _Ptrdest;

  000e6	8b 45 9c	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  000e9	89 45 90	 mov	 DWORD PTR __Ptrnext$[ebp], eax

; 607  :     mbstate_t _Mbst2  = {};

  000ec	33 c0		 xor	 eax, eax
  000ee	89 45 80	 mov	 DWORD PTR __Mbst2$[ebp], eax
  000f1	89 45 84	 mov	 DWORD PTR __Mbst2$[ebp+4], eax

; 608  : 
; 609  :     for (; 0 < _Wchars; _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext) {

  000f4	eb 24		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:
  000f6	8b 45 f4	 mov	 eax, DWORD PTR __Count$[ebp]
  000f9	2b 45 c4	 sub	 eax, DWORD PTR __Bytes$[ebp]
  000fc	89 45 f4	 mov	 DWORD PTR __Count$[ebp], eax
  000ff	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00102	03 4d c4	 add	 ecx, DWORD PTR __Bytes$[ebp]
  00105	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
  00108	8b 55 dc	 mov	 edx, DWORD PTR __Wchars$[ebp]
  0010b	83 ea 01	 sub	 edx, 1
  0010e	89 55 dc	 mov	 DWORD PTR __Wchars$[ebp], edx
  00111	8b 45 90	 mov	 eax, DWORD PTR __Ptrnext$[ebp]
  00114	83 c0 02	 add	 eax, 2
  00117	89 45 90	 mov	 DWORD PTR __Ptrnext$[ebp], eax
$LN7@Maklocstr:
  0011a	83 7d dc 00	 cmp	 DWORD PTR __Wchars$[ebp], 0
  0011e	76 29		 jbe	 SHORT $LN6@Maklocstr

; 610  :         if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) {

  00120	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  00123	50		 push	 eax
  00124	8d 4d 80	 lea	 ecx, DWORD PTR __Mbst2$[ebp]
  00127	51		 push	 ecx
  00128	8b 55 e8	 mov	 edx, DWORD PTR __Count1$[ebp]
  0012b	52		 push	 edx
  0012c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0012f	50		 push	 eax
  00130	8b 4d 90	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  00133	51		 push	 ecx
  00134	e8 00 00 00 00	 call	 __Mbrtowc
  00139	83 c4 14	 add	 esp, 20			; 00000014H
  0013c	89 45 c4	 mov	 DWORD PTR __Bytes$[ebp], eax
  0013f	83 7d c4 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  00143	7f 02		 jg	 SHORT $LN10@Maklocstr

; 611  :             break;

  00145	eb 02		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 612  :         }
; 613  :     }

  00147	eb ad		 jmp	 SHORT $LN5@Maklocstr
$LN6@Maklocstr:

; 614  : 
; 615  :     *_Ptrnext = L'\0';

  00149	33 c0		 xor	 eax, eax
  0014b	8b 4d 90	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  0014e	66 89 01	 mov	 WORD PTR [ecx], ax

; 616  : 
; 617  :     return _Ptrdest;

  00151	8b 45 9c	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN11@Maklocstr:

; 618  : }

  00154	52		 push	 edx
  00155	8b cd		 mov	 ecx, ebp
  00157	50		 push	 eax
  00158	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN16@Maklocstr
  0015e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00163	58		 pop	 eax
  00164	5a		 pop	 edx
  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx
  00168	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016b	33 cd		 xor	 ecx, ebp
  0016d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00172	81 c4 44 01 00
	00		 add	 esp, 324		; 00000144H
  00178	3b ec		 cmp	 ebp, esp
  0017a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c3		 ret	 0
  00183	90		 npad	 1
$LN16@Maklocstr:
  00184	03 00 00 00	 DD	 3
  00188	00 00 00 00	 DD	 $LN15@Maklocstr
$LN15@Maklocstr:
  0018c	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00190	02 00 00 00	 DD	 2
  00194	00 00 00 00	 DD	 $LN12@Maklocstr
  00198	a8 ff ff ff	 DD	 -88			; ffffffa8H
  0019c	08 00 00 00	 DD	 8
  001a0	00 00 00 00	 DD	 $LN13@Maklocstr
  001a4	80 ff ff ff	 DD	 -128			; ffffff80H
  001a8	08 00 00 00	 DD	 8
  001ac	00 00 00 00	 DD	 $LN14@Maklocstr
$LN14@Maklocstr:
  001b0	5f		 DB	 95			; 0000005fH
  001b1	4d		 DB	 77			; 0000004dH
  001b2	62		 DB	 98			; 00000062H
  001b3	73		 DB	 115			; 00000073H
  001b4	74		 DB	 116			; 00000074H
  001b5	32		 DB	 50			; 00000032H
  001b6	00		 DB	 0
$LN13@Maklocstr:
  001b7	5f		 DB	 95			; 0000005fH
  001b8	4d		 DB	 77			; 0000004dH
  001b9	62		 DB	 98			; 00000062H
  001ba	73		 DB	 115			; 00000073H
  001bb	74		 DB	 116			; 00000074H
  001bc	31		 DB	 49			; 00000031H
  001bd	00		 DB	 0
$LN12@Maklocstr:
  001be	5f		 DB	 95			; 0000005fH
  001bf	57		 DB	 87			; 00000057H
  001c0	63		 DB	 99			; 00000063H
  001c1	00		 DB	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 230  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __534C724A_wchar@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00028	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  0002b	d1 e0		 shl	 eax, 1
  0002d	50		 push	 eax
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 _memcpy
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :         #pragma warning(pop)
; 235  :     }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab09\LP_lab09\Call.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C685E5E2_Call@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab09\LP_lab09\Call.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C685E5E2_Call@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
