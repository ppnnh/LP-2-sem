; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab09\LP_lab09\LP_lab09.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__8906660C_vcruntime_new@h DB 01H
__09340588_corecrt_math@h DB 01H
__24E9E95F_stdlib@h DB 01H
__F8119FB4_cstdlib DB 01H
__0A4FAB91_cmath DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__35D7DDB3_corecrt_memory@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__5467428D_corecrt_wconio@h DB 01H
__4442441F_corecrt_wio@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__186FF47F_stat@h DB 01H
__534C724A_wchar@h DB 01H
__85A9AA98_type_traits DB 01H
__4324C6B3_xutility DB 01H
__B0C4CEA9_malloc@h DB 01H
__E75714E4_vcruntime_exception@h DB 01H
__E4152856_exception DB 01H
__F2870A2C_limits DB 01H
__A58979FC_xmemory DB 01H
__D15AFF60_xstring DB 01H
__6D5B120B_stdexcept DB 01H
__160863A3_xcall_once@h DB 01H
__99B256EE_atomic DB 01H
__A9557183_system_error DB 01H
__FB364CBD_vcruntime_typeinfo@h DB 01H
__33FB35AA_typeinfo DB 01H
__4E2906A2_memory DB 01H
__626C51AD_xfacet DB 01H
__7242C389_ctype@h DB 01H
__2C72D662_xlocinfo DB 01H
__0E648B51_xlocale DB 01H
__1597A171_xiosbase DB 01H
__90E3ED46_xlocnum DB 01H
__165C22CB_ios DB 01H
__22687C2D_xlocmes DB 01H
__BB81F87E_xlocmon DB 01H
__8AA3BE86_time@h DB 01H
__886F7F70_xloctime DB 01H
__862FECFA_LP_lab09@cpp DB 01H
__E5C4F40F_locale DB 01H
__7EA464AF_istream DB 01H
__1D745195_ostream DB 01H
__6FFBAAB7_streambuf DB 01H
__528871F3_iterator DB 01H
__3E6EDFAA_iosfwd DB 01H
__CF1C1A3F_utility DB 01H
__38038D2D_xstddef DB 01H
__EE19A480_xatomic@h DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	_wmemcpy
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPA_WPB_W@Z			; std::_Maklocwcs
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	?ivarparm@Varparm@@YAHHZZ			; Varparm::ivarparm
PUBLIC	?shvarparm@Varparm@@YAHFZZ			; Varparm::shvarparm
PUBLIC	?fvarparm@Varparm@@YANMZZ			; Varparm::fvarparm
PUBLIC	?dvarparm@Varparm@@YANNZZ			; Varparm::dvarparm
PUBLIC	?defaultparm@@YAHHHHHHHH@Z			; defaultparm
PUBLIC	_main
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0GI@DEICPIDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA ; `std::_Maklocwcs'::`1'::__LINE__Var
PUBLIC	??_C@_0GI@LHMPPKJI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_0L@CNCIDJHF@?7ivarparm?3@			; `string'
PUBLIC	??_C@_0P@GNJJOJCP@ivarparm?$CI0?$CJ?5?$DN?5@	; `string'
PUBLIC	??_C@_0BB@OBEIADLP@ivarparm?$CI1?04?$CJ?5?$DN?5@ ; `string'
PUBLIC	??_C@_0BL@KOGGLPJK@ivarparm?$CI?51?0?52?0?53?0?57?5?d?$CJ?5?$DN?5@ ; `string'
PUBLIC	??_C@_0BL@BFLOJNJ@ivarparm?$CI6?07?04?06?02?05?03?$CJ?5?$DN?5@ ; `string'
PUBLIC	??_C@_0L@BNKECIFE@?7svarparm?3@			; `string'
PUBLIC	??_C@_0P@EOPEALHG@svarparm?$CI0?$CJ?5?$DN?5@	; `string'
PUBLIC	??_C@_0BB@MEDFEFJL@svarparm?$CI1?04?$CJ?5?$DN?5@ ; `string'
PUBLIC	??_C@_0BK@OBJFPCFE@svarparm?$CI?51?0?52?0?53?0?57?5?$CJ?5?$DN?5@ ; `string'
PUBLIC	??_C@_0BL@EALFKCIE@svarparm?$CI6?07?04?06?02?05?03?$CJ?5?$DN?5@ ; `string'
PUBLIC	??_C@_0L@NMCDGCPI@?7fvarparm?3@			; `string'
PUBLIC	??_C@_0BF@OEDEAIIH@fvarparm?$CIFLT_MAX?$CJ?5?$DN?5@ ; `string'
PUBLIC	??_C@_0BK@KCKBNEAG@fvarparm?$CI5?43?0?5FLT_MAX?$CJ?5?$DN?5@ ; `string'
PUBLIC	??_C@_0CD@JKKOGGM@fvarparm?$CI?51?0?52?0?53?0?57?5?0?5FLT_MAX?$CJ@ ; `string'
PUBLIC	??_C@_0DD@EGEAMAFK@fvarparm?$CI6?41?0?57?40?0?54?47?0?56?42?0?52?4@ ; `string'
PUBLIC	??_C@_0L@NINGLCMF@?7dvarparm?3@			; `string'
PUBLIC	??_C@_0BF@IKMEHNHP@dvarparm?$CIDBL_MAX?$CJ?5?$DN?5@ ; `string'
PUBLIC	??_C@_0BK@DNNPOLOM@dvarparm?$CI5?43?0?5DBL_MAX?$CJ?5?$DN?5@ ; `string'
PUBLIC	??_C@_0CD@FAHIEAAO@dvarparm?5?$CI1?0?52?0?53?0?57?5?0?5DBL_MAX?$CJ@ ; `string'
PUBLIC	??_C@_0DD@IDHIFFLI@dvarparm?$CI6?41?0?57?40?0?54?47?0?56?42?0?52?4@ ; `string'
PUBLIC	??_C@_08GJILBCPM@cdevl?5?$DN?5@			; `string'
PUBLIC	??_C@_07PMDNCOHN@cstd?5?$DN?5@			; `string'
PUBLIC	??_C@_07LEDODKCO@cfst?5?$DN?5@			; `string'
PUBLIC	??_C@_0BB@CLCKBJMK@5?5param?5?$CI1?9?95?$CJ?3?5@ ; `string'
PUBLIC	??_C@_0BB@IFNGNKGN@7?5param?5?$CI1?9?97?$CJ?3?5@ ; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4000cccccccccccd
PUBLIC	__real@4008000000000000
PUBLIC	__real@4012cccccccccccd
PUBLIC	__real@4015333333333333
PUBLIC	__real@4016000000000000
PUBLIC	__real@4018666666666666
PUBLIC	__real@4018cccccccccccd
PUBLIC	__real@401c000000000000
PUBLIC	__real@40a9999a
PUBLIC	__real@40c33333
PUBLIC	__real@47efffffe0000000
PUBLIC	__real@7f7fffff
PUBLIC	__real@7fefffffffffffff
EXTRN	__imp___calloc_dbg:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	_strlen:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	?cdevl@Call@@YAHAAH00@Z:PROC			; Call::cdevl
EXTRN	?cstd@Call@@YGHAAHHH@Z:PROC			; Call::cstd
EXTRN	?cfst@Call@@YIHHHH@Z:PROC			; Call::cfst
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@7fefffffffffffff
CONST	SEGMENT
__real@7fefffffffffffff DQ 07fefffffffffffffr	; 1.79769e+308
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@47efffffe0000000
CONST	SEGMENT
__real@47efffffe0000000 DQ 047efffffe0000000r	; 3.40282e+38
CONST	ENDS
;	COMDAT __real@40c33333
CONST	SEGMENT
__real@40c33333 DD 040c33333r			; 6.1
CONST	ENDS
;	COMDAT __real@40a9999a
CONST	SEGMENT
__real@40a9999a DD 040a9999ar			; 5.3
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT __real@4018cccccccccccd
CONST	SEGMENT
__real@4018cccccccccccd DQ 04018cccccccccccdr	; 6.2
CONST	ENDS
;	COMDAT __real@4018666666666666
CONST	SEGMENT
__real@4018666666666666 DQ 04018666666666666r	; 6.1
CONST	ENDS
;	COMDAT __real@4016000000000000
CONST	SEGMENT
__real@4016000000000000 DQ 04016000000000000r	; 5.5
CONST	ENDS
;	COMDAT __real@4015333333333333
CONST	SEGMENT
__real@4015333333333333 DQ 04015333333333333r	; 5.3
CONST	ENDS
;	COMDAT __real@4012cccccccccccd
CONST	SEGMENT
__real@4012cccccccccccd DQ 04012cccccccccccdr	; 4.7
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000cccccccccccd
CONST	SEGMENT
__real@4000cccccccccccd DQ 04000cccccccccccdr	; 2.1
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IFNGNKGN@7?5param?5?$CI1?9?97?$CJ?3?5@
CONST	SEGMENT
??_C@_0BB@IFNGNKGN@7?5param?5?$CI1?9?97?$CJ?3?5@ DB '7 param (1--7): ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CLCKBJMK@5?5param?5?$CI1?9?95?$CJ?3?5@
CONST	SEGMENT
??_C@_0BB@CLCKBJMK@5?5param?5?$CI1?9?95?$CJ?3?5@ DB '5 param (1--5): ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07LEDODKCO@cfst?5?$DN?5@
CONST	SEGMENT
??_C@_07LEDODKCO@cfst?5?$DN?5@ DB 'cfst = ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PMDNCOHN@cstd?5?$DN?5@
CONST	SEGMENT
??_C@_07PMDNCOHN@cstd?5?$DN?5@ DB 'cstd = ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GJILBCPM@cdevl?5?$DN?5@
CONST	SEGMENT
??_C@_08GJILBCPM@cdevl?5?$DN?5@ DB 'cdevl = ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@IDHIFFLI@dvarparm?$CI6?41?0?57?40?0?54?47?0?56?42?0?52?4@
CONST	SEGMENT
??_C@_0DD@IDHIFFLI@dvarparm?$CI6?41?0?57?40?0?54?47?0?56?42?0?52?4@ DB 'd'
	DB	'varparm(6.1, 7.0, 4.7, 6.2, 2.1, 5.5, DBL_MAX) = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FAHIEAAO@dvarparm?5?$CI1?0?52?0?53?0?57?5?0?5DBL_MAX?$CJ@
CONST	SEGMENT
??_C@_0CD@FAHIEAAO@dvarparm?5?$CI1?0?52?0?53?0?57?5?0?5DBL_MAX?$CJ@ DB 'd'
	DB	'varparm (1, 2, 3, 7 , DBL_MAX) = ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DNNPOLOM@dvarparm?$CI5?43?0?5DBL_MAX?$CJ?5?$DN?5@
CONST	SEGMENT
??_C@_0BK@DNNPOLOM@dvarparm?$CI5?43?0?5DBL_MAX?$CJ?5?$DN?5@ DB 'dvarparm('
	DB	'5.3, DBL_MAX) = ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IKMEHNHP@dvarparm?$CIDBL_MAX?$CJ?5?$DN?5@
CONST	SEGMENT
??_C@_0BF@IKMEHNHP@dvarparm?$CIDBL_MAX?$CJ?5?$DN?5@ DB 'dvarparm(DBL_MAX)'
	DB	' = ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NINGLCMF@?7dvarparm?3@
CONST	SEGMENT
??_C@_0L@NINGLCMF@?7dvarparm?3@ DB 09H, 'dvarparm:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@EGEAMAFK@fvarparm?$CI6?41?0?57?40?0?54?47?0?56?42?0?52?4@
CONST	SEGMENT
??_C@_0DD@EGEAMAFK@fvarparm?$CI6?41?0?57?40?0?54?47?0?56?42?0?52?4@ DB 'f'
	DB	'varparm(6.1, 7.0, 4.7, 6.2, 2.1, 5.5, FLT_MAX) = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JKKOGGM@fvarparm?$CI?51?0?52?0?53?0?57?5?0?5FLT_MAX?$CJ@
CONST	SEGMENT
??_C@_0CD@JKKOGGM@fvarparm?$CI?51?0?52?0?53?0?57?5?0?5FLT_MAX?$CJ@ DB 'fv'
	DB	'arparm( 1, 2, 3, 7 , FLT_MAX) = ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KCKBNEAG@fvarparm?$CI5?43?0?5FLT_MAX?$CJ?5?$DN?5@
CONST	SEGMENT
??_C@_0BK@KCKBNEAG@fvarparm?$CI5?43?0?5FLT_MAX?$CJ?5?$DN?5@ DB 'fvarparm('
	DB	'5.3, FLT_MAX) = ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OEDEAIIH@fvarparm?$CIFLT_MAX?$CJ?5?$DN?5@
CONST	SEGMENT
??_C@_0BF@OEDEAIIH@fvarparm?$CIFLT_MAX?$CJ?5?$DN?5@ DB 'fvarparm(FLT_MAX)'
	DB	' = ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NMCDGCPI@?7fvarparm?3@
CONST	SEGMENT
??_C@_0L@NMCDGCPI@?7fvarparm?3@ DB 09H, 'fvarparm:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EALFKCIE@svarparm?$CI6?07?04?06?02?05?03?$CJ?5?$DN?5@
CONST	SEGMENT
??_C@_0BL@EALFKCIE@svarparm?$CI6?07?04?06?02?05?03?$CJ?5?$DN?5@ DB 'svarp'
	DB	'arm(6,7,4,6,2,5,3) = ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OBJFPCFE@svarparm?$CI?51?0?52?0?53?0?57?5?$CJ?5?$DN?5@
CONST	SEGMENT
??_C@_0BK@OBJFPCFE@svarparm?$CI?51?0?52?0?53?0?57?5?$CJ?5?$DN?5@ DB 'svar'
	DB	'parm( 1, 2, 3, 7 ) = ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MEDFEFJL@svarparm?$CI1?04?$CJ?5?$DN?5@
CONST	SEGMENT
??_C@_0BB@MEDFEFJL@svarparm?$CI1?04?$CJ?5?$DN?5@ DB 'svarparm(1,4) = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EOPEALHG@svarparm?$CI0?$CJ?5?$DN?5@
CONST	SEGMENT
??_C@_0P@EOPEALHG@svarparm?$CI0?$CJ?5?$DN?5@ DB 'svarparm(0) = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BNKECIFE@?7svarparm?3@
CONST	SEGMENT
??_C@_0L@BNKECIFE@?7svarparm?3@ DB 09H, 'svarparm:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BFLOJNJ@ivarparm?$CI6?07?04?06?02?05?03?$CJ?5?$DN?5@
CONST	SEGMENT
??_C@_0BL@BFLOJNJ@ivarparm?$CI6?07?04?06?02?05?03?$CJ?5?$DN?5@ DB 'ivarpa'
	DB	'rm(6,7,4,6,2,5,3) = ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KOGGLPJK@ivarparm?$CI?51?0?52?0?53?0?57?5?d?$CJ?5?$DN?5@
CONST	SEGMENT
??_C@_0BL@KOGGLPJK@ivarparm?$CI?51?0?52?0?53?0?57?5?d?$CJ?5?$DN?5@ DB 'iv'
	DB	'arparm( 1, 2, 3, 7 ', 0e4H, ') = ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OBEIADLP@ivarparm?$CI1?04?$CJ?5?$DN?5@
CONST	SEGMENT
??_C@_0BB@OBEIADLP@ivarparm?$CI1?04?$CJ?5?$DN?5@ DB 'ivarparm(1,4) = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GNJJOJCP@ivarparm?$CI0?$CJ?5?$DN?5@
CONST	SEGMENT
??_C@_0P@GNJJOJCP@ivarparm?$CI0?$CJ?5?$DN?5@ DB 'ivarparm(0) = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CNCIDJHF@?7ivarparm?3@
CONST	SEGMENT
??_C@_0L@CNCIDJHF@?7ivarparm?3@ DB 09H, 'ivarparm:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@LHMPPKJI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@LHMPPKJI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.27.29110\include\xlocnum', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA DD 05aH ; `std::_Maklocwcs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GI@DEICPIDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@DEICPIDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.27.29110\include\xlocale', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 125  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 126  :             return _Ok;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 127  :         }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -229						; size = 1
__Zero_uncaught_exceptions$ = -29			; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 110  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00021	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 111  : #if !_HAS_EXCEPTIONS
; 112  :             const bool _Zero_uncaught_exceptions = true;
; 113  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 114  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  0004c	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	75 09		 jne	 SHORT $LN4@sentry
  00058	c6 85 1b ff ff
	ff 01		 mov	 BYTE PTR tv72[ebp], 1
  0005f	eb 07		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  00061	c6 85 1b ff ff
	ff 00		 mov	 BYTE PTR tv72[ebp], 0
$LN5@sentry:
  00068	8a 8d 1b ff ff
	ff		 mov	 cl, BYTE PTR tv72[ebp]
  0006e	88 4d e3	 mov	 BYTE PTR __Zero_uncaught_exceptions$[ebp], cl

; 115  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 116  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 117  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 118  : 
; 119  :             if (_Zero_uncaught_exceptions) {

  00071	0f b6 45 e3	 movzx	 eax, BYTE PTR __Zero_uncaught_exceptions$[ebp]
  00075	85 c0		 test	 eax, eax
  00077	74 14		 je	 SHORT $LN1@sentry

; 120  :                 this->_Myostr._Osfx();

  00079	8b f4		 mov	 esi, esp
  0007b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 121  :             }
; 122  :         }

  0008d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00095	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00098	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009f	59		 pop	 ecx
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
  000a3	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a9	3b ec		 cmp	 ebp, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
  000b4	cc		 int	 3
  000b5	cc		 int	 3
  000b6	cc		 int	 3
  000b7	cc		 int	 3
  000b8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Tied$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0004c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 93   :             if (!_Ostr.good()) {

  0005f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00067	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0006a	8b f4		 mov	 esi, esp
  0006c	8b ca		 mov	 ecx, edx
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	0f b6 c0	 movzx	 eax, al
  0007e	85 c0		 test	 eax, eax
  00080	75 09		 jne	 SHORT $LN2@sentry

; 94   :                 _Ok = false;

  00082	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00085	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 95   :                 return;

  00089	eb 6a		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 96   :             }
; 97   : 
; 98   :             const auto _Tied = _Ostr.tie();

  0008b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0008e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00090	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00093	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00096	8b f4		 mov	 esi, esp
  00098	8b ca		 mov	 ecx, edx
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	89 45 e0	 mov	 DWORD PTR __Tied$[ebp], eax

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  000aa	83 7d e0 00	 cmp	 DWORD PTR __Tied$[ebp], 0
  000ae	74 08		 je	 SHORT $LN4@sentry
  000b0	8b 45 e0	 mov	 eax, DWORD PTR __Tied$[ebp]
  000b3	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b6	75 09		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

  000b8	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 101  :                 return;

  000bf	eb 34		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 102  :             }
; 103  : 
; 104  : 
; 105  :             _Tied->flush();

  000c1	8b f4		 mov	 esi, esp
  000c3	8b 4d e0	 mov	 ecx, DWORD PTR __Tied$[ebp]
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000cc	3b f4		 cmp	 esi, esp
  000ce	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 106  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000d3	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d8	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000db	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000de	8b f4		 mov	 esi, esp
  000e0	8b ca		 mov	 ecx, edx
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000e8	3b f4		 cmp	 esi, esp
  000ea	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ef	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f2	88 41 04	 mov	 BYTE PTR [ecx+4], al
$LN1@sentry:

; 107  :         }

  000f5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000fc	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00102	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00109	59		 pop	 ecx
  0010a	5f		 pop	 edi
  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx
  0010d	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00113	3b ec		 cmp	 ebp, esp
  00115	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -232						; size = 4
__Rdbuf$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00021	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  0004c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00057	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00065	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00068	8b f4		 mov	 esi, esp
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00070	3b f4		 cmp	 esi, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	89 45 e0	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 80   :             if (_Rdbuf) {

  0007a	83 7d e0 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  0007e	74 16		 je	 SHORT $LN3@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

  00080	8b 45 e0	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00083	8b 10		 mov	 edx, DWORD PTR [eax]
  00085	8b f4		 mov	 esi, esp
  00087	8b 4d e0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  0008a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008d	ff d0		 call	 eax
  0008f	3b f4		 cmp	 esi, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 82   :             }
; 83   :         }

  00096	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00099	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a0	59		 pop	 ecx
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000aa	3b ec		 cmp	 ebp, esp
  000ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
  000b5	cc		 int	 3
  000b6	cc		 int	 3
  000b7	cc		 int	 3
  000b8	cc		 int	 3
  000b9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Rdbuf$ = -20						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00040	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00046	8b 02		 mov	 eax, DWORD PTR [edx]
  00048	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0004e	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00051	8b f4		 mov	 esi, esp
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	89 45 ec	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 73   :             if (_Rdbuf) {

  00063	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00067	74 16		 je	 SHORT $LN1@Sentry_bas

; 74   :                 _Rdbuf->_Lock();

  00069	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  0006c	8b 10		 mov	 edx, DWORD PTR [eax]
  0006e	8b f4		 mov	 esi, esp
  00070	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00073	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00076	ff d0		 call	 eax
  00078	3b f4		 cmp	 esi, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 75   :             }
; 76   :         }

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 981  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 982  :     _Ostr.put(_Ostr.widen('\n'));

  00028	8b f4		 mov	 esi, esp
  0002a	6a 0a		 push	 10			; 0000000aH
  0002c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00034	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00037	8b ca		 mov	 ecx, edx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b f4		 mov	 esi, esp
  00048	0f b6 c0	 movzx	 eax, al
  0004b	50		 push	 eax
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 983  :     _Ostr.flush();

  0005c	8b f4		 mov	 esi, esp
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 984  :     return _Ostr;

  0006e	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 985  : }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv343 = -348						; size = 8
tv291 = -344						; size = 4
tv288 = -344						; size = 8
tv286 = -344						; size = 4
tv329 = -340						; size = 8
tv290 = -340						; size = 4
tv285 = -340						; size = 4
tv287 = -336						; size = 4
tv137 = -336						; size = 4
tv289 = -333						; size = 1
tv284 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 735  :     const char* _Val) { // insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 9c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-356]
  00021	b9 55 00 00 00	 mov	 ecx, 85			; 00000055H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __1D745195_ostream
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 736  :     using _Elem = char;
; 737  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 738  : 
; 739  :     ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 740  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00055	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  0005e	83 c4 04	 add	 esp, 4
  00061	33 c9		 xor	 ecx, ecx
  00063	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00066	89 4d d8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 741  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00069	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00071	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00074	8b f4		 mov	 esi, esp
  00076	8b ca		 mov	 ecx, edx
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv329[ebp], eax
  0008b	89 95 b0 fe ff
	ff		 mov	 DWORD PTR tv329[ebp+4], edx
  00091	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp+4], 0
  00098	7c 79		 jl	 SHORT $LN17@operator
  0009a	7f 09		 jg	 SHORT $LN24@operator
  0009c	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp], 0
  000a3	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  000a5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000aa	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ad	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000b0	8b f4		 mov	 esi, esp
  000b2	8b ca		 mov	 ecx, edx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv343[ebp], eax
  000c7	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv343[ebp+4], edx
  000cd	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv343[ebp+4]
  000d3	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000d6	7c 3b		 jl	 SHORT $LN17@operator
  000d8	7f 0b		 jg	 SHORT $LN25@operator
  000da	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv343[ebp]
  000e0	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000e3	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000e5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000e8	8b 02		 mov	 eax, DWORD PTR [edx]
  000ea	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000ed	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000f0	8b f4		 mov	 esi, esp
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ff	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  00102	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  00105	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  0010b	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  00111	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00113	0f 57 c0	 xorps	 xmm0, xmm0
  00116	66 0f 13 85 9c
	fe ff ff	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  0011e	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  00124	89 4d c4	 mov	 DWORD PTR __Pad$[ebp], ecx
  00127	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  0012d	89 55 c8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 742  :     const typename _Myos::sentry _Ok(_Ostr);

  00130	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00133	50		 push	 eax
  00134	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00137	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0013c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 743  : 
; 744  :     if (!_Ok) {

  00143	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00146	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0014b	0f b6 c0	 movzx	 eax, al
  0014e	85 c0		 test	 eax, eax
  00150	75 0e		 jne	 SHORT $LN8@operator

; 745  :         _State |= ios_base::badbit;

  00152	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00155	83 c8 04	 or	 eax, 4
  00158	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 746  :     } else { // state okay, insert

  0015b	e9 ba 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 747  :         _TRY_IO_BEGIN

  00160	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 748  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00164	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00167	8b 08		 mov	 ecx, DWORD PTR [eax]
  00169	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0016c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0016f	8b f4		 mov	 esi, esp
  00171	8b ca		 mov	 ecx, edx
  00173	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00179	3b f4		 cmp	 esi, esp
  0017b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00180	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  00186	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  0018c	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00191	83 f8 40	 cmp	 eax, 64			; 00000040H
  00194	0f 84 d5 00 00
	00		 je	 $LN11@operator

; 749  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0019a	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0019c	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  0019f	83 e8 01	 sub	 eax, 1
  001a2	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  001a5	83 d9 00	 sbb	 ecx, 0
  001a8	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  001ab	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  001ae	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001b2	0f 8c b7 00 00
	00		 jl	 $LN11@operator
  001b8	7f 0a		 jg	 SHORT $LN26@operator
  001ba	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001be	0f 86 ab 00 00
	00		 jbe	 $LN11@operator
$LN26@operator:

; 750  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  001c4	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001cc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001cf	8b f4		 mov	 esi, esp
  001d1	8b ca		 mov	 ecx, edx
  001d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001d9	3b f4		 cmp	 esi, esp
  001db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e0	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv284[ebp], al
  001e6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001eb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001ee	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001f1	8b f4		 mov	 esi, esp
  001f3	8b ca		 mov	 ecx, edx
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001fb	3b f4		 cmp	 esi, esp
  001fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00202	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00208	8b f4		 mov	 esi, esp
  0020a	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv284[ebp]
  00211	50		 push	 eax
  00212	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  00218	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0021e	3b f4		 cmp	 esi, esp
  00220	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00225	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  0022b	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  00231	89 8d e8 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  00237	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0023c	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00242	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00248	52		 push	 edx
  00249	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0024f	50		 push	 eax
  00250	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00255	83 c4 08	 add	 esp, 8
  00258	0f b6 c8	 movzx	 ecx, al
  0025b	85 c9		 test	 ecx, ecx
  0025d	74 0b		 je	 SHORT $LN12@operator

; 751  :                     _State |= ios_base::badbit; // insertion failed, quit

  0025f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00262	83 c8 04	 or	 eax, 4
  00265	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 752  :                     break;

  00268	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 753  :                 }
; 754  :             }

  0026a	e9 2d ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 755  :         }
; 756  : 
; 757  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0026f	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00273	75 6e		 jne	 SHORT $LN13@operator
  00275	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00278	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0027d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00280	8b f4		 mov	 esi, esp
  00282	8b ca		 mov	 ecx, edx
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0028a	3b f4		 cmp	 esi, esp
  0028c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00291	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  00297	8b f4		 mov	 esi, esp
  00299	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0029c	50		 push	 eax
  0029d	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  002a0	51		 push	 ecx
  002a1	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  002a4	52		 push	 edx
  002a5	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp]
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  002b1	3b f4		 cmp	 esi, esp
  002b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b8	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv288[ebp], eax
  002be	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv288[ebp+4], edx
  002c4	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv288[ebp]
  002ca	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  002cd	75 0b		 jne	 SHORT $LN27@operator
  002cf	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv288[ebp+4]
  002d5	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  002d8	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 758  :             _State |= ios_base::badbit;

  002da	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  002dd	83 c8 04	 or	 eax, 4
  002e0	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 759  :         }
; 760  : 
; 761  :         if (_State == ios_base::goodbit) {

  002e3	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002e7	0f 85 d5 00 00
	00		 jne	 $LN14@operator

; 762  :             for (; 0 < _Pad; --_Pad) { // pad on right

  002ed	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002ef	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  002f2	83 e8 01	 sub	 eax, 1
  002f5	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002f8	83 d9 00	 sbb	 ecx, 0
  002fb	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  002fe	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  00301	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  00305	0f 8c b7 00 00
	00		 jl	 $LN14@operator
  0030b	7f 0a		 jg	 SHORT $LN28@operator
  0030d	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00311	0f 86 ab 00 00
	00		 jbe	 $LN14@operator
$LN28@operator:

; 763  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00317	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0031a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0031f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00322	8b f4		 mov	 esi, esp
  00324	8b ca		 mov	 ecx, edx
  00326	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  0032c	3b f4		 cmp	 esi, esp
  0032e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00333	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv289[ebp], al
  00339	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0033c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00341	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00344	8b f4		 mov	 esi, esp
  00346	8b ca		 mov	 ecx, edx
  00348	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0034e	3b f4		 cmp	 esi, esp
  00350	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00355	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  0035b	8b f4		 mov	 esi, esp
  0035d	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv289[ebp]
  00364	50		 push	 eax
  00365	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  0036b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00371	3b f4		 cmp	 esi, esp
  00373	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00378	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv291[ebp], eax
  0037e	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv291[ebp]
  00384	89 8d d0 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  0038a	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0038f	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00395	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0039b	52		 push	 edx
  0039c	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  003a2	50		 push	 eax
  003a3	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  003a8	83 c4 08	 add	 esp, 8
  003ab	0f b6 c8	 movzx	 ecx, al
  003ae	85 c9		 test	 ecx, ecx
  003b0	74 0b		 je	 SHORT $LN15@operator

; 764  :                     _State |= ios_base::badbit; // insertion failed, quit

  003b2	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003b5	83 c8 04	 or	 eax, 4
  003b8	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 765  :                     break;

  003bb	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 766  :                 }
; 767  :             }

  003bd	e9 2d ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 768  :         }
; 769  : 
; 770  :         _Ostr.width(0);

  003c2	8b f4		 mov	 esi, esp
  003c4	6a 00		 push	 0
  003c6	6a 00		 push	 0
  003c8	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  003cd	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003d0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003d3	8b ca		 mov	 ecx, edx
  003d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003db	3b f4		 cmp	 esi, esp
  003dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003e2	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 771  :         _CATCH_IO_(ios_base, _Ostr)

  003e4	8b f4		 mov	 esi, esp
  003e6	6a 01		 push	 1
  003e8	6a 04		 push	 4
  003ea	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ef	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003f2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003f5	8b ca		 mov	 ecx, edx
  003f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003fd	3b f4		 cmp	 esi, esp
  003ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00404	b8 00 00 00 00	 mov	 eax, $LN23@operator
  00409	c3		 ret	 0
$LN19@operator:
  0040a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00411	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00413	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 772  :     }
; 773  : 
; 774  :     _Ostr.setstate(_State);

  0041a	8b f4		 mov	 esi, esp
  0041c	6a 00		 push	 0
  0041e	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00421	50		 push	 eax
  00422	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00425	8b 11		 mov	 edx, DWORD PTR [ecx]
  00427	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0042a	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0042d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00433	3b f4		 cmp	 esi, esp
  00435	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 775  :     return _Ostr;

  0043a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0043d	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00443	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0044a	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0044d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00452	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 776  : }

  00458	52		 push	 edx
  00459	8b cd		 mov	 ecx, ebp
  0045b	50		 push	 eax
  0045c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  00462	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00467	58		 pop	 eax
  00468	5a		 pop	 edx
  00469	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0046c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00473	59		 pop	 ecx
  00474	5f		 pop	 edi
  00475	5e		 pop	 esi
  00476	5b		 pop	 ebx
  00477	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0047a	33 cd		 xor	 ecx, ebp
  0047c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00481	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  00487	3b ec		 cmp	 ebp, esp
  00489	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0048e	8b e5		 mov	 esp, ebp
  00490	5d		 pop	 ebp
  00491	c3		 ret	 0
  00492	66 90		 npad	 2
$LN32@operator:
  00494	01 00 00 00	 DD	 1
  00498	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  0049c	b4 ff ff ff	 DD	 -76			; ffffffb4H
  004a0	08 00 00 00	 DD	 8
  004a4	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  004a8	5f		 DB	 95			; 0000005fH
  004a9	4f		 DB	 79			; 0000004fH
  004aa	6b		 DB	 107			; 0000006bH
  004ab	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab09\LP_lab09\LP_lab09.cpp
;	COMDAT _main
_TEXT	SEGMENT
_c$ = -36						; size = 4
_b$ = -24						; size = 4
_a$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 11   : int main() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __862FECFA_LP_lab09@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 12   : 	cout << "\tivarparm:" << endl;

  00032	8b f4		 mov	 esi, esp
  00034	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CNCIDJHF@?7ivarparm?3@
  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00049	83 c4 08	 add	 esp, 8
  0004c	8b c8		 mov	 ecx, eax
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00054	3b f4		 cmp	 esi, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 13   : 	cout << "ivarparm(0) = " << ivarparm(0) << endl;

  0005b	8b f4		 mov	 esi, esp
  0005d	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00062	6a 00		 push	 0
  00064	e8 00 00 00 00	 call	 ?ivarparm@Varparm@@YAHHZZ ; Varparm::ivarparm
  00069	83 c4 04	 add	 esp, 4
  0006c	8b fc		 mov	 edi, esp
  0006e	50		 push	 eax
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GNJJOJCP@ivarparm?$CI0?$CJ?5?$DN?5@
  00074	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0007f	83 c4 08	 add	 esp, 8
  00082	8b c8		 mov	 ecx, eax
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0008a	3b fc		 cmp	 edi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8b c8		 mov	 ecx, eax
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00099	3b f4		 cmp	 esi, esp
  0009b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 14   : 	cout << "ivarparm(1,4) = " << ivarparm(1, 4) << endl;

  000a0	8b f4		 mov	 esi, esp
  000a2	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000a7	6a 04		 push	 4
  000a9	6a 01		 push	 1
  000ab	e8 00 00 00 00	 call	 ?ivarparm@Varparm@@YAHHZZ ; Varparm::ivarparm
  000b0	83 c4 08	 add	 esp, 8
  000b3	8b fc		 mov	 edi, esp
  000b5	50		 push	 eax
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@OBEIADLP@ivarparm?$CI1?04?$CJ?5?$DN?5@
  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000c6	83 c4 08	 add	 esp, 8
  000c9	8b c8		 mov	 ecx, eax
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  000d1	3b fc		 cmp	 edi, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	8b c8		 mov	 ecx, eax
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000e0	3b f4		 cmp	 esi, esp
  000e2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 15   : 	cout << "ivarparm( 1, 2, 3, 7 –і) = " << ivarparm(1, 2, 3, 7 ) << endl;

  000e7	8b f4		 mov	 esi, esp
  000e9	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000ee	6a 07		 push	 7
  000f0	6a 03		 push	 3
  000f2	6a 02		 push	 2
  000f4	6a 01		 push	 1
  000f6	e8 00 00 00 00	 call	 ?ivarparm@Varparm@@YAHHZZ ; Varparm::ivarparm
  000fb	83 c4 10	 add	 esp, 16			; 00000010H
  000fe	8b fc		 mov	 edi, esp
  00100	50		 push	 eax
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@KOGGLPJK@ivarparm?$CI?51?0?52?0?53?0?57?5?d?$CJ?5?$DN?5@
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00111	83 c4 08	 add	 esp, 8
  00114	8b c8		 mov	 ecx, eax
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0011c	3b fc		 cmp	 edi, esp
  0011e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00123	8b c8		 mov	 ecx, eax
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0012b	3b f4		 cmp	 esi, esp
  0012d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 16   : 	cout << "ivarparm(6,7,4,6,2,5,3) = " << ivarparm(6, 7, 4, 6, 2, 5, 3) << endl;

  00132	8b f4		 mov	 esi, esp
  00134	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00139	6a 03		 push	 3
  0013b	6a 05		 push	 5
  0013d	6a 02		 push	 2
  0013f	6a 06		 push	 6
  00141	6a 04		 push	 4
  00143	6a 07		 push	 7
  00145	6a 06		 push	 6
  00147	e8 00 00 00 00	 call	 ?ivarparm@Varparm@@YAHHZZ ; Varparm::ivarparm
  0014c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0014f	8b fc		 mov	 edi, esp
  00151	50		 push	 eax
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BFLOJNJ@ivarparm?$CI6?07?04?06?02?05?03?$CJ?5?$DN?5@
  00157	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00162	83 c4 08	 add	 esp, 8
  00165	8b c8		 mov	 ecx, eax
  00167	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0016d	3b fc		 cmp	 edi, esp
  0016f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00174	8b c8		 mov	 ecx, eax
  00176	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0017c	3b f4		 cmp	 esi, esp
  0017e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 17   : 
; 18   : 	cout << "\tsvarparm:" << endl;

  00183	8b f4		 mov	 esi, esp
  00185	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BNKECIFE@?7svarparm?3@
  0018f	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0019a	83 c4 08	 add	 esp, 8
  0019d	8b c8		 mov	 ecx, eax
  0019f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  001a5	3b f4		 cmp	 esi, esp
  001a7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 19   : 	cout << "svarparm(0) = " << shvarparm(0) << endl;

  001ac	8b f4		 mov	 esi, esp
  001ae	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001b3	6a 00		 push	 0
  001b5	e8 00 00 00 00	 call	 ?shvarparm@Varparm@@YAHFZZ ; Varparm::shvarparm
  001ba	83 c4 04	 add	 esp, 4
  001bd	8b fc		 mov	 edi, esp
  001bf	50		 push	 eax
  001c0	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EOPEALHG@svarparm?$CI0?$CJ?5?$DN?5@
  001c5	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001ca	50		 push	 eax
  001cb	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001d0	83 c4 08	 add	 esp, 8
  001d3	8b c8		 mov	 ecx, eax
  001d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  001db	3b fc		 cmp	 edi, esp
  001dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e2	8b c8		 mov	 ecx, eax
  001e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  001ea	3b f4		 cmp	 esi, esp
  001ec	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 20   : 	cout << "svarparm(1,4) = " << shvarparm(1, 4) << endl;

  001f1	8b f4		 mov	 esi, esp
  001f3	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001f8	6a 04		 push	 4
  001fa	6a 01		 push	 1
  001fc	e8 00 00 00 00	 call	 ?shvarparm@Varparm@@YAHFZZ ; Varparm::shvarparm
  00201	83 c4 08	 add	 esp, 8
  00204	8b fc		 mov	 edi, esp
  00206	50		 push	 eax
  00207	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MEDFEFJL@svarparm?$CI1?04?$CJ?5?$DN?5@
  0020c	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00211	50		 push	 eax
  00212	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00217	83 c4 08	 add	 esp, 8
  0021a	8b c8		 mov	 ecx, eax
  0021c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00222	3b fc		 cmp	 edi, esp
  00224	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00229	8b c8		 mov	 ecx, eax
  0022b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00231	3b f4		 cmp	 esi, esp
  00233	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 21   : 	cout << "svarparm( 1, 2, 3, 7 ) = " << shvarparm(1, 2, 3, 7 ) << endl;

  00238	8b f4		 mov	 esi, esp
  0023a	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0023f	6a 07		 push	 7
  00241	6a 03		 push	 3
  00243	6a 02		 push	 2
  00245	6a 01		 push	 1
  00247	e8 00 00 00 00	 call	 ?shvarparm@Varparm@@YAHFZZ ; Varparm::shvarparm
  0024c	83 c4 10	 add	 esp, 16			; 00000010H
  0024f	8b fc		 mov	 edi, esp
  00251	50		 push	 eax
  00252	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@OBJFPCFE@svarparm?$CI?51?0?52?0?53?0?57?5?$CJ?5?$DN?5@
  00257	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0025c	50		 push	 eax
  0025d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00262	83 c4 08	 add	 esp, 8
  00265	8b c8		 mov	 ecx, eax
  00267	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0026d	3b fc		 cmp	 edi, esp
  0026f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00274	8b c8		 mov	 ecx, eax
  00276	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0027c	3b f4		 cmp	 esi, esp
  0027e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 22   : 	cout << "svarparm(6,7,4,6,2,5,3) = " << shvarparm(6, 7, 4, 6, 2, 5, 3) << endl;

  00283	8b f4		 mov	 esi, esp
  00285	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0028a	6a 03		 push	 3
  0028c	6a 05		 push	 5
  0028e	6a 02		 push	 2
  00290	6a 06		 push	 6
  00292	6a 04		 push	 4
  00294	6a 07		 push	 7
  00296	6a 06		 push	 6
  00298	e8 00 00 00 00	 call	 ?shvarparm@Varparm@@YAHFZZ ; Varparm::shvarparm
  0029d	83 c4 1c	 add	 esp, 28			; 0000001cH
  002a0	8b fc		 mov	 edi, esp
  002a2	50		 push	 eax
  002a3	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@EALFKCIE@svarparm?$CI6?07?04?06?02?05?03?$CJ?5?$DN?5@
  002a8	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002ad	50		 push	 eax
  002ae	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002b3	83 c4 08	 add	 esp, 8
  002b6	8b c8		 mov	 ecx, eax
  002b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  002be	3b fc		 cmp	 edi, esp
  002c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002c5	8b c8		 mov	 ecx, eax
  002c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  002cd	3b f4		 cmp	 esi, esp
  002cf	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 23   : 
; 24   : 	cout << "\tfvarparm:" << endl;

  002d4	8b f4		 mov	 esi, esp
  002d6	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  002db	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NMCDGCPI@?7fvarparm?3@
  002e0	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002e5	50		 push	 eax
  002e6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002eb	83 c4 08	 add	 esp, 8
  002ee	8b c8		 mov	 ecx, eax
  002f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  002f6	3b f4		 cmp	 esi, esp
  002f8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 25   : 	cout << "fvarparm(FLT_MAX) = " << fvarparm(FLT_MAX) << endl;		

  002fd	8b f4		 mov	 esi, esp
  002ff	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00304	51		 push	 ecx
  00305	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  0030d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00312	e8 00 00 00 00	 call	 ?fvarparm@Varparm@@YANMZZ ; Varparm::fvarparm
  00317	83 c4 04	 add	 esp, 4
  0031a	8b fc		 mov	 edi, esp
  0031c	83 ec 08	 sub	 esp, 8
  0031f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00322	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OEDEAIIH@fvarparm?$CIFLT_MAX?$CJ?5?$DN?5@
  00327	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0032c	50		 push	 eax
  0032d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00332	83 c4 08	 add	 esp, 8
  00335	8b c8		 mov	 ecx, eax
  00337	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
  0033d	3b fc		 cmp	 edi, esp
  0033f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00344	8b c8		 mov	 ecx, eax
  00346	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0034c	3b f4		 cmp	 esi, esp
  0034e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 26   : 	cout << "fvarparm(5.3, FLT_MAX) = " << fvarparm(5.3, FLT_MAX) << endl;

  00353	8b f4		 mov	 esi, esp
  00355	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0035a	83 ec 08	 sub	 esp, 8
  0035d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@47efffffe0000000
  00365	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0036a	51		 push	 ecx
  0036b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a9999a
  00373	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00378	e8 00 00 00 00	 call	 ?fvarparm@Varparm@@YANMZZ ; Varparm::fvarparm
  0037d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00380	8b fc		 mov	 edi, esp
  00382	83 ec 08	 sub	 esp, 8
  00385	dd 1c 24	 fstp	 QWORD PTR [esp]
  00388	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@KCKBNEAG@fvarparm?$CI5?43?0?5FLT_MAX?$CJ?5?$DN?5@
  0038d	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00392	50		 push	 eax
  00393	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00398	83 c4 08	 add	 esp, 8
  0039b	8b c8		 mov	 ecx, eax
  0039d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
  003a3	3b fc		 cmp	 edi, esp
  003a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003aa	8b c8		 mov	 ecx, eax
  003ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  003b2	3b f4		 cmp	 esi, esp
  003b4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 27   : 	cout << "fvarparm( 1, 2, 3, 7 , FLT_MAX) = " << fvarparm(1.0, 2.0, 3.0, 7.0, FLT_MAX) << endl;

  003b9	8b f4		 mov	 esi, esp
  003bb	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  003c0	83 ec 08	 sub	 esp, 8
  003c3	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@47efffffe0000000
  003cb	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003d0	83 ec 08	 sub	 esp, 8
  003d3	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@401c000000000000
  003db	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003e0	83 ec 08	 sub	 esp, 8
  003e3	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4008000000000000
  003eb	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003f0	83 ec 08	 sub	 esp, 8
  003f3	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4000000000000000
  003fb	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00400	51		 push	 ecx
  00401	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00409	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040e	e8 00 00 00 00	 call	 ?fvarparm@Varparm@@YANMZZ ; Varparm::fvarparm
  00413	83 c4 24	 add	 esp, 36			; 00000024H
  00416	8b fc		 mov	 edi, esp
  00418	83 ec 08	 sub	 esp, 8
  0041b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0041e	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JKKOGGM@fvarparm?$CI?51?0?52?0?53?0?57?5?0?5FLT_MAX?$CJ@
  00423	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00428	50		 push	 eax
  00429	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0042e	83 c4 08	 add	 esp, 8
  00431	8b c8		 mov	 ecx, eax
  00433	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
  00439	3b fc		 cmp	 edi, esp
  0043b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00440	8b c8		 mov	 ecx, eax
  00442	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00448	3b f4		 cmp	 esi, esp
  0044a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 28   : 	cout << "fvarparm(6.1, 7.0, 4.7, 6.2, 2.1, 5.5, FLT_MAX) = " << fvarparm(6.1, 7.0, 4.7, 6.2, 2.1, 5.5, FLT_MAX) << endl;

  0044f	8b f4		 mov	 esi, esp
  00451	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00456	83 ec 08	 sub	 esp, 8
  00459	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@47efffffe0000000
  00461	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00466	83 ec 08	 sub	 esp, 8
  00469	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4016000000000000
  00471	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00476	83 ec 08	 sub	 esp, 8
  00479	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4000cccccccccccd
  00481	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00486	83 ec 08	 sub	 esp, 8
  00489	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4018cccccccccccd
  00491	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00496	83 ec 08	 sub	 esp, 8
  00499	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4012cccccccccccd
  004a1	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004a6	83 ec 08	 sub	 esp, 8
  004a9	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@401c000000000000
  004b1	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004b6	51		 push	 ecx
  004b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c33333
  004bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c4	e8 00 00 00 00	 call	 ?fvarparm@Varparm@@YANMZZ ; Varparm::fvarparm
  004c9	83 c4 34	 add	 esp, 52			; 00000034H
  004cc	8b fc		 mov	 edi, esp
  004ce	83 ec 08	 sub	 esp, 8
  004d1	dd 1c 24	 fstp	 QWORD PTR [esp]
  004d4	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@EGEAMAFK@fvarparm?$CI6?41?0?57?40?0?54?47?0?56?42?0?52?4@
  004d9	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  004de	50		 push	 eax
  004df	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  004e4	83 c4 08	 add	 esp, 8
  004e7	8b c8		 mov	 ecx, eax
  004e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
  004ef	3b fc		 cmp	 edi, esp
  004f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004f6	8b c8		 mov	 ecx, eax
  004f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  004fe	3b f4		 cmp	 esi, esp
  00500	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 29   : 
; 30   : 	cout << "\tdvarparm:" << endl;

  00505	8b f4		 mov	 esi, esp
  00507	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0050c	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NINGLCMF@?7dvarparm?3@
  00511	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00516	50		 push	 eax
  00517	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0051c	83 c4 08	 add	 esp, 8
  0051f	8b c8		 mov	 ecx, eax
  00521	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00527	3b f4		 cmp	 esi, esp
  00529	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 31   : 	cout << "dvarparm(DBL_MAX) = " << dvarparm(DBL_MAX) << endl;

  0052e	8b f4		 mov	 esi, esp
  00530	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00535	83 ec 08	 sub	 esp, 8
  00538	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@7fefffffffffffff
  00540	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00545	e8 00 00 00 00	 call	 ?dvarparm@Varparm@@YANNZZ ; Varparm::dvarparm
  0054a	83 c4 08	 add	 esp, 8
  0054d	8b fc		 mov	 edi, esp
  0054f	83 ec 08	 sub	 esp, 8
  00552	dd 1c 24	 fstp	 QWORD PTR [esp]
  00555	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IKMEHNHP@dvarparm?$CIDBL_MAX?$CJ?5?$DN?5@
  0055a	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0055f	50		 push	 eax
  00560	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00565	83 c4 08	 add	 esp, 8
  00568	8b c8		 mov	 ecx, eax
  0056a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
  00570	3b fc		 cmp	 edi, esp
  00572	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00577	8b c8		 mov	 ecx, eax
  00579	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0057f	3b f4		 cmp	 esi, esp
  00581	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 32   : 	cout << "dvarparm(5.3, DBL_MAX) = " << dvarparm(5.3, DBL_MAX) << endl;

  00586	8b f4		 mov	 esi, esp
  00588	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0058d	83 ec 08	 sub	 esp, 8
  00590	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@7fefffffffffffff
  00598	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0059d	83 ec 08	 sub	 esp, 8
  005a0	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4015333333333333
  005a8	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  005ad	e8 00 00 00 00	 call	 ?dvarparm@Varparm@@YANNZZ ; Varparm::dvarparm
  005b2	83 c4 10	 add	 esp, 16			; 00000010H
  005b5	8b fc		 mov	 edi, esp
  005b7	83 ec 08	 sub	 esp, 8
  005ba	dd 1c 24	 fstp	 QWORD PTR [esp]
  005bd	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DNNPOLOM@dvarparm?$CI5?43?0?5DBL_MAX?$CJ?5?$DN?5@
  005c2	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  005c7	50		 push	 eax
  005c8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  005cd	83 c4 08	 add	 esp, 8
  005d0	8b c8		 mov	 ecx, eax
  005d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
  005d8	3b fc		 cmp	 edi, esp
  005da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005df	8b c8		 mov	 ecx, eax
  005e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  005e7	3b f4		 cmp	 esi, esp
  005e9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 33   : 	cout << "dvarparm (1, 2, 3, 7 , DBL_MAX) = " << dvarparm(1.0, 2.0, 3.0, 7.0 , DBL_MAX) << endl;

  005ee	8b f4		 mov	 esi, esp
  005f0	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  005f5	83 ec 08	 sub	 esp, 8
  005f8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@7fefffffffffffff
  00600	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00605	83 ec 08	 sub	 esp, 8
  00608	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@401c000000000000
  00610	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00615	83 ec 08	 sub	 esp, 8
  00618	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4008000000000000
  00620	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00625	83 ec 08	 sub	 esp, 8
  00628	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4000000000000000
  00630	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00635	83 ec 08	 sub	 esp, 8
  00638	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00640	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00645	e8 00 00 00 00	 call	 ?dvarparm@Varparm@@YANNZZ ; Varparm::dvarparm
  0064a	83 c4 28	 add	 esp, 40			; 00000028H
  0064d	8b fc		 mov	 edi, esp
  0064f	83 ec 08	 sub	 esp, 8
  00652	dd 1c 24	 fstp	 QWORD PTR [esp]
  00655	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@FAHIEAAO@dvarparm?5?$CI1?0?52?0?53?0?57?5?0?5DBL_MAX?$CJ@
  0065a	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0065f	50		 push	 eax
  00660	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00665	83 c4 08	 add	 esp, 8
  00668	8b c8		 mov	 ecx, eax
  0066a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
  00670	3b fc		 cmp	 edi, esp
  00672	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00677	8b c8		 mov	 ecx, eax
  00679	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0067f	3b f4		 cmp	 esi, esp
  00681	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 34   : 	cout << "dvarparm(6.1, 7.0, 4.7, 6.2, 2.1, 5.5, DBL_MAX) = " << dvarparm(6.1, 7.0, 4.7, 6.2, 2.1, 5.5, DBL_MAX) << endl << endl;

  00686	8b f4		 mov	 esi, esp
  00688	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0068d	8b fc		 mov	 edi, esp
  0068f	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00694	83 ec 08	 sub	 esp, 8
  00697	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@7fefffffffffffff
  0069f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  006a4	83 ec 08	 sub	 esp, 8
  006a7	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4016000000000000
  006af	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  006b4	83 ec 08	 sub	 esp, 8
  006b7	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4000cccccccccccd
  006bf	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  006c4	83 ec 08	 sub	 esp, 8
  006c7	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4018cccccccccccd
  006cf	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  006d4	83 ec 08	 sub	 esp, 8
  006d7	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4012cccccccccccd
  006df	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  006e4	83 ec 08	 sub	 esp, 8
  006e7	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@401c000000000000
  006ef	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  006f4	83 ec 08	 sub	 esp, 8
  006f7	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4018666666666666
  006ff	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00704	e8 00 00 00 00	 call	 ?dvarparm@Varparm@@YANNZZ ; Varparm::dvarparm
  00709	83 c4 38	 add	 esp, 56			; 00000038H
  0070c	8b dc		 mov	 ebx, esp
  0070e	83 ec 08	 sub	 esp, 8
  00711	dd 1c 24	 fstp	 QWORD PTR [esp]
  00714	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@IDHIFFLI@dvarparm?$CI6?41?0?57?40?0?54?47?0?56?42?0?52?4@
  00719	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0071e	50		 push	 eax
  0071f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00724	83 c4 08	 add	 esp, 8
  00727	8b c8		 mov	 ecx, eax
  00729	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
  0072f	3b dc		 cmp	 ebx, esp
  00731	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00736	8b c8		 mov	 ecx, eax
  00738	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0073e	3b fc		 cmp	 edi, esp
  00740	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00745	8b c8		 mov	 ecx, eax
  00747	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0074d	3b f4		 cmp	 esi, esp
  0074f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 35   : 
; 36   : 
; 37   : 	int a = 2, b = 3, c = 4;

  00754	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _a$[ebp], 2
  0075b	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _b$[ebp], 3
  00762	c7 45 dc 04 00
	00 00		 mov	 DWORD PTR _c$[ebp], 4

; 38   : 	cout << "cdevl = " << cdevl(a, b, c) << endl;

  00769	8b f4		 mov	 esi, esp
  0076b	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00770	8d 45 dc	 lea	 eax, DWORD PTR _c$[ebp]
  00773	50		 push	 eax
  00774	8d 4d e8	 lea	 ecx, DWORD PTR _b$[ebp]
  00777	51		 push	 ecx
  00778	8d 55 f4	 lea	 edx, DWORD PTR _a$[ebp]
  0077b	52		 push	 edx
  0077c	e8 00 00 00 00	 call	 ?cdevl@Call@@YAHAAH00@Z	; Call::cdevl
  00781	83 c4 0c	 add	 esp, 12			; 0000000cH
  00784	8b fc		 mov	 edi, esp
  00786	50		 push	 eax
  00787	68 00 00 00 00	 push	 OFFSET ??_C@_08GJILBCPM@cdevl?5?$DN?5@
  0078c	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00791	50		 push	 eax
  00792	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00797	83 c4 08	 add	 esp, 8
  0079a	8b c8		 mov	 ecx, eax
  0079c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  007a2	3b fc		 cmp	 edi, esp
  007a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007a9	8b c8		 mov	 ecx, eax
  007ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  007b1	3b f4		 cmp	 esi, esp
  007b3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 39   : 	cout << "cstd = " << cstd(a, 3, 4) << endl;

  007b8	8b f4		 mov	 esi, esp
  007ba	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  007bf	6a 04		 push	 4
  007c1	6a 03		 push	 3
  007c3	8d 45 f4	 lea	 eax, DWORD PTR _a$[ebp]
  007c6	50		 push	 eax
  007c7	e8 00 00 00 00	 call	 ?cstd@Call@@YGHAAHHH@Z	; Call::cstd
  007cc	8b fc		 mov	 edi, esp
  007ce	50		 push	 eax
  007cf	68 00 00 00 00	 push	 OFFSET ??_C@_07PMDNCOHN@cstd?5?$DN?5@
  007d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  007da	51		 push	 ecx
  007db	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  007e0	83 c4 08	 add	 esp, 8
  007e3	8b c8		 mov	 ecx, eax
  007e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  007eb	3b fc		 cmp	 edi, esp
  007ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007f2	8b c8		 mov	 ecx, eax
  007f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  007fa	3b f4		 cmp	 esi, esp
  007fc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 40   : 	cout << "cfst = " << cfst(2, 3, 4) << endl << endl;

  00801	8b f4		 mov	 esi, esp
  00803	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00808	8b fc		 mov	 edi, esp
  0080a	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0080f	6a 04		 push	 4
  00811	ba 03 00 00 00	 mov	 edx, 3
  00816	b9 02 00 00 00	 mov	 ecx, 2
  0081b	e8 00 00 00 00	 call	 ?cfst@Call@@YIHHHH@Z	; Call::cfst
  00820	8b dc		 mov	 ebx, esp
  00822	50		 push	 eax
  00823	68 00 00 00 00	 push	 OFFSET ??_C@_07LEDODKCO@cfst?5?$DN?5@
  00828	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0082d	50		 push	 eax
  0082e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00833	83 c4 08	 add	 esp, 8
  00836	8b c8		 mov	 ecx, eax
  00838	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0083e	3b dc		 cmp	 ebx, esp
  00840	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00845	8b c8		 mov	 ecx, eax
  00847	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0084d	3b fc		 cmp	 edi, esp
  0084f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00854	8b c8		 mov	 ecx, eax
  00856	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0085c	3b f4		 cmp	 esi, esp
  0085e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 41   : 
; 42   : 	cout << "5 param (1--5): " << defaultparm(1, 2, 3, 4, 5,2,3) << endl;

  00863	8b f4		 mov	 esi, esp
  00865	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0086a	6a 03		 push	 3
  0086c	6a 02		 push	 2
  0086e	6a 05		 push	 5
  00870	6a 04		 push	 4
  00872	6a 03		 push	 3
  00874	6a 02		 push	 2
  00876	6a 01		 push	 1
  00878	e8 00 00 00 00	 call	 ?defaultparm@@YAHHHHHHHH@Z ; defaultparm
  0087d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00880	8b fc		 mov	 edi, esp
  00882	50		 push	 eax
  00883	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CLCKBJMK@5?5param?5?$CI1?9?95?$CJ?3?5@
  00888	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0088d	50		 push	 eax
  0088e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00893	83 c4 08	 add	 esp, 8
  00896	8b c8		 mov	 ecx, eax
  00898	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0089e	3b fc		 cmp	 edi, esp
  008a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008a5	8b c8		 mov	 ecx, eax
  008a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  008ad	3b f4		 cmp	 esi, esp
  008af	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 43   : 	cout << "7 param (1--7): " << defaultparm(1, 2, 3, 4, 5, 6, 7) << endl;

  008b4	8b f4		 mov	 esi, esp
  008b6	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  008bb	6a 07		 push	 7
  008bd	6a 06		 push	 6
  008bf	6a 05		 push	 5
  008c1	6a 04		 push	 4
  008c3	6a 03		 push	 3
  008c5	6a 02		 push	 2
  008c7	6a 01		 push	 1
  008c9	e8 00 00 00 00	 call	 ?defaultparm@@YAHHHHHHHH@Z ; defaultparm
  008ce	83 c4 1c	 add	 esp, 28			; 0000001cH
  008d1	8b fc		 mov	 edi, esp
  008d3	50		 push	 eax
  008d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IFNGNKGN@7?5param?5?$CI1?9?97?$CJ?3?5@
  008d9	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  008de	50		 push	 eax
  008df	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  008e4	83 c4 08	 add	 esp, 8
  008e7	8b c8		 mov	 ecx, eax
  008e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  008ef	3b fc		 cmp	 edi, esp
  008f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008f6	8b c8		 mov	 ecx, eax
  008f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  008fe	3b f4		 cmp	 esi, esp
  00900	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 44   : }

  00905	33 c0		 xor	 eax, eax
  00907	52		 push	 edx
  00908	8b cd		 mov	 ecx, ebp
  0090a	50		 push	 eax
  0090b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@main
  00911	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00916	58		 pop	 eax
  00917	5a		 pop	 edx
  00918	5f		 pop	 edi
  00919	5e		 pop	 esi
  0091a	5b		 pop	 ebx
  0091b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0091e	33 cd		 xor	 ecx, ebp
  00920	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00925	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  0092b	3b ec		 cmp	 ebp, esp
  0092d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00932	8b e5		 mov	 esp, ebp
  00934	5d		 pop	 ebp
  00935	c3		 ret	 0
  00936	66 90		 npad	 2
$LN7@main:
  00938	03 00 00 00	 DD	 3
  0093c	00 00 00 00	 DD	 $LN6@main
$LN6@main:
  00940	f4 ff ff ff	 DD	 -12			; fffffff4H
  00944	04 00 00 00	 DD	 4
  00948	00 00 00 00	 DD	 $LN3@main
  0094c	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00950	04 00 00 00	 DD	 4
  00954	00 00 00 00	 DD	 $LN4@main
  00958	dc ff ff ff	 DD	 -36			; ffffffdcH
  0095c	04 00 00 00	 DD	 4
  00960	00 00 00 00	 DD	 $LN5@main
$LN5@main:
  00964	63		 DB	 99			; 00000063H
  00965	00		 DB	 0
$LN4@main:
  00966	62		 DB	 98			; 00000062H
  00967	00		 DB	 0
$LN3@main:
  00968	61		 DB	 97			; 00000061H
  00969	00		 DB	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab09\LP_lab09\LP_lab09.cpp
;	COMDAT ?defaultparm@@YAHHHHHHHH@Z
_TEXT	SEGMENT
_a1$ = 8						; size = 4
_a2$ = 12						; size = 4
_a3$ = 16						; size = 4
_a4$ = 20						; size = 4
_a5$ = 24						; size = 4
_a6$ = 28						; size = 4
_a7$ = 32						; size = 4
?defaultparm@@YAHHHHHHHH@Z PROC				; defaultparm, COMDAT

; 8    : int defaultparm(int a1, int a2, int a3, int a4, int a5, int a6 = 2, int a7 = 3) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __862FECFA_LP_lab09@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 9    : 	return { (a1 + a2 + a3 + a4 + a5 + a6 + a7) / 7 };

  00028	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0002b	03 45 0c	 add	 eax, DWORD PTR _a2$[ebp]
  0002e	03 45 10	 add	 eax, DWORD PTR _a3$[ebp]
  00031	03 45 14	 add	 eax, DWORD PTR _a4$[ebp]
  00034	03 45 18	 add	 eax, DWORD PTR _a5$[ebp]
  00037	03 45 1c	 add	 eax, DWORD PTR _a6$[ebp]
  0003a	03 45 20	 add	 eax, DWORD PTR _a7$[ebp]
  0003d	99		 cdq
  0003e	b9 07 00 00 00	 mov	 ecx, 7
  00043	f7 f9		 idiv	 ecx

; 10   : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?defaultparm@@YAHHHHHHHH@Z ENDP				; defaultparm
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab09\LP_lab09\LP_lab09.cpp
;	COMDAT ?dvarparm@Varparm@@YANNZZ
_TEXT	SEGMENT
_l$ = -36						; size = 4
_o$ = -24						; size = 8
_p$ = -8						; size = 4
_k$ = 8							; size = 8
?dvarparm@Varparm@@YANNZZ PROC				; Varparm::dvarparm, COMDAT

; 77   : 	double Varparm::dvarparm(double k, ...) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __862FECFA_LP_lab09@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 78   : 		double* p = &k, o=0;

  00028	8d 45 08	 lea	 eax, DWORD PTR _k$[ebp]
  0002b	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax
  0002e	0f 57 c0	 xorps	 xmm0, xmm0
  00031	f2 0f 11 45 e8	 movsd	 QWORD PTR _o$[ebp], xmm0

; 79   : 		int l = 0;

  00036	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _l$[ebp], 0
$LN2@dvarparm:

; 80   : 		while (p[l] != DBL_MAX) {

  0003d	8b 45 dc	 mov	 eax, DWORD PTR _l$[ebp]
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  00043	f2 0f 10 04 c1	 movsd	 xmm0, QWORD PTR [ecx+eax*8]
  00048	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@7fefffffffffffff
  00050	9f		 lahf
  00051	f6 c4 44	 test	 ah, 68			; 00000044H
  00054	7b 20		 jnp	 SHORT $LN3@dvarparm

; 81   : 			o += p[l];

  00056	8b 45 dc	 mov	 eax, DWORD PTR _l$[ebp]
  00059	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  0005c	f2 0f 10 45 e8	 movsd	 xmm0, QWORD PTR _o$[ebp]
  00061	f2 0f 58 04 c1	 addsd	 xmm0, QWORD PTR [ecx+eax*8]
  00066	f2 0f 11 45 e8	 movsd	 QWORD PTR _o$[ebp], xmm0

; 82   : 			l++;

  0006b	8b 45 dc	 mov	 eax, DWORD PTR _l$[ebp]
  0006e	83 c0 01	 add	 eax, 1
  00071	89 45 dc	 mov	 DWORD PTR _l$[ebp], eax

; 83   : 		}

  00074	eb c7		 jmp	 SHORT $LN2@dvarparm
$LN3@dvarparm:

; 84   : 		return o;

  00076	dd 45 e8	 fld	 QWORD PTR _o$[ebp]

; 85   : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
?dvarparm@Varparm@@YANNZZ ENDP				; Varparm::dvarparm
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab09\LP_lab09\LP_lab09.cpp
;	COMDAT ?fvarparm@Varparm@@YANMZZ
_TEXT	SEGMENT
_n$ = -36						; size = 4
_sum$ = -24						; size = 8
_p$ = -8						; size = 4
_k$ = 8							; size = 4
?fvarparm@Varparm@@YANMZZ PROC				; Varparm::fvarparm, COMDAT

; 66   : 	double fvarparm(float k, ...) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __862FECFA_LP_lab09@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 67   : 		if (k == FLT_MAX) return 0;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _k$[ebp]
  0002d	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@7f7fffff
  00034	9f		 lahf
  00035	f6 c4 44	 test	 ah, 68			; 00000044H
  00038	7a 04		 jp	 SHORT $LN4@fvarparm
  0003a	d9 ee		 fldz
  0003c	eb 53		 jmp	 SHORT $LN1@fvarparm
$LN4@fvarparm:

; 68   : 		double* p = (double*)(&k + 1);

  0003e	8d 45 0c	 lea	 eax, DWORD PTR _k$[ebp+4]
  00041	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 69   : 		double sum = k;

  00044	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _k$[ebp]
  00049	f2 0f 11 45 e8	 movsd	 QWORD PTR _sum$[ebp], xmm0

; 70   : 		int n = 0;

  0004e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
$LN2@fvarparm:

; 71   : 		while (p[n] != (double)FLT_MAX) {

  00055	8b 45 dc	 mov	 eax, DWORD PTR _n$[ebp]
  00058	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  0005b	f2 0f 10 04 c1	 movsd	 xmm0, QWORD PTR [ecx+eax*8]
  00060	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@47efffffe0000000
  00068	9f		 lahf
  00069	f6 c4 44	 test	 ah, 68			; 00000044H
  0006c	7b 20		 jnp	 SHORT $LN3@fvarparm

; 72   : 			sum += p[n];

  0006e	8b 45 dc	 mov	 eax, DWORD PTR _n$[ebp]
  00071	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  00074	f2 0f 10 45 e8	 movsd	 xmm0, QWORD PTR _sum$[ebp]
  00079	f2 0f 58 04 c1	 addsd	 xmm0, QWORD PTR [ecx+eax*8]
  0007e	f2 0f 11 45 e8	 movsd	 QWORD PTR _sum$[ebp], xmm0

; 73   : 			n++;

  00083	8b 45 dc	 mov	 eax, DWORD PTR _n$[ebp]
  00086	83 c0 01	 add	 eax, 1
  00089	89 45 dc	 mov	 DWORD PTR _n$[ebp], eax

; 74   : 		}

  0008c	eb c7		 jmp	 SHORT $LN2@fvarparm
$LN3@fvarparm:

; 75   : 		return sum;

  0008e	dd 45 e8	 fld	 QWORD PTR _sum$[ebp]
$LN1@fvarparm:

; 76   : 	}

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  0009a	3b ec		 cmp	 ebp, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
?fvarparm@Varparm@@YANMZZ ENDP				; Varparm::fvarparm
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab09\LP_lab09\LP_lab09.cpp
;	COMDAT ?shvarparm@Varparm@@YAHFZZ
_TEXT	SEGMENT
_i$1 = -32						; size = 4
_rezult$ = -20						; size = 2
_p$ = -8						; size = 4
_k$ = 8							; size = 2
?shvarparm@Varparm@@YAHFZZ PROC				; Varparm::shvarparm, COMDAT

; 56   : 	int shvarparm(short k, ...) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __862FECFA_LP_lab09@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 57   : 		if (k == 0) return 0;

  00028	0f bf 45 08	 movsx	 eax, WORD PTR _k$[ebp]
  0002c	85 c0		 test	 eax, eax
  0002e	75 04		 jne	 SHORT $LN5@shvarparm
  00030	33 c0		 xor	 eax, eax
  00032	eb 4b		 jmp	 SHORT $LN1@shvarparm
$LN5@shvarparm:

; 58   : 		int* p = (int*)(&k);

  00034	8d 45 08	 lea	 eax, DWORD PTR _k$[ebp]
  00037	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 59   : 		short rezult = 1;

  0003a	b8 01 00 00 00	 mov	 eax, 1
  0003f	66 89 45 ec	 mov	 WORD PTR _rezult$[ebp], ax

; 60   : 		p++;

  00043	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  00046	83 c0 04	 add	 eax, 4
  00049	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 61   : 		for (int i = 0; i < k; i++) {

  0004c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00053	eb 09		 jmp	 SHORT $LN4@shvarparm
$LN2@shvarparm:
  00055	8b 45 e0	 mov	 eax, DWORD PTR _i$1[ebp]
  00058	83 c0 01	 add	 eax, 1
  0005b	89 45 e0	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@shvarparm:
  0005e	0f bf 45 08	 movsx	 eax, WORD PTR _k$[ebp]
  00062	39 45 e0	 cmp	 DWORD PTR _i$1[ebp], eax
  00065	7d 14		 jge	 SHORT $LN3@shvarparm

; 62   : 			rezult *= *(p + i);

  00067	0f bf 45 ec	 movsx	 eax, WORD PTR _rezult$[ebp]
  0006b	8b 4d e0	 mov	 ecx, DWORD PTR _i$1[ebp]
  0006e	8b 55 f8	 mov	 edx, DWORD PTR _p$[ebp]
  00071	0f af 04 8a	 imul	 eax, DWORD PTR [edx+ecx*4]
  00075	66 89 45 ec	 mov	 WORD PTR _rezult$[ebp], ax

; 63   : 		}

  00079	eb da		 jmp	 SHORT $LN2@shvarparm
$LN3@shvarparm:

; 64   : 		return (int)rezult;

  0007b	0f bf 45 ec	 movsx	 eax, WORD PTR _rezult$[ebp]
$LN1@shvarparm:

; 65   : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
?shvarparm@Varparm@@YAHFZZ ENDP				; Varparm::shvarparm
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab09\LP_lab09\LP_lab09.cpp
;	COMDAT ?ivarparm@Varparm@@YAHHZZ
_TEXT	SEGMENT
_i$1 = -32						; size = 4
_rezult$ = -20						; size = 4
_p$ = -8						; size = 4
_k$ = 8							; size = 4
?ivarparm@Varparm@@YAHHZZ PROC				; Varparm::ivarparm, COMDAT

; 46   : 	int ivarparm(int k, ...) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __862FECFA_LP_lab09@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 47   : 		if (k == 0) return 0;

  00028	83 7d 08 00	 cmp	 DWORD PTR _k$[ebp], 0
  0002c	75 04		 jne	 SHORT $LN5@ivarparm
  0002e	33 c0		 xor	 eax, eax
  00030	eb 45		 jmp	 SHORT $LN1@ivarparm
$LN5@ivarparm:

; 48   : 		int* p = &k;

  00032	8d 45 08	 lea	 eax, DWORD PTR _k$[ebp]
  00035	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 49   : 		int rezult = 1;

  00038	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _rezult$[ebp], 1

; 50   : 		p++;

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  00042	83 c0 04	 add	 eax, 4
  00045	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 51   : 		for (int i = 0; i < k; i++) {

  00048	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0004f	eb 09		 jmp	 SHORT $LN4@ivarparm
$LN2@ivarparm:
  00051	8b 45 e0	 mov	 eax, DWORD PTR _i$1[ebp]
  00054	83 c0 01	 add	 eax, 1
  00057	89 45 e0	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@ivarparm:
  0005a	8b 45 e0	 mov	 eax, DWORD PTR _i$1[ebp]
  0005d	3b 45 08	 cmp	 eax, DWORD PTR _k$[ebp]
  00060	7d 12		 jge	 SHORT $LN3@ivarparm

; 52   : 				rezult *= *(p+i);

  00062	8b 45 e0	 mov	 eax, DWORD PTR _i$1[ebp]
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  00068	8b 55 ec	 mov	 edx, DWORD PTR _rezult$[ebp]
  0006b	0f af 14 81	 imul	 edx, DWORD PTR [ecx+eax*4]
  0006f	89 55 ec	 mov	 DWORD PTR _rezult$[ebp], edx

; 53   : 		}

  00072	eb dd		 jmp	 SHORT $LN2@ivarparm
$LN3@ivarparm:

; 54   : 		return rezult;

  00074	8b 45 ec	 mov	 eax, DWORD PTR _rezult$[ebp]
$LN1@ivarparm:

; 55   : 	}

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00080	3b ec		 cmp	 ebp, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
?ivarparm@Varparm@@YAHHZZ ENDP				; Varparm::ivarparm
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -252						; size = 44
_this$ = -8						; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 176  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00013	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __886F7F70_xloctime
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 177  :         _Cvt = _Lobj._Getcvt();

  0002d	8b f4		 mov	 esi, esp
  0002f	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00035	50		 push	 eax
  00036	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00049	83 c7 18	 add	 edi, 24			; 00000018H
  0004c	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00051	8b f0		 mov	 esi, eax
  00053	f3 a5		 rep movsd

; 178  : 
; 179  :         if (is_same_v<_Elem2, wchar_t>) {

  00055	b8 01 00 00 00	 mov	 eax, 1
  0005a	85 c0		 test	 eax, eax
  0005c	74 57		 je	 SHORT $LN2@Getvals

; 180  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  0005e	8b f4		 mov	 esi, esp
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00076	83 c4 04	 add	 esp, 4
  00079	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 181  :             _Months =

  0007f	8b f4		 mov	 esi, esp
  00081	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0008a	3b f4		 cmp	 esi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00097	83 c4 04	 add	 esp, 4
  0009a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 182  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 183  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  000a5	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  000aa	83 c4 04	 add	 esp, 4
  000ad	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 184  :         } else {

  000b3	eb 70		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 185  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000b5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	83 c0 18	 add	 eax, 24			; 00000018H
  000bb	50		 push	 eax
  000bc	6a 00		 push	 0
  000be	8b f4		 mov	 esi, esp
  000c0	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  000c9	3b f4		 cmp	 esi, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 186  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000df	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e2	83 c0 18	 add	 eax, 24			; 00000018H
  000e5	50		 push	 eax
  000e6	6a 00		 push	 0
  000e8	8b f4		 mov	 esi, esp
  000ea	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000f3	3b f4		 cmp	 esi, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
  00103	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00106	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 187  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  00109	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	83 c0 18	 add	 eax, 24			; 00000018H
  0010f	50		 push	 eax
  00110	6a 00		 push	 0
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  00117	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  0011c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00122	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 188  :         }
; 189  :     }

  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	5b		 pop	 ebx
  00128	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  0012e	3b ec		 cmp	 ebp, esp
  00130	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -252						; size = 44
_this$ = -8						; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 176  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00013	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __886F7F70_xloctime
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 177  :         _Cvt = _Lobj._Getcvt();

  0002d	8b f4		 mov	 esi, esp
  0002f	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00035	50		 push	 eax
  00036	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00049	83 c7 18	 add	 edi, 24			; 00000018H
  0004c	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00051	8b f0		 mov	 esi, eax
  00053	f3 a5		 rep movsd

; 178  : 
; 179  :         if (is_same_v<_Elem2, wchar_t>) {

  00055	b8 01 00 00 00	 mov	 eax, 1
  0005a	85 c0		 test	 eax, eax
  0005c	74 57		 je	 SHORT $LN2@Getvals

; 180  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  0005e	8b f4		 mov	 esi, esp
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00076	83 c4 04	 add	 esp, 4
  00079	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 181  :             _Months =

  0007f	8b f4		 mov	 esi, esp
  00081	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0008a	3b f4		 cmp	 esi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00097	83 c4 04	 add	 esp, 4
  0009a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 182  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 183  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  000a5	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  000aa	83 c4 04	 add	 esp, 4
  000ad	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 184  :         } else {

  000b3	eb 70		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 185  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000b5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	83 c0 18	 add	 eax, 24			; 00000018H
  000bb	50		 push	 eax
  000bc	6a 00		 push	 0
  000be	8b f4		 mov	 esi, esp
  000c0	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  000c9	3b f4		 cmp	 esi, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 186  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000df	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e2	83 c0 18	 add	 eax, 24			; 00000018H
  000e5	50		 push	 eax
  000e6	6a 00		 push	 0
  000e8	8b f4		 mov	 esi, esp
  000ea	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000f3	3b f4		 cmp	 esi, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
  00103	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00106	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 187  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  00109	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	83 c0 18	 add	 eax, 24			; 00000018H
  0010f	50		 push	 eax
  00110	6a 00		 push	 0
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  00117	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  0011c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00122	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 188  :         }
; 189  :     }

  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	5b		 pop	 ebx
  00128	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  0012e	3b ec		 cmp	 ebp, esp
  00130	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptrnext$1 = -32					; size = 4
__Ptrdest$ = -20					; size = 4
__Count$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 563  : _Elem* __CRTDECL _Maklocstr(const char* _Ptr, _Elem*, const _Locinfo::_Cvtvec&) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0E648B51_xlocale
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 564  :     // convert C string to _Elem sequence using _Cvtvec
; 565  :     size_t _Count = _CSTD strlen(_Ptr) + 1;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _strlen
  00031	83 c4 04	 add	 esp, 4
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR __Count$[ebp], eax

; 566  : 
; 567  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  0003a	8b f4		 mov	 esi, esp
  0003c	68 37 02 00 00	 push	 567			; 00000237H
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@DEICPIDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00046	6a 02		 push	 2
  00048	6a 01		 push	 1
  0004a	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0004d	50		 push	 eax
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00054	83 c4 14	 add	 esp, 20			; 00000014H
  00057	3b f4		 cmp	 esi, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	89 45 ec	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 568  : 
; 569  :     if (!_Ptrdest) {

  00061	83 7d ec 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  00065	75 05		 jne	 SHORT $LN5@Maklocstr

; 570  :         _Xbad_alloc();

  00067	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 571  :     }
; 572  : 
; 573  :     for (_Elem* _Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr) {

  0006c	8b 45 ec	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  0006f	89 45 e0	 mov	 DWORD PTR __Ptrnext$1[ebp], eax
  00072	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  00074	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  00077	83 e8 01	 sub	 eax, 1
  0007a	89 45 f8	 mov	 DWORD PTR __Count$[ebp], eax
  0007d	8b 4d e0	 mov	 ecx, DWORD PTR __Ptrnext$1[ebp]
  00080	83 c1 01	 add	 ecx, 1
  00083	89 4d e0	 mov	 DWORD PTR __Ptrnext$1[ebp], ecx
  00086	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00089	83 c2 01	 add	 edx, 1
  0008c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
$LN4@Maklocstr:
  0008f	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00093	76 0c		 jbe	 SHORT $LN3@Maklocstr

; 574  :         *_Ptrnext = static_cast<_Elem>(static_cast<unsigned char>(*_Ptr));

  00095	8b 45 e0	 mov	 eax, DWORD PTR __Ptrnext$1[ebp]
  00098	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0009b	8a 11		 mov	 dl, BYTE PTR [ecx]
  0009d	88 10		 mov	 BYTE PTR [eax], dl

; 575  :     }

  0009f	eb d3		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 576  : 
; 577  :     return _Ptrdest;

  000a1	8b 45 ec	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN6@Maklocstr:

; 578  : }

  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000ad	3b ec		 cmp	 ebp, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
__Ptrdest$ = -20					; size = 4
__Count$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?_Maklocwcs@std@@YAPA_WPB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 90   : inline wchar_t* _Maklocwcs(const wchar_t* _Ptr) { // copy NTWCS to allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __90E3ED46_xlocnum
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :     const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002d	50		 push	 eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  00034	83 c4 04	 add	 esp, 4
  00037	3b f4		 cmp	 esi, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 f8	 mov	 DWORD PTR __Count$[ebp], eax

; 92   : 
; 93   :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Count, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
  00049	83 c0 03	 add	 eax, 3
  0004c	8b f4		 mov	 esi, esp
  0004e	50		 push	 eax
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LHMPPKJI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00054	6a 02		 push	 2
  00056	6a 02		 push	 2
  00058	8b 4d f8	 mov	 ecx, DWORD PTR __Count$[ebp]
  0005b	51		 push	 ecx
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00062	83 c4 14	 add	 esp, 20			; 00000014H
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	89 45 ec	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 94   : 
; 95   :     if (!_Ptrdest) {

  0006f	83 7d ec 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  00073	75 05		 jne	 SHORT $LN2@Maklocwcs

; 96   :         _Xbad_alloc();

  00075	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Maklocwcs:

; 97   :     }
; 98   : 
; 99   :     _CSTD wmemcpy(_Ptrdest, _Ptr, _Count);

  0007a	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00081	51		 push	 ecx
  00082	8b 55 ec	 mov	 edx, DWORD PTR __Ptrdest$[ebp]
  00085	52		 push	 edx
  00086	e8 00 00 00 00	 call	 _wmemcpy
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 100  :     return _Ptrdest;

  0008e	8b 45 ec	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN3@Maklocwcs:

; 101  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0009a	3b ec		 cmp	 ebp, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
?_Maklocwcs@std@@YAPA_WPB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -128						; size = 8
__Ptrnext$ = -112					; size = 4
__Ptrdest$ = -100					; size = 4
__Mbst1$ = -88						; size = 8
__Wc$ = -72						; size = 2
__Bytes$ = -60						; size = 4
__Ptr1$ = -48						; size = 4
__Wchars$ = -36						; size = 4
__Count1$ = -24						; size = 4
__Count$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 581  : inline wchar_t* __CRTDECL _Maklocstr(const char* _Ptr, wchar_t*, const _Locinfo::_Cvtvec& _Cvt) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd bc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-324]
  00012	b9 51 00 00 00	 mov	 ecx, 81			; 00000051H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __0E648B51_xlocale
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 582  :     // convert C string to wchar_t sequence using _Cvtvec
; 583  :     size_t _Count;
; 584  :     size_t _Count1;
; 585  :     size_t _Wchars;
; 586  :     const char* _Ptr1;
; 587  :     int _Bytes;
; 588  :     wchar_t _Wc;
; 589  :     mbstate_t _Mbst1 = {};

  00032	33 c0		 xor	 eax, eax
  00034	89 45 a8	 mov	 DWORD PTR __Mbst1$[ebp], eax
  00037	89 45 ac	 mov	 DWORD PTR __Mbst1$[ebp+4], eax

; 590  : 
; 591  :     _Count1 = _CSTD strlen(_Ptr) + 1;

  0003a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _strlen
  00043	83 c4 04	 add	 esp, 4
  00046	83 c0 01	 add	 eax, 1
  00049	89 45 e8	 mov	 DWORD PTR __Count1$[ebp], eax

; 592  :     for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count; _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars) {

  0004c	8b 45 e8	 mov	 eax, DWORD PTR __Count1$[ebp]
  0004f	89 45 f4	 mov	 DWORD PTR __Count$[ebp], eax
  00052	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR __Wchars$[ebp], 0
  00059	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0005c	89 4d d0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  0005f	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  00061	8b 45 f4	 mov	 eax, DWORD PTR __Count$[ebp]
  00064	2b 45 c4	 sub	 eax, DWORD PTR __Bytes$[ebp]
  00067	89 45 f4	 mov	 DWORD PTR __Count$[ebp], eax
  0006a	8b 4d d0	 mov	 ecx, DWORD PTR __Ptr1$[ebp]
  0006d	03 4d c4	 add	 ecx, DWORD PTR __Bytes$[ebp]
  00070	89 4d d0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  00073	8b 55 dc	 mov	 edx, DWORD PTR __Wchars$[ebp]
  00076	83 c2 01	 add	 edx, 1
  00079	89 55 dc	 mov	 DWORD PTR __Wchars$[ebp], edx
$LN4@Maklocstr:
  0007c	83 7d f4 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00080	76 29		 jbe	 SHORT $LN3@Maklocstr

; 593  :         if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) {

  00082	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  00085	50		 push	 eax
  00086	8d 4d a8	 lea	 ecx, DWORD PTR __Mbst1$[ebp]
  00089	51		 push	 ecx
  0008a	8b 55 f4	 mov	 edx, DWORD PTR __Count$[ebp]
  0008d	52		 push	 edx
  0008e	8b 45 d0	 mov	 eax, DWORD PTR __Ptr1$[ebp]
  00091	50		 push	 eax
  00092	8d 4d b8	 lea	 ecx, DWORD PTR __Wc$[ebp]
  00095	51		 push	 ecx
  00096	e8 00 00 00 00	 call	 __Mbrtowc
  0009b	83 c4 14	 add	 esp, 20			; 00000014H
  0009e	89 45 c4	 mov	 DWORD PTR __Bytes$[ebp], eax
  000a1	83 7d c4 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  000a5	7f 02		 jg	 SHORT $LN8@Maklocstr

; 594  :             break;

  000a7	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 595  :         }
; 596  :     }

  000a9	eb b6		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 597  : 
; 598  :     ++_Wchars; // count terminating nul

  000ab	8b 45 dc	 mov	 eax, DWORD PTR __Wchars$[ebp]
  000ae	83 c0 01	 add	 eax, 1
  000b1	89 45 dc	 mov	 DWORD PTR __Wchars$[ebp], eax

; 599  : 
; 600  :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Wchars, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  000b4	8b f4		 mov	 esi, esp
  000b6	68 58 02 00 00	 push	 600			; 00000258H
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@DEICPIDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000c0	6a 02		 push	 2
  000c2	6a 02		 push	 2
  000c4	8b 45 dc	 mov	 eax, DWORD PTR __Wchars$[ebp]
  000c7	50		 push	 eax
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  000ce	83 c4 14	 add	 esp, 20			; 00000014H
  000d1	3b f4		 cmp	 esi, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	89 45 9c	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 601  : 
; 602  :     if (!_Ptrdest) {

  000db	83 7d 9c 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  000df	75 05		 jne	 SHORT $LN9@Maklocstr

; 603  :         _Xbad_alloc();

  000e1	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN9@Maklocstr:

; 604  :     }
; 605  : 
; 606  :     wchar_t* _Ptrnext = _Ptrdest;

  000e6	8b 45 9c	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  000e9	89 45 90	 mov	 DWORD PTR __Ptrnext$[ebp], eax

; 607  :     mbstate_t _Mbst2  = {};

  000ec	33 c0		 xor	 eax, eax
  000ee	89 45 80	 mov	 DWORD PTR __Mbst2$[ebp], eax
  000f1	89 45 84	 mov	 DWORD PTR __Mbst2$[ebp+4], eax

; 608  : 
; 609  :     for (; 0 < _Wchars; _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext) {

  000f4	eb 24		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:
  000f6	8b 45 f4	 mov	 eax, DWORD PTR __Count$[ebp]
  000f9	2b 45 c4	 sub	 eax, DWORD PTR __Bytes$[ebp]
  000fc	89 45 f4	 mov	 DWORD PTR __Count$[ebp], eax
  000ff	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00102	03 4d c4	 add	 ecx, DWORD PTR __Bytes$[ebp]
  00105	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
  00108	8b 55 dc	 mov	 edx, DWORD PTR __Wchars$[ebp]
  0010b	83 ea 01	 sub	 edx, 1
  0010e	89 55 dc	 mov	 DWORD PTR __Wchars$[ebp], edx
  00111	8b 45 90	 mov	 eax, DWORD PTR __Ptrnext$[ebp]
  00114	83 c0 02	 add	 eax, 2
  00117	89 45 90	 mov	 DWORD PTR __Ptrnext$[ebp], eax
$LN7@Maklocstr:
  0011a	83 7d dc 00	 cmp	 DWORD PTR __Wchars$[ebp], 0
  0011e	76 29		 jbe	 SHORT $LN6@Maklocstr

; 610  :         if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) {

  00120	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  00123	50		 push	 eax
  00124	8d 4d 80	 lea	 ecx, DWORD PTR __Mbst2$[ebp]
  00127	51		 push	 ecx
  00128	8b 55 e8	 mov	 edx, DWORD PTR __Count1$[ebp]
  0012b	52		 push	 edx
  0012c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0012f	50		 push	 eax
  00130	8b 4d 90	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  00133	51		 push	 ecx
  00134	e8 00 00 00 00	 call	 __Mbrtowc
  00139	83 c4 14	 add	 esp, 20			; 00000014H
  0013c	89 45 c4	 mov	 DWORD PTR __Bytes$[ebp], eax
  0013f	83 7d c4 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  00143	7f 02		 jg	 SHORT $LN10@Maklocstr

; 611  :             break;

  00145	eb 02		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 612  :         }
; 613  :     }

  00147	eb ad		 jmp	 SHORT $LN5@Maklocstr
$LN6@Maklocstr:

; 614  : 
; 615  :     *_Ptrnext = L'\0';

  00149	33 c0		 xor	 eax, eax
  0014b	8b 4d 90	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  0014e	66 89 01	 mov	 WORD PTR [ecx], ax

; 616  : 
; 617  :     return _Ptrdest;

  00151	8b 45 9c	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN11@Maklocstr:

; 618  : }

  00154	52		 push	 edx
  00155	8b cd		 mov	 ecx, ebp
  00157	50		 push	 eax
  00158	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN16@Maklocstr
  0015e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00163	58		 pop	 eax
  00164	5a		 pop	 edx
  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx
  00168	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016b	33 cd		 xor	 ecx, ebp
  0016d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00172	81 c4 44 01 00
	00		 add	 esp, 324		; 00000144H
  00178	3b ec		 cmp	 ebp, esp
  0017a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c3		 ret	 0
  00183	90		 npad	 1
$LN16@Maklocstr:
  00184	03 00 00 00	 DD	 3
  00188	00 00 00 00	 DD	 $LN15@Maklocstr
$LN15@Maklocstr:
  0018c	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00190	02 00 00 00	 DD	 2
  00194	00 00 00 00	 DD	 $LN12@Maklocstr
  00198	a8 ff ff ff	 DD	 -88			; ffffffa8H
  0019c	08 00 00 00	 DD	 8
  001a0	00 00 00 00	 DD	 $LN13@Maklocstr
  001a4	80 ff ff ff	 DD	 -128			; ffffff80H
  001a8	08 00 00 00	 DD	 8
  001ac	00 00 00 00	 DD	 $LN14@Maklocstr
$LN14@Maklocstr:
  001b0	5f		 DB	 95			; 0000005fH
  001b1	4d		 DB	 77			; 0000004dH
  001b2	62		 DB	 98			; 00000062H
  001b3	73		 DB	 115			; 00000073H
  001b4	74		 DB	 116			; 00000074H
  001b5	32		 DB	 50			; 00000032H
  001b6	00		 DB	 0
$LN13@Maklocstr:
  001b7	5f		 DB	 95			; 0000005fH
  001b8	4d		 DB	 77			; 0000004dH
  001b9	62		 DB	 98			; 00000062H
  001ba	73		 DB	 115			; 00000073H
  001bb	74		 DB	 116			; 00000074H
  001bc	31		 DB	 49			; 00000031H
  001bd	00		 DB	 0
$LN12@Maklocstr:
  001be	5f		 DB	 95			; 0000005fH
  001bf	57		 DB	 87			; 00000057H
  001c0	63		 DB	 99			; 00000063H
  001c1	00		 DB	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 400  :     _NODISCARD static constexpr int_type eof() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00020	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __D15AFF60_xstring
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 401  :         return static_cast<int_type>(EOF);

  00047	83 c8 ff	 or	 eax, -1

; 402  :     }

  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
  00069	cc		 int	 3
  0006a	cc		 int	 3
  0006b	cc		 int	 3
  0006c	cc		 int	 3
  0006d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 392  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00020	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __D15AFF60_xstring
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 393  :         return _Left == _Right;

  00047	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004d	8b 10		 mov	 edx, DWORD PTR [eax]
  0004f	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00051	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00053	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  0005d	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0005f	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00069	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 394  :     }

  0006f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00072	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00079	59		 pop	 ecx
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
  0008e	cc		 int	 3
  0008f	cc		 int	 3
  00090	cc		 int	 3
  00091	cc		 int	 3
  00092	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 2c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-212]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 305  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00020	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __D15AFF60_xstring
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 306  :         // find length of null-terminated string
; 307  : #if _HAS_CXX17
; 308  : #ifdef __cpp_char8_t
; 309  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 310  : #if _HAS_U8_INTRINSICS
; 311  :             return __builtin_u8strlen(_First);
; 312  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 313  :             return _Char_traits<_Elem, _Int_type>::length(_First);
; 314  : #endif // _HAS_U8_INTRINSICS
; 315  :         } else
; 316  : #endif // __cpp_char8_t
; 317  :         {
; 318  :             return __builtin_strlen(_First);
; 319  :         }
; 320  : #else // _HAS_CXX17
; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00047	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _strlen
  00050	83 c4 04	 add	 esp, 4

; 322  : #endif // _HAS_CXX17
; 323  :     }

  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00067	3b ec		 cmp	 ebp, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
  00072	cc		 int	 3
  00073	cc		 int	 3
  00074	cc		 int	 3
  00075	cc		 int	 3
  00076	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 230  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __534C724A_wchar@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00028	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  0002b	d1 e0		 shl	 eax, 1
  0002d	50		 push	 eax
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 _memcpy
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :         #pragma warning(pop)
; 235  :     }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab09\LP_lab09\LP_lab09.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __862FECFA_LP_lab09@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab09\LP_lab09\LP_lab09.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __862FECFA_LP_lab09@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
