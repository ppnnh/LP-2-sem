; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab04\LP_lab04\LP_lab04.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__367CC694_corecrt_memcpy_s@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__5467428D_corecrt_wconio@h DB 01H
__4442441F_corecrt_wio@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__186FF47F_stat@h DB 01H
__534C724A_wchar@h DB 01H
__62A468D7_tchar@h DB 01H
__24E9E95F_stdlib@h DB 01H
__8906660C_vcruntime_new@h DB 01H
__09340588_corecrt_math@h DB 01H
__F8119FB4_cstdlib DB 01H
__0A4FAB91_cmath DB 01H
__AD6A91B7_stdio@h DB 01H
__35D7DDB3_corecrt_memory@h DB 01H
__A29A7DFB_string@h DB 01H
__85A9AA98_type_traits DB 01H
__4324C6B3_xutility DB 01H
__B0C4CEA9_malloc@h DB 01H
__E75714E4_vcruntime_exception@h DB 01H
__E4152856_exception DB 01H
__F2870A2C_limits DB 01H
__A58979FC_xmemory DB 01H
__D15AFF60_xstring DB 01H
__6D5B120B_stdexcept DB 01H
__160863A3_xcall_once@h DB 01H
__99B256EE_atomic DB 01H
__A9557183_system_error DB 01H
__FB364CBD_vcruntime_typeinfo@h DB 01H
__33FB35AA_typeinfo DB 01H
__4E2906A2_memory DB 01H
__626C51AD_xfacet DB 01H
__7242C389_ctype@h DB 01H
__2C72D662_xlocinfo DB 01H
__0E648B51_xlocale DB 01H
__1597A171_xiosbase DB 01H
__90E3ED46_xlocnum DB 01H
__165C22CB_ios DB 01H
__52D35071_LP_lab04@cpp DB 01H
__7EA464AF_istream DB 01H
__1D745195_ostream DB 01H
__6FFBAAB7_streambuf DB 01H
__3E6EDFAA_iosfwd DB 01H
__CF1C1A3F_utility DB 01H
__528871F3_iterator DB 01H
__38038D2D_xstddef DB 01H
__EE19A480_xatomic@h DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?mul@@YAHHH@Z					; mul
PUBLIC	_wmain
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_05PDJBBECF@pause@				; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3fa66666
PUBLIC	__real@4046b288ce703afb
PUBLIC	__real@40574f9db22d0e56
PUBLIC	__real@426161e5
PUBLIC	__real@4286b333
PUBLIC	__real@bfa66666
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp__system:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bfa66666
CONST	SEGMENT
__real@bfa66666 DD 0bfa66666r			; -1.3
CONST	ENDS
;	COMDAT __real@4286b333
CONST	SEGMENT
__real@4286b333 DD 04286b333r			; 67.35
CONST	ENDS
;	COMDAT __real@426161e5
CONST	SEGMENT
__real@426161e5 DD 0426161e5r			; 56.3456
CONST	ENDS
;	COMDAT __real@40574f9db22d0e56
CONST	SEGMENT
__real@40574f9db22d0e56 DQ 040574f9db22d0e56r	; 93.244
CONST	ENDS
;	COMDAT __real@4046b288ce703afb
CONST	SEGMENT
__real@4046b288ce703afb DQ 04046b288ce703afbr	; 45.3948
CONST	ENDS
;	COMDAT __real@3fa66666
CONST	SEGMENT
__real@3fa66666 DD 03fa66666r			; 1.3
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_05PDJBBECF@pause@
CONST	SEGMENT
??_C@_05PDJBBECF@pause@ DB 'pause', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab04\LP_lab04\LP_lab04.cpp
;	COMDAT _wmain
_TEXT	SEGMENT
_rd$ = -592						; size = 4
_rf$ = -580						; size = 4
_ri$ = -568						; size = 4
_rs$ = -556						; size = 4
_rwc$ = -544						; size = 4
_rc$ = -532						; size = 4
_func_mul$ = -520					; size = 4
_d1$ = -508						; size = 4
_uf$ = -496						; size = 4
_ui$ = -484						; size = 4
_us$ = -472						; size = 4
_uwc$ = -460						; size = 4
_uc$ = -448						; size = 4
_d$ = -436						; size = 8
_f6$ = -420						; size = 4
_f5$ = -408						; size = 4
_f4$ = -396						; size = 4
_f3$ = -384						; size = 4
_f2$ = -372						; size = 4
_f1$ = -360						; size = 4
_lf$ = -348						; size = 4
_ull$ = -336						; size = 4
_ulb$ = -324						; size = 4
_lll$ = -312						; size = 4
_llb$ = -300						; size = 4
_l2$ = -288						; size = 4
_l1$ = -276						; size = 4
_ll$ = -264						; size = 4
_uil$ = -252						; size = 4
_uib$ = -240						; size = 4
_il$ = -228						; size = 4
_ib$ = -216						; size = 4
_i2$ = -204						; size = 4
_i1$ = -192						; size = 4
_li$ = -180						; size = 4
_us2$ = -168						; size = 2
_us1$ = -156						; size = 2
_ss$ = -144						; size = 2
_sb$ = -132						; size = 2
_s2$ = -120						; size = 2
_s1$ = -108						; size = 2
_ls$ = -96						; size = 4
_wc$ = -84						; size = 2
_lwc$ = -72						; size = 4
_c$ = -57						; size = 1
_lc$ = -48						; size = 4
_lb$ = -36						; size = 4
_b2$ = -21						; size = 1
_b1$ = -9						; size = 1
__$ArrayPad$ = -4					; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_wmain	PROC						; COMDAT

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 03 00
	00		 sub	 esp, 980		; 000003d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 2c fc ff
	ff		 lea	 edi, DWORD PTR [ebp-980]
  00012	b9 f5 00 00 00	 mov	 ecx, 245		; 000000f5H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __52D35071_LP_lab04@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 8    : 	//4
; 9    : 	bool b1 = true;//01

  00032	c6 45 f7 01	 mov	 BYTE PTR _b1$[ebp], 1

; 10   : 	bool b2 = false;//00

  00036	c6 45 eb 00	 mov	 BYTE PTR _b2$[ebp], 0

; 11   : 	int lb = sizeof(bool);

  0003a	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _lb$[ebp], 1

; 12   : 	//5
; 13   : 	int lc = sizeof(char);

  00041	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _lc$[ebp], 1

; 14   : 	char c = 'L';//4c

  00048	c6 45 c7 4c	 mov	 BYTE PTR _c$[ebp], 76	; 0000004cH

; 15   : 	//6
; 16   : 	int lwc = sizeof(wchar_t);

  0004c	c7 45 b8 02 00
	00 00		 mov	 DWORD PTR _lwc$[ebp], 2

; 17   : 	wchar_t wc = L'—З';//04 47

  00053	b8 47 04 00 00	 mov	 eax, 1095		; 00000447H
  00058	66 89 45 ac	 mov	 WORD PTR _wc$[ebp], ax

; 18   : 	//7
; 19   : 	int ls = sizeof(short);

  0005c	c7 45 a0 02 00
	00 00		 mov	 DWORD PTR _ls$[ebp], 2

; 20   : 	short s1 = 12; //c

  00063	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00068	66 89 45 94	 mov	 WORD PTR _s1$[ebp], ax

; 21   : 	short s2 = -12; //-c

  0006c	b8 f4 ff ff ff	 mov	 eax, -12		; fffffff4H
  00071	66 89 45 88	 mov	 WORD PTR _s2$[ebp], ax

; 22   : 	//8
; 23   : 	short sb = SHRT_MAX;//32767, 7f ff

  00075	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  0007a	66 89 85 7c ff
	ff ff		 mov	 WORD PTR _sb$[ebp], ax

; 24   : 	short ss = SHRT_MIN;//-32768, 80 00

  00081	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H
  00086	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _ss$[ebp], ax

; 25   : 	//9
; 26   : 	unsigned short us1 = USHRT_MAX;//65535, ff ff

  0008d	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00092	66 89 85 64 ff
	ff ff		 mov	 WORD PTR _us1$[ebp], ax

; 27   : 	unsigned short us2 = 0;//0, 00 00

  00099	33 c0		 xor	 eax, eax
  0009b	66 89 85 58 ff
	ff ff		 mov	 WORD PTR _us2$[ebp], ax

; 28   : 	//10
; 29   : 	int li = sizeof(int);

  000a2	c7 85 4c ff ff
	ff 04 00 00 00	 mov	 DWORD PTR _li$[ebp], 4

; 30   : 	int i1 = 13;// 00 00 00 0d

  000ac	c7 85 40 ff ff
	ff 0d 00 00 00	 mov	 DWORD PTR _i1$[ebp], 13	; 0000000dH

; 31   : 	int i2 = -13;// ff ff ff f3

  000b6	c7 85 34 ff ff
	ff f3 ff ff ff	 mov	 DWORD PTR _i2$[ebp], -13 ; fffffff3H

; 32   : 	//11
; 33   : 	int ib = INT_MAX;//2147483647, 7f ff ff ff

  000c0	c7 85 28 ff ff
	ff ff ff ff 7f	 mov	 DWORD PTR _ib$[ebp], 2147483647 ; 7fffffffH

; 34   : 	int il = INT_MIN;//-2147483648, 80 00 00 00

  000ca	c7 85 1c ff ff
	ff 00 00 00 80	 mov	 DWORD PTR _il$[ebp], -2147483648 ; 80000000H

; 35   : 	//12
; 36   : 	unsigned int uib = UINT_MAX;//4294967295, ff ff ff ff

  000d4	c7 85 10 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _uib$[ebp], -1

; 37   : 	unsigned int uil = 0;//0, 00 00 00 00

  000de	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _uil$[ebp], 0

; 38   : 	//13
; 39   : 	int ll = sizeof(long);

  000e8	c7 85 f8 fe ff
	ff 04 00 00 00	 mov	 DWORD PTR _ll$[ebp], 4

; 40   : 	long l1 = 14;//00 00 00 0e

  000f2	c7 85 ec fe ff
	ff 0e 00 00 00	 mov	 DWORD PTR _l1$[ebp], 14	; 0000000eH

; 41   : 	long l2 = -14;//ff ff ff f2

  000fc	c7 85 e0 fe ff
	ff f2 ff ff ff	 mov	 DWORD PTR _l2$[ebp], -14 ; fffffff2H

; 42   : 	//14
; 43   : 	long llb = LONG_MAX;//2147483647, 7f ff ff ff

  00106	c7 85 d4 fe ff
	ff ff ff ff 7f	 mov	 DWORD PTR _llb$[ebp], 2147483647 ; 7fffffffH

; 44   : 	long lll = LONG_MIN;//-214748364, 80 00 00 00

  00110	c7 85 c8 fe ff
	ff 00 00 00 80	 mov	 DWORD PTR _lll$[ebp], -2147483648 ; 80000000H

; 45   : 	//15
; 46   : 	unsigned long ulb = ULONG_MAX;//4294967295, ff ff ff ff

  0011a	c7 85 bc fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _ulb$[ebp], -1

; 47   : 	unsigned long ull = 0;//0, 00 00 00 00

  00124	c7 85 b0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ull$[ebp], 0

; 48   : 	//16
; 49   : 	int lf = sizeof(float);

  0012e	c7 85 a4 fe ff
	ff 04 00 00 00	 mov	 DWORD PTR _lf$[ebp], 4

; 50   : 	float f1 = 1.300;//3f a6 66 66

  00138	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fa66666
  00140	f3 0f 11 85 98
	fe ff ff	 movss	 DWORD PTR _f1$[ebp], xmm0

; 51   : 	float f2 = -1.300;//bf a6 66 66

  00148	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfa66666
  00150	f3 0f 11 85 8c
	fe ff ff	 movss	 DWORD PTR _f2$[ebp], xmm0

; 52   : 	//17
; 53   : 	float f3 = 56.3456f;

  00158	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@426161e5
  00160	f3 0f 11 85 80
	fe ff ff	 movss	 DWORD PTR _f3$[ebp], xmm0

; 54   : 	float f4 = f3 / 0;//inf, +besk

  00168	f3 0f 10 85 80
	fe ff ff	 movss	 xmm0, DWORD PTR _f3$[ebp]
  00170	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@00000000
  00178	f3 0f 11 85 74
	fe ff ff	 movss	 DWORD PTR _f4$[ebp], xmm0

; 55   : 	float f5 = -f3 / 0;//-inf, -besk

  00180	f3 0f 10 85 80
	fe ff ff	 movss	 xmm0, DWORD PTR _f3$[ebp]
  00188	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0018f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@00000000
  00197	f3 0f 11 85 68
	fe ff ff	 movss	 DWORD PTR _f5$[ebp], xmm0

; 56   : 	float f6 = f4 + f5;//-ind, -neopred

  0019f	f3 0f 10 85 74
	fe ff ff	 movss	 xmm0, DWORD PTR _f4$[ebp]
  001a7	f3 0f 58 85 68
	fe ff ff	 addss	 xmm0, DWORD PTR _f5$[ebp]
  001af	f3 0f 11 85 5c
	fe ff ff	 movss	 DWORD PTR _f6$[ebp], xmm0

; 57   : 
; 58   : 	double d = 93.244;//40 57 4f 9d b2 2d 0e 56

  001b7	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40574f9db22d0e56
  001bf	f2 0f 11 85 4c
	fe ff ff	 movsd	 QWORD PTR _d$[ebp], xmm0

; 59   : 	//18
; 60   : 	char* uc = &c+3;//00 9f f9 3b, 00 dd fb e2

  001c7	8d 45 ca	 lea	 eax, DWORD PTR _c$[ebp+3]
  001ca	89 85 40 fe ff
	ff		 mov	 DWORD PTR _uc$[ebp], eax

; 61   : 	wchar_t* uwc = &wc+3;//00 9f f9 20, 00 dd fb ca

  001d0	8d 45 b2	 lea	 eax, DWORD PTR _wc$[ebp+6]
  001d3	89 85 34 fe ff
	ff		 mov	 DWORD PTR _uwc$[ebp], eax

; 62   : 	short* us = &s1+3;//00 9f f9 08, 00 dd fb b2

  001d9	8d 45 9a	 lea	 eax, DWORD PTR _s1$[ebp+6]
  001dc	89 85 28 fe ff
	ff		 mov	 DWORD PTR _us$[ebp], eax

; 63   : 	int* ui = &i1+3;//00 9f f8 b4, 00 dd fb 64

  001e2	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _i1$[ebp+12]
  001e8	89 85 1c fe ff
	ff		 mov	 DWORD PTR _ui$[ebp], eax

; 64   : 	float* uf = &f1+3;//00 9f f8 0c, 00 dd fa bc

  001ee	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR _f1$[ebp+12]
  001f4	89 85 10 fe ff
	ff		 mov	 DWORD PTR _uf$[ebp], eax

; 65   : 	double* d1 = &d+3;//00 d3 fa 2c, 00 dd fa 7c

  001fa	8d 85 64 fe ff
	ff		 lea	 eax, DWORD PTR _d$[ebp+24]
  00200	89 85 04 fe ff
	ff		 mov	 DWORD PTR _d1$[ebp], eax

; 66   : 
; 67   : 	//19
; 68   : 	int(*func_mul)(int x, int y) = mul;//81 ec 8b 55

  00206	c7 85 f8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _func_mul$[ebp], OFFSET ?mul@@YAHHH@Z ; mul

; 69   : 
; 70   : 	//20
; 71   : 	char& rc = c;

  00210	8d 45 c7	 lea	 eax, DWORD PTR _c$[ebp]
  00213	89 85 ec fd ff
	ff		 mov	 DWORD PTR _rc$[ebp], eax

; 72   : 	wchar_t& rwc = wc;

  00219	8d 45 ac	 lea	 eax, DWORD PTR _wc$[ebp]
  0021c	89 85 e0 fd ff
	ff		 mov	 DWORD PTR _rwc$[ebp], eax

; 73   : 	short& rs = s1;

  00222	8d 45 94	 lea	 eax, DWORD PTR _s1$[ebp]
  00225	89 85 d4 fd ff
	ff		 mov	 DWORD PTR _rs$[ebp], eax

; 74   : 	int& ri = i1;

  0022b	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _i1$[ebp]
  00231	89 85 c8 fd ff
	ff		 mov	 DWORD PTR _ri$[ebp], eax

; 75   : 	float& rf = f3;

  00237	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR _f3$[ebp]
  0023d	89 85 bc fd ff
	ff		 mov	 DWORD PTR _rf$[ebp], eax

; 76   : 	double& rd = d;

  00243	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR _d$[ebp]
  00249	89 85 b0 fd ff
	ff		 mov	 DWORD PTR _rd$[ebp], eax

; 77   : 
; 78   : 	rc = 'O';//4f

  0024f	8b 85 ec fd ff
	ff		 mov	 eax, DWORD PTR _rc$[ebp]
  00255	c6 00 4f	 mov	 BYTE PTR [eax], 79	; 0000004fH

; 79   : 	rwc = L'–Я';//04 1f

  00258	b8 1f 04 00 00	 mov	 eax, 1055		; 0000041fH
  0025d	8b 8d e0 fd ff
	ff		 mov	 ecx, DWORD PTR _rwc$[ebp]
  00263	66 89 01	 mov	 WORD PTR [ecx], ax

; 80   : 	rs = 15;//00 0f

  00266	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  0026b	8b 8d d4 fd ff
	ff		 mov	 ecx, DWORD PTR _rs$[ebp]
  00271	66 89 01	 mov	 WORD PTR [ecx], ax

; 81   : 	ri = 67;//00 00 00 43

  00274	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR _ri$[ebp]
  0027a	c7 00 43 00 00
	00		 mov	 DWORD PTR [eax], 67	; 00000043H

; 82   : 	rf = 67.35f;//42 86 b3 33

  00280	8b 85 bc fd ff
	ff		 mov	 eax, DWORD PTR _rf$[ebp]
  00286	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4286b333
  0028e	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 83   : 	rd = 45.3948;//40 46 b2 88 ce 70 3a fb

  00292	8b 85 b0 fd ff
	ff		 mov	 eax, DWORD PTR _rd$[ebp]
  00298	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4046b288ce703afb
  002a0	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0

; 84   : 
; 85   : 
; 86   : 	system("pause");

  002a4	8b f4		 mov	 esi, esp
  002a6	68 00 00 00 00	 push	 OFFSET ??_C@_05PDJBBECF@pause@
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__system
  002b1	83 c4 04	 add	 esp, 4
  002b4	3b f4		 cmp	 esi, esp
  002b6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 87   : 	return 0;

  002bb	33 c0		 xor	 eax, eax

; 88   : }

  002bd	52		 push	 edx
  002be	8b cd		 mov	 ecx, ebp
  002c0	50		 push	 eax
  002c1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@wmain
  002c7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002cc	58		 pop	 eax
  002cd	5a		 pop	 edx
  002ce	5f		 pop	 edi
  002cf	5e		 pop	 esi
  002d0	5b		 pop	 ebx
  002d1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d4	33 cd		 xor	 ecx, ebp
  002d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002db	81 c4 d4 03 00
	00		 add	 esp, 980		; 000003d4H
  002e1	3b ec		 cmp	 ebp, esp
  002e3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e8	8b e5		 mov	 esp, ebp
  002ea	5d		 pop	 ebp
  002eb	c3		 ret	 0
$LN11@wmain:
  002ec	07 00 00 00	 DD	 7
  002f0	00 00 00 00	 DD	 $LN10@wmain
$LN10@wmain:
  002f4	c7 ff ff ff	 DD	 -57			; ffffffc7H
  002f8	01 00 00 00	 DD	 1
  002fc	00 00 00 00	 DD	 $LN3@wmain
  00300	ac ff ff ff	 DD	 -84			; ffffffacH
  00304	02 00 00 00	 DD	 2
  00308	00 00 00 00	 DD	 $LN4@wmain
  0030c	94 ff ff ff	 DD	 -108			; ffffff94H
  00310	02 00 00 00	 DD	 2
  00314	00 00 00 00	 DD	 $LN5@wmain
  00318	40 ff ff ff	 DD	 -192			; ffffff40H
  0031c	04 00 00 00	 DD	 4
  00320	00 00 00 00	 DD	 $LN6@wmain
  00324	98 fe ff ff	 DD	 -360			; fffffe98H
  00328	04 00 00 00	 DD	 4
  0032c	00 00 00 00	 DD	 $LN7@wmain
  00330	80 fe ff ff	 DD	 -384			; fffffe80H
  00334	04 00 00 00	 DD	 4
  00338	00 00 00 00	 DD	 $LN8@wmain
  0033c	4c fe ff ff	 DD	 -436			; fffffe4cH
  00340	08 00 00 00	 DD	 8
  00344	00 00 00 00	 DD	 $LN9@wmain
$LN9@wmain:
  00348	64		 DB	 100			; 00000064H
  00349	00		 DB	 0
$LN8@wmain:
  0034a	66		 DB	 102			; 00000066H
  0034b	33		 DB	 51			; 00000033H
  0034c	00		 DB	 0
$LN7@wmain:
  0034d	66		 DB	 102			; 00000066H
  0034e	31		 DB	 49			; 00000031H
  0034f	00		 DB	 0
$LN6@wmain:
  00350	69		 DB	 105			; 00000069H
  00351	31		 DB	 49			; 00000031H
  00352	00		 DB	 0
$LN5@wmain:
  00353	73		 DB	 115			; 00000073H
  00354	31		 DB	 49			; 00000031H
  00355	00		 DB	 0
$LN4@wmain:
  00356	77		 DB	 119			; 00000077H
  00357	63		 DB	 99			; 00000063H
  00358	00		 DB	 0
$LN3@wmain:
  00359	63		 DB	 99			; 00000063H
  0035a	00		 DB	 0
_wmain	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab04\LP_lab04\LP_lab04.cpp
;	COMDAT ?mul@@YAHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?mul@@YAHHH@Z PROC					; mul, COMDAT

; 4    : int mul(int x, int y) { return x * y; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __52D35071_LP_lab04@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0002b	0f af 45 0c	 imul	 eax, DWORD PTR _y$[ebp]
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?mul@@YAHHH@Z ENDP					; mul
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab04\LP_lab04\LP_lab04.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __52D35071_LP_lab04@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Lenovo\Desktop\2 сем\яѕ\лабы\LP_lab04\LP_lab04\LP_lab04.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __52D35071_LP_lab04@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
